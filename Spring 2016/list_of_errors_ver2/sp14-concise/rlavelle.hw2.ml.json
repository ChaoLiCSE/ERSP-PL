{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let fixpoint (f,b) = \nlet h x = (f x, if f x = x then false else true) in\nwwhile (h ,b)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec exprToString e = (string x) = e;;\n", "in": "let rec exprToString e = \nstring x = e", "type": "scope", "out": "Error: Unbound value string\nHint: Did you mean stdin?\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec exprToString e = (String x) = e;;\n", "in": "let rec exprToString e = \nString x = e", "type": "scope", "out": "Error: Unbound constructor String\n"}], "event": "eval"}
{"ocaml": [{"min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> \"sin\" ^ (exprToString a)\n  | Cosine a -> \"cos\" ^ (exprToString a)\n  | Average (a,b) -> (exprToString a) ^ (\"/\" ^ (exprToString b))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      (exprToString a) ^\n        (\"<\" ^\n           ((exprToString b) ^\n              (\"?\" ^ ((exprToString c) ^ (\":\" ^ (exprToString d))))));;\n", "in": "let rec exprToString e = \nmatch e with\n| VarX -> x\n| VarY -> y\n| Sine a -> \"sin\" ^ exprToString a\n| Cosine a -> \"cos\" ^ exprToString a\n| Average (a,b) -> exprToString a ^ \"/\" ^ exprToString b\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d", "type": "scope", "out": "Error: Unbound value x\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec exprToString e = \nmatch e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin\" ^ exprToString a\n| Cosine a -> \"cos\" ^ exprToString a\n| Average (a,b) -> exprToString a ^ \"/\" ^ exprToString b\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let fixpoint (f,b) = \nlet h x = (f x, if f x = x then false else true) in\nwwhile (h ,b)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec exprToString e = \nmatch e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ exprToString a ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ exprToString a ^ \")\"\n| Average (a,b) -> \"(\" ^ exprToString a ^ \"+\" ^ exprToString b ^ \")/2\"\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec exprToString e = \nmatch e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ exprToString a ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ exprToString a ^ \")\"\n| Average (a,b) -> \"((\" ^ exprToString a ^ \"+\" ^ exprToString b ^ \")/2)\"\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec exprToString e = \nmatch e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ exprToString a ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ exprToString a ^ \")\"\n| Average (a,b) -> \"((\" ^ exprToString a ^ \"+\" ^ exprToString b ^ \")/2)\"\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> \"(\" ^ exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d ^ \")\"", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let buildX()                       = VarX", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> sin (pi *. (eval (a, x, y)))\n  | Cosine a -> cos (pi *. (eval (a, x, y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y);;\n", "in": "let rec eval (e,x,y) = \nmatch e with\n|VarX -> x\n|VarY -> y\n|Sine a -> sin (pi *. eval(a,x,y))\n|Cosine a -> cos (pi *. eval(a,x,y))\n|Average (a,b) -> (eval(a,x,y) +. eval(b,x,y)) /. 2\n|Times (a,b) -> eval(a,x,y) *. eval(b,x,y)\n|Thresh (a,b,c,d) -> if eval(a,x,y) < eval(b,x,y) then eval(c,x,y) else eval(d,x,y)", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         float\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec eval (e,x,y) = \nmatch e with\n|VarX -> x\n|VarY -> y\n|Sine a -> sin (pi *. eval(a,x,y))\n|Cosine a -> cos (pi *. eval(a,x,y))\n|Average (a,b) -> (eval(a,x,y) +. eval(b,x,y)) /. 2.\n|Times (a,b) -> eval(a,x,y) *. eval(b,x,y)\n|Thresh (a,b,c,d) -> if eval(a,x,y) < eval(b,x,y) then eval(c,x,y) else eval(d,x,y)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  if depth = 0\n  then let result = rand 0 1 in (if result = 0 then buildX () else buildY ())\n  else\n    (let result = rand 0 6 in\n     match result with\n     | 0 -> buildX ()\n     | 1 -> buildY ()\n     | 2 -> buildSine (build (rand, (depth - 1)))\n     | 3 -> buildCosine (build (rand, (depth - 1)))\n     | 4 ->\n         buildAverage\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 5 ->\n         buildTimes\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 6 ->\n         buildThresh\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n             (build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | _ -> build ());;\n", "in": "let rec build (rand, depth) = \nif depth = 0 then \nlet result = rand 0 1 in\nif result = 0 then \nbuildX() else\nbuildY()\nelse\nlet result = rand 0 6 in\nmatch result with\n|0 -> buildX()\n|1 -> buildY()\n|2 -> buildSine(build(rand,depth-1))\n|3 -> buildCosine(build(rand,depth-1))\n|4 -> buildAverage(build(rand,depth-1),build(rand,depth-1))\n|5 -> buildTimes(build(rand,depth-1),build(rand,depth-1))\n|6 -> buildThresh(build(rand,depth-1),build(rand,depth-1),build(rand,depth-1),build(rand,depth-1))\n|_ -> build()", "type": "type", "out": "Error: This expression has type unit but an expression was expected of type\n         (int -> int -> int) * int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec build (rand, depth) = \nif depth = 0 then \nlet result = rand 0 1 in\nif result = 0 then \nbuildX() else\nbuildY()\nelse\nlet result = rand 0 6 in\nmatch result with\n|0 -> buildX()\n|1 -> buildY()\n|2 -> buildSine(build(rand,depth-1))\n|3 -> buildCosine(build(rand,depth-1))\n|4 -> buildAverage(build(rand,depth-1),build(rand,depth-1))\n|5 -> buildTimes(build(rand,depth-1),build(rand,depth-1))\n|6 -> buildThresh(build(rand,depth-1),build(rand,depth-1),build(rand,depth-1),build(rand,depth-1))\n|_ -> buildX()", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec build (rand, depth) = \nif depth = 0 then \nlet result = rand (0,1) in\nif result = 0 then \nbuildX() else\nbuildY()\nelse\nlet result = rand (0,6) in\nmatch result with\n|0 -> buildX()\n|1 -> buildY()\n|2 -> buildSine(build(rand,depth-1))\n|3 -> buildCosine(build(rand,depth-1))\n|4 -> buildAverage(build(rand,depth-1),build(rand,depth-1))\n|5 -> buildTimes(build(rand,depth-1),build(rand,depth-1))\n|6 -> buildThresh(build(rand,depth-1),build(rand,depth-1),build(rand,depth-1),build(rand,depth-1))\n|_ -> buildX()", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec exprToString e = \nmatch e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ exprToString a ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ exprToString a ^ \")\"\n| Average (a,b) -> \"((\" ^ exprToString a ^ \"+\" ^ exprToString b ^ \")/2)\"\n| Times (a,b) -> exprToString a ^ \"*\" ^ exprToString b\n| Thresh (a,b,c,d) -> \"(\" ^ exprToString a ^ \"<\" ^ exprToString b ^ \"?\" ^ exprToString c ^ \":\" ^ exprToString d ^ \")\"\n| Inverse a -> \"1/\" ^ exprToString a\n| Max (a,b) -> \"max(\" ^exprToString a ^ \",\" ^exprToString b ^ \")\"\n| Range (a,b,c) -> \"range(\" ^ exprToString a ^ \",\" ^ exprToString b ^ \",\" ^ exprToString c ^ \")\"", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let buildRange(e1,e2,e3)           = Range(e1,e2,e3)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Inverse of expr\n  | Max of expr* expr\n  | Range of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> sin (pi *. (eval (a, x, y)))\n  | Cosine a -> cos (pi *. (eval (a, x, y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Inverse a ->\n      let result = eval (a, x, y) in if result = 0. then 0 else 1 /. result\n  | Max (a,b) ->\n      let aResult = eval (a, x, y) in\n      let bResult = eval (b, x, y) in\n      if aResult > bResult then aResult else bResult\n  | Range (a,b,c) ->\n      let aResult = eval (a, x, y) in\n      let bResult = eval (b, x, y) in\n      let cResult = eval (c, x, y) in\n      if aResult < bResult\n      then bResult\n      else if aResult < cResult then cResult else aResult;;\n", "in": "let rec eval (e,x,y) = \nmatch e with\n|VarX -> x\n|VarY -> y\n|Sine a -> sin (pi *. eval(a,x,y))\n|Cosine a -> cos (pi *. eval(a,x,y))\n|Average (a,b) -> (eval(a,x,y) +. eval(b,x,y)) /. 2.\n|Times (a,b) -> eval(a,x,y) *. eval(b,x,y)\n|Thresh (a,b,c,d) -> if eval(a,x,y) < eval(b,x,y) then eval(c,x,y) else eval(d,x,y)\n|Inverse a -> let result  = eval(a,x,y) in\nif result = 0. then\n0 \nelse\n1 /. result\n|Max (a,b) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nif aResult > bResult then aResult\nelse bResult\n|Range (a,b,c) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nlet cResult = eval(c,x,y) in\nif aResult < bResult then bResult else\nif aResult < cResult then cResult else\naResult", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         float\n"}, {"min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Inverse of expr\n  | Max of expr* expr\n  | Range of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> sin (pi *. (eval (a, x, y)))\n  | Cosine a -> cos (pi *. (eval (a, x, y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Inverse a ->\n      let result = eval (a, x, y) in if result = 0. then 0. else 1 /. result\n  | Max (a,b) ->\n      let aResult = eval (a, x, y) in\n      let bResult = eval (b, x, y) in\n      if aResult > bResult then aResult else bResult\n  | Range (a,b,c) ->\n      let aResult = eval (a, x, y) in\n      let bResult = eval (b, x, y) in\n      let cResult = eval (c, x, y) in\n      if aResult < bResult\n      then bResult\n      else if aResult < cResult then cResult else aResult;;\n", "in": "let rec eval (e,x,y) = \nmatch e with\n|VarX -> x\n|VarY -> y\n|Sine a -> sin (pi *. eval(a,x,y))\n|Cosine a -> cos (pi *. eval(a,x,y))\n|Average (a,b) -> (eval(a,x,y) +. eval(b,x,y)) /. 2.\n|Times (a,b) -> eval(a,x,y) *. eval(b,x,y)\n|Thresh (a,b,c,d) -> if eval(a,x,y) < eval(b,x,y) then eval(c,x,y) else eval(d,x,y)\n|Inverse a -> let result  = eval(a,x,y) in\nif result = 0. then 0.\nelse\n1 /. result\n|Max (a,b) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nif aResult > bResult then aResult\nelse bResult\n|Range (a,b,c) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nlet cResult = eval(c,x,y) in\nif aResult < bResult then bResult else\nif aResult < cResult then cResult else\naResult", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         float\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec eval (e,x,y) = \nmatch e with\n|VarX -> x\n|VarY -> y\n|Sine a -> sin (pi *. eval(a,x,y))\n|Cosine a -> cos (pi *. eval(a,x,y))\n|Average (a,b) -> (eval(a,x,y) +. eval(b,x,y)) /. 2.\n|Times (a,b) -> eval(a,x,y) *. eval(b,x,y)\n|Thresh (a,b,c,d) -> if eval(a,x,y) < eval(b,x,y) then eval(c,x,y) else eval(d,x,y)\n|Inverse a -> let result  = eval(a,x,y) in\nif result = 0. then 0.\nelse\n1. /. result\n|Max (a,b) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nif aResult > bResult then aResult\nelse bResult\n|Range (a,b,c) -> let aResult = eval(a,x,y) in\nlet bResult = eval(b,x,y) in\nlet cResult = eval(c,x,y) in\nif aResult < bResult then bResult else\nif aResult < cResult then cResult else\naResult", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec assoc (d,k,l) = \nmatch l with\n|[] -> d\n|h::t -> (match h with \n|(k',d') -> if k' = k then d' else assoc(d,k,t) )", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let doRandomColor (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand (seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| Square   of expr\n| Max      of expr * expr\n| Range    of expr * expr * expr", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let buildSquare(e)\t           = Square(e)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec build (rand, depth) = \nif depth = 0 then \nlet result = rand (0,1) in\nif result = 0 then \nbuildX() else\nbuildY()\nelse\nlet result = rand (0,9) in\nmatch result with\n|0 -> buildX()\n|1 -> buildY()\n|2 -> buildSine(build(rand,depth-1))\n|3 -> buildCosine(build(rand,depth-1))\n|4 -> buildAverage(build(rand,depth-1),build(rand,depth-1))\n|5 -> buildTimes(build(rand,depth-1),build(rand,depth-1))\n|6 -> buildThresh(build(rand,depth-1),build(rand,depth-1),build(rand,depth-1),build(rand,depth-1))\n|7 -> buildSquare(build(rand,depth-1))\n|8 -> buildMax(build(rand,depth-1),build(rand,depth-1))\n|9 -> buildRange(build(rand,depth-1),build(rand,depth-1),build(rand,depth-1))\n|_ -> buildX()", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)", "type": "", "out": ""}], "event": "eval"}
