{"ocaml": [{"min": "\nlet rec digitalRoot xs =\n  if (xs / 10) = 0 then xs else digital (sumList (digitsOfInt xs));;\n", "in": "let rec digitalRoot xs =\nif xs / 10 = 0\nthen xs\nelse digital (sumList(digitsOfInt xs))", "type": "scope", "out": "Error: Unbound value digital\n"}, {"min": "\nlet rec additivePersistance xs =\n  if (xs / 10) = 0\n  then 0\n  else 1 + (additivePersistance (sumList (digitsOfInt xs)));;\n", "in": "let rec additivePersistance xs = \nif xs / 10 = 0\nthen 0\nelse 1 + additivePersistance (sumList(digitsOfInt xs))", "type": "scope", "out": "Error: Unbound value sumList\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet _ = palindrome \"racecar\";;\n", "in": "palindrome \"racecar\"", "type": "scope", "out": "Error: Unbound value palindrome\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sumList xs = match xs with\n| []    -> 0\n| x::xs' -> x + sumList xs'", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let digits n = digitsOfInt (abs n)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec additivePersistence n = \nif n / 10 = 0\nthen 0\nelse additivePersistence (sumList(digitsOfInt n)) + 1", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]     -> true\n| [],_      -> false\n| _, []     -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let palindrome w = \naux_palindrome (explode w) (listReverse (explode w))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]            -> true\n| [],_             -> false\n| _, []            -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "type": "", "out": ""}], "event": "eval"}
