{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = 0 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun a -> a) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = 0 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = a in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x a in\nlet base = a in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value a\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = 3 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = base in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x a in\nlet base = base in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value base\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = failwith \"to be implemented\" in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = x in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x a in\nlet base = x in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value x\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = 0 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs b = \nlet f a x = x(a) in\nlet base = b in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = fun x -> x in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = x in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = x in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value x\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = 0 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs b = \nlet f a x = x(a) in\nlet base = b in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = 3 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = [] in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = \"\" in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = a in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = a in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value a\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = a x in let base x = x in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = a x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "type", "out": "Error: This expression has type ('a -> 'b) -> 'a -> 'b\n       but an expression was expected of type ('a -> 'b) -> 'a -> 'a -> 'b\n       The type variable 'b occurs inside 'a -> 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = 0 in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x + x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = int in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x a in\nlet base = int in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = function | a -> a in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet pipe fs = let f a x = x a in let base = int a in List.fold_left f base fs;;\n", "in": "let pipe fs = \nlet f a x = x a in\nlet base = int a in\nList.fold_left f base fs", "type": "scope", "out": "Error: Unbound value int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = fun x' ->\nlet f a x = x a in\nlet base = x' in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let stringOfList f l = \"[\" ^ sepConcat \"; \" (List.map f l) ^ \"]\"", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = x(a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs =\nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let pipe fs = fun x' ->\nlet f a x = x a in\nlet base = x' in\nList.fold_left f base fs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> [x] @ ((clone x n) - 1);;\n", "in": "let rec clone x n = \nmatch n > 0 with\n| false -> []\n| true  -> [x] @ (clone x n-1)", "type": "type", "out": "Error: This expression has type 'a list\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone ((x n) - 1));;\n", "in": "let rec clone x n = \nmatch n > 0 with\n| false -> []\n| true  -> x :: (clone (x n-1))", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         int -> int\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: ((clone x n) - 1);;\n", "in": "let rec clone x n = \nmatch n > 0 with\n| false -> []\n| true  -> x :: clone x n-1", "type": "type", "out": "Error: This expression has type 'a list\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec clone x n = \nmatch n > 0 with\n| false -> []\n| true  -> x :: clone x (n-1)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> ((((clone 0) - lendiff) @ l1), l2));;\n", "in": "let padZero l1 l2 = \nmatch List.length l1 = List.length l2 with\n| true -> (l1, l2)\n| false ->\nlet lendiff = List.length l1 - List.length l2 in\nmatch lendiff > 0 with\n| true  -> (l1, (clone 0 lendiff) @ l2)\n| false -> ((clone 0 -lendiff) @ l1, l2)", "type": "type", "out": "Error: This expression has type int -> int list\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let padZero l1 l2 = \nmatch List.length l1 = List.length l2 with\n| true -> (l1, l2)\n| false ->\nlet lendiff = List.length l1 - List.length l2 in\nmatch lendiff > 0 with\n| true  -> (l1, (clone 0 lendiff) @ l2)\n| false -> ((clone 0 (-lendiff)) @ l1, l2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let padZero l1 l2 = \nmatch List.length l1 = List.length l2 with\n| true -> (l1, l2)\n| false ->\nlet lendiff = List.length l1 - List.length l2 in\nmatch lendiff > 0 with\n| true  -> (l1, (clone 0 lendiff) @ l2)\n| false -> ((clone 0 (-lendiff)) @ l1, l2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec removeZero l = \nmatch l with\n| []      -> []\n| 0 :: t  -> removeZero t\n| _       -> l", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) + a) / 10 in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = (x + y + a) / 10 in\nlet base = 0 in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         'a * 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) + a) / 10 in\n    let base = 0 in\n    let args = List.combine l1 l2 in List.fold_left f base args in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = (x + y + a) / 10 in\nlet base = 0 in\nlet args = List.combine l1 l2 in\nList.fold_left f base args\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         int list\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) + a) / 10 in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = (x + y + a) / 10 in\nlet base = 0 in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This expression has type int but an expression was expected of type\n         'a * 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) / 10) :: a in\n    let base = [] in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = (x + y) / 10 :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This expression has type int list\n       but an expression was expected of type 'a * 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = (x + y) / 10 :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) % 10) :: a in\n    let base = [] in\n    let args = List.combine l1 l2 in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) % 10) :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "scope", "out": "Error: Unbound value %\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) mod 10) :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) % 10) :: a in\n    let base = [] in\n    let args = List.combine l1 l2 in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) % 10) :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "scope", "out": "Error: Unbound value %\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) / 10) :: a in\n    let base = [] in\n    let args = List.rev List.combine l1 l2 in\n    let res = List.fold_left f base args in List.rev res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nList.rev res\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) = ((x + y) / 10) :: a in\n    let base = [] in\n    let args = List.rev List.combine l1 l2 in\n    let res = List.fold_left f base args in res in\n  List.rev removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev List.combine l1 l2 in\nlet (res) = List.fold_left f base args in\nres\nin \nList.rev removeZero (add (padZero l1 l2))", "type": "type", "out": "Error: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nList.rev res\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = ((x + y) / 10) :: a in\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \n(add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> ((x + y) / 10) :: a \n| h :: t -> ((x + y + h) / 10) :: a\nin\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \n(add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h % 10] @ t in\n    let base = [] in\n    let args = List.rev (List.combine l1 l2) in\n    let res = List.fold_left f base args in res in\n  add (padZero l1 l2);;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h % 10] @ t\nin\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \n(add (padZero l1 l2))", "type": "scope", "out": "Error: Unbound value %\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \n(add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev((0,0) :: List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \n(add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let res = List.fold_left f base args in res in\n  removeZeros (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev((0,0) :: List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZeros (add (padZero l1 l2))", "type": "scope", "out": "Error: Unbound value removeZeros\nHint: Did you mean removeZero?\nError: Unbound value removeZeros\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nError: Unbound value removeZeros\nHint: Did you mean removeZero?\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev((0,0) :: List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let sqsum xs = \nlet f a x = a + x*x in\nlet base = 0 in\nList.fold_left f base xs", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet y f g x = f (g x);;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(x * y) + (h / 10); h mod 10] @ t in\n  let base = [] in let args = List.rev (0 :: l) in List.fold_left f base args;;\n", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [x * y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nList.fold_left f base args", "type": "type", "out": "Error: This expression has type ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nList.fold_left f base args", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero List.fold_left f base args;;\n", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nremoveZero List.fold_left f base args", "type": "type", "out": "Error: This function has type int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nremoveZero (List.fold_left f base args)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev((0,0) :: List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "type", "out": "Error: This expression has type int list\n       but an expression was expected of type 'a * 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a (x,y) = \nmatch a with\n| [] -> (x + y) :: a \n| h :: t -> [x + y + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev((0,0) :: List.combine l1 l2) in\nlet (res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | [] -> (mulByDigit x l2) :: a\n    | h::t -> [(bigAdd (mulByDigit x l2) h) / 10; h mod 10] @ t in\n  let base = [] in\n  let args = List.rev l1 in let (_,res) = List.fold_left f base args in res;;\n", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []      -> (mulByDigit x l2) :: a\n| h :: t  -> [bigAdd (mulByDigit x l2) h/10; h mod 10] @ t \nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (_, res) = List.fold_left f base args in\nres", "type": "type", "out": "Error: This expression has type int list\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | [] -> (mulByDigit x l2) :: a\n    | h::t -> [bigAdd (mulByDigit x l2) [h / 10]; h mod 10] @ t in\n  let base = [] in\n  let args = List.rev l1 in let (_,res) = List.fold_left f base args in res;;\n", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []      -> (mulByDigit x l2) :: a\n| h :: t  -> [bigAdd (mulByDigit x l2) [h/10]; h mod 10] @ t \nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (_, res) = List.fold_left f base args in\nres", "type": "type", "out": "Error: This expression has type int list\n       but an expression was expected of type int\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with | [] -> mulByDigit x l2 | _ -> bigAdd a (mulByDigit x l2) in\n  let base = [] in\n  let args = List.rev l1 in let (_,res) = List.fold_left f base args in res;;\n", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (_, res) = List.fold_left f base args in\nres", "type": "type", "out": "Error: This expression has type int list\n       but an expression was expected of type 'a * 'b\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (res) = List.fold_left f base args in\nres", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec clone x n =\n  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;\n\nlet padZero l1 l2 =\n  match (List.length l1) = (List.length l2) with\n  | true  -> (l1, l2)\n  | false  ->\n      let lendiff = (List.length l1) - (List.length l2) in\n      (match lendiff > 0 with\n       | true  -> (l1, ((clone 0 lendiff) @ l2))\n       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a (x,y) =\n      match a with\n      | [] -> (x + y) :: a\n      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in\n    let base = [] in\n    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in\n    let res = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | [] -> mulByDigit x l2\n    | _ -> bigAdd List.rev (0 :: (List.rev a)) (mulByDigit x l2) in\n  let base = [] in\n  let args = List.rev l1 in let res = List.fold_left f base args in res;;\n", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd List.rev(0 :: (List.rev a)) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (res) = List.fold_left f base args in\nres", "type": "type", "out": "Error: This function has type int list -> int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (res) = List.fold_left f base args in\nres", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev l1 in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev (0 :: l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = 0 :: List.rev (l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nremoveZero (List.fold_left f base args)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev (l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev a))) (mulByDigit x l2)\nin\nlet base = [] in\nlet args = List.rev (0 :: l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\n(List.fold_left f base args)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nremoveZero (List.fold_left f base args)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (List.rev(0 :: (List.rev (mulByDigit x l2))))\nin\nlet base = [] in\nlet args = List.rev (l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (List.rev(0 :: (List.rev (mulByDigit x l2))))\nin\nlet base = [] in\nlet args = List.rev (l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (List.rev(0 :: (List.rev (mulByDigit x l2))))\nin\nlet base = [] in\nlet args = (l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let rec mulByDigit i l = \nlet f a x = \nmatch a with\n| [] -> (i * x) :: a \n| h :: t -> [i * x + h/10; h mod 10] @ t\nin\nlet base = [] in\nlet args = List.rev(0 :: l) in\nremoveZero (List.fold_left f base args)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let test = mulByDigit 1 [1;0]", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet test = mulByDigit 1 [1; 0];;\n\nlet test = mulByDigit 1 [1; 0] List.rev test;;\n", "in": "let test = mulByDigit 1 [1;0]\nList.rev test", "type": "type", "out": "Error: This function has type int -> int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "\nlet rec removeZero l =\n  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | [] -> (i * x) :: a\n    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in\n  let base = [] in\n  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;\n\nlet test = mulByDigit 1 [1; 0];;\n\nlet test = mulByDigit 1 [1; 0] List.rev test;;\n", "in": "let test = mulByDigit 1 [1;0]\nList.rev test", "type": "type", "out": "Error: This function has type int -> int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let test = mulByDigit 1 [1;0]", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let test3 = mulByDigit 0 [1;0]", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "bigAdd test3 test2", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "removeZero(bigAdd test3 test2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd a (List.rev(0 :: (List.rev (mulByDigit x l2))))\nin\nlet base = [] in\nlet args = List.rev(l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (List.rev(0 :: (List.rev (mulByDigit x l2)))) a\nin\nlet base = [] in\nlet args = List.rev(l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (mulByDigit x l2) (List.rev(0 :: (List.rev a)))\nin\nlet base = [] in\nlet args = List.rev(l1) in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (mulByDigit x l2) (List.rev(0 :: (List.rev a)))\nin\nlet base = [] in\nlet args = l1 in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let padZero l1 l2 = \nmatch List.length l1 = List.length l2 with\n| true -> (l1, l2)\n| false ->\nlet lendiff = List.length l1 - List.length l2 in\nmatch lendiff > 0 with\n| true  -> (l1, (clone 0 lendiff) @ l2)\n| false -> ((clone 0 (-lendiff)) @ l1, l2)", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let bigMul l1 l2 = \nlet f a x = \nmatch a with\n| []  -> (mulByDigit x l2)\n| _   -> bigAdd (mulByDigit x l2) (a @ [0])\nin\nlet base = [] in\nlet args = l1 in\nlet (res) = List.fold_left f base args in\nremoveZero res", "type": "", "out": ""}], "event": "eval"}
{"ocaml": [{"min": "", "in": "let padZero l1 l2 = \nmatch List.length l1 = List.length l2 with\n| true -> (l1, l2)\n| false ->\nlet lendiff = List.length l1 - List.length l2 in\nmatch lendiff > 0 with\n| true  -> (l1, (clone 0 lendiff) @ l2)\n| false -> ((clone 0 (-lendiff)) @ l1, l2)", "type": "", "out": ""}], "event": "eval"}
