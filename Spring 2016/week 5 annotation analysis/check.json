{"annotated": "\nlet rec last l =\n  match l with | x::[] -> x | hd::tl -> last tl | [] -> failwith \"NO ELEMENT\";;\n\nlet rec listReverse  : 'a list -> 'a list = fun l  -> \n  match l with\n  | [] -> []\n  | hd::tl -> let x = last l in if x > 0 then x else x;;\n", "bad": "\nlet rec last l =\n  match l with | x::[] -> x | hd::tl -> last tl | [] -> failwith \"NO ELEMENT\";;\n\nlet rec listReverse l =\n  match l with\n  | [] -> []\n  | hd::tl -> let x = last l in if x > 0 then x else x;;\n", "fix": "\nlet rec listReverse l =\n  match l with | [] -> [] | hd::tl -> listReverse (hd :: l);;\n", "annotated_fix": "\nlet rec listReverse  : 'a list -> 'a list = fun l  -> \n  match l with | [] -> [] | hd::tl -> listReverse (hd :: l);;\n"}
