{"hw": "hw3", "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (mulByDigit i t);;\n"], "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (List.rev i t);;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n"], "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> List.append (mulByDigit i t) [(h * i) mod 10];;\n"], "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [mulByDigit i t; (h * i) mod 10];;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (List.rev i t);;\n"], "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (mulByDigit i t);;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n"], "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [mulByDigit i t; (h * i) mod 10];;\n"], "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> List.append (mulByDigit i t) [(h * i) mod 10];;\n"], "problem": "mulByDigit"}
{"hw": "hw3", "bad": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n"], "fix": ["\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n"], "problem": "mulByDigit"}
