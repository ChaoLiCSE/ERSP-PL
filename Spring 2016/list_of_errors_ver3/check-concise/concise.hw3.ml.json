{"event": "eval", "ocaml": [{"type": "other", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + List.rev i t )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (List.rev i t);;\n", "out": "Characters 85-93:\n  | h::t -> ( (h*i)/10 + List.rev i t );;\n                         ^^^^^^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + mulByDigit i t )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (mulByDigit i t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "out": "Characters 72-123:\n  | h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "out": "Characters 86-100:\n  | h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: [];;\n                         ^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i t) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [mulByDigit i t; (h * i) mod 10];;\n", "out": "Characters 73-89:\n  | h::t -> (mulByDigit i t) :: (h*i mod 10) :: [];;\n            ^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> List.append (mulByDigit i t) [h*i mod 10]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> List.append (mulByDigit i t) [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> h*i mod 10 :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}