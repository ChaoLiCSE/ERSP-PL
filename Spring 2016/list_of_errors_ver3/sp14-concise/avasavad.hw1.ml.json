{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"\n1 + 2", "min": "\nlet rec sumList xs = (failwith \"TBD:sumList\" 1) + 2;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = (* failwith \"TBD:sumList\" *)\n1 + 2", "min": "\nlet rec sumList xs = 1 + 2;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n > 0\nthen digitsOfInt (n/10) @ n mod 10 :: []\nelse []", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digits n = digitsOfInt (abs n)", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet digits n = digitsOfInt (abs n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let rec digits n = digitsOfInt (abs n)\n\ndigits (-124074)", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec digits n = digitsOfInt (abs n) digits (-124074);;\n", "out": "Characters 19-30:\n  let rec digits n = digitsOfInt (abs n)\n                     ^^^^^^^^^^^\nError: This function has type int -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digits n = digitsOfInt (abs n)", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec digits n = digitsOfInt (abs n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nif n > 10\nthen digitalRoot ( sumList (digitsOfInt n) )\nelse n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet rec digitalRoot n =\n  if n > 10 then digitalRoot (sumList (digitsOfInt n)) else n;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = failwith \"TBD\"", "min": "\nlet rec additivePersistence n = failwith \"TBD\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = match l with\nh::t -> (listReverse t) @ h :: []\n| [] -> []", "min": "\nlet rec listReverse l =\n  match l with | h::t -> (listReverse t) @ [h] | [] -> [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = match listReverse (explode w) with\nh :: t -> listReverse (explode w) = explode w\n| [] -> true", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | h::t -> (listReverse t) @ [h] | [] -> [];;\n\nlet palindrome w =\n  match listReverse (explode w) with\n  | h::t -> (listReverse (explode w)) = (explode w)\n  | [] -> true;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "palindrome \"bob\"", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | h::t -> (listReverse t) @ [h] | [] -> [];;\n\nlet palindrome w =\n  match listReverse (explode w) with\n  | h::t -> (listReverse (explode w)) = (explode w)\n  | [] -> true;;\n\nlet _ = palindrome \"bob\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec inc i n = \nif n>9 \nthen inc (i+1) sumList (digitsOfInt n)\nelse i", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet rec inc i n = if n > 9 then inc (i + 1) sumList (digitsOfInt n) else i;;\n", "out": "Characters 42-49:\n  then inc (i+1) sumList (digitsOfInt n)\n                 ^^^^^^^\nError: This expression has type int list -> int\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec inc i n = \nif n>9 \nthen inc (i+1) ( sumList (digitsOfInt n) )\nelse i", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet rec inc i n = if n > 9 then inc (i + 1) (sumList (digitsOfInt n)) else i;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \ninc 0 n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet rec inc i n = if n > 9 then inc (i + 1) (sumList (digitsOfInt n)) else i;;\n\nlet rec additivePersistence n = inc 0 n;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let additivePersistence n = \nlet rec inc i n = \nif(n>9) \nthen inc (i+1) ( sumList (digitsOfInt n) )\nelse i in\ninc 0 n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet additivePersistence n =\n  let rec inc i n =\n    if n > 9 then inc (i + 1) (sumList (digitsOfInt n)) else i in\n  inc 0 n;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \nlet rec inc i n = \nif(n>9) \nthen inc (i+1) ( sumList (digitsOfInt n) )\nelse i in\ninc 0 n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n\nlet rec additivePersistence n =\n  let rec inc i n =\n    if n > 9 then inc (i + 1) (sumList (digitsOfInt n)) else i in\n  inc 0 n;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\nh :: t -> h + sumList t\n| [] -> 0", "min": "\nlet rec sumList xs = match xs with | h::t -> h + (sumList t) | [] -> 0;;\n", "out": ""}]}
