{"event": "eval", "ocaml": [{"type": "", "in": "let rec sqsum xs = \nmatch xs with\nh::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | h::t -> (h * h) + (sqsum t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sqsum xs = \nmatch xs with\n[] -> []\n| h::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | [] -> [] | h::t -> (h * h) + (sqsum t);;\n", "out": "Characters 61-70:\n  | h::t -> (h*h) + (sqsum t);;\n                    ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sqsum xs = \nmatch xs with\n[] -> []\n| h::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | [] -> [] | h::t -> (h * h) + (sqsum t);;\n", "out": "Characters 61-70:\n  | h::t -> (h*h) + (sqsum t);;\n                    ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sqsum xs = \nmatch xs with\n[] -> []\n| h::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | [] -> [] | h::t -> (h * h) + (sqsum t);;\n", "out": "Characters 61-70:\n  | h::t -> (h*h) + (sqsum t);;\n                    ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sqsum xs = \nmatch xs with\n[] -> 0\n| h::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | [] -> 0 | h::t -> (h * h) + (sqsum t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let sqsum xs = \nlet f a x = (a*a) in\nlet base = [] in\nList.fold_left f base xs", "min": "\nlet sqsum xs = let f a x = a * a in let base = [] in List.fold_left f base xs;;\n", "out": "Characters 71-75:\n  List.fold_left f base xs;;\n                   ^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = (a*a) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs = let f a x = a * a in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = (a*a) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs = let f a x = a * a in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = match x with\n[] -> 0\n| h::t -> a + h\nin\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = match x with | [] -> 0 | h::t -> a + h in\n  let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sqsum xs = \nmatch xs with\n[] -> []\n| h::t -> (h*h) + (sqsum t)", "min": "\nlet rec sqsum xs = match xs with | [] -> [] | h::t -> (h * h) + (sqsum t);;\n", "out": "Characters 61-70:\n  | h::t -> (h*h) + (sqsum t);;\n                    ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}, {"type": "scope", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = a + 1 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = a + 1 in List.fold_left f base xs;;\n", "out": "Characters 52-53:\n  let base = a + 1 in\n             ^\nError: Unbound value a\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = a + 1 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = a + 1 in List.fold_left f base xs;;\n", "out": "Characters 52-53:\n  let base = a + 1 in\n             ^\nError: Unbound value a\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = match a with\n[] -> x\n| h::t -> h x in \nlet base = fs in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = match a with | [] -> x | h::t -> h x in\n  let base = fs in List.fold_left f base fs;;\n", "out": "Characters 98-99:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type ('a -> 'a) list -> 'a -> 'a\n       but an expression was expected of type\n         ('a -> 'a) list -> 'a -> ('a -> 'a) list\n       The type variable 'a occurs inside ('a -> 'a) list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = match a with\n[] -> x\n| h::t -> h x in \nlet base = 0 in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = match a with | [] -> x | h::t -> h x in\n  let base = 0 in List.fold_left f base fs;;\n", "out": "Characters 97-98:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type ('a -> 'a) list -> 'a -> 'a\n       but an expression was expected of type\n         ('a -> 'a) list -> 'a -> ('a -> 'a) list\n       The type variable 'a occurs inside ('a -> 'a) list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = a + x in\nlet base = 0 in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = a + x in let base = 0 in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = match a with\n[] -> []\n| h::t -> (h x) \nin\nlet base = 3 in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = match a with | [] -> [] | h::t -> h x in\n  let base = 3 in List.fold_left f base fs;;\n", "out": "Characters 100-101:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type ('a -> 'b list) list -> 'a -> 'b list\n       but an expression was expected of type\n         ('a -> 'b list) list -> 'a -> ('a -> 'b list) list\n       Type 'b list is not compatible with type ('a -> 'b list) list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = match a with\n[] -> x\n| h::t -> (h x) in\nlet base = failwith \"to be implemented\" in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = match a with | [] -> x | h::t -> h x in\n  let base = failwith \"to be implemented\" in List.fold_left f base fs;;\n", "out": "Characters 125-126:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type ('a -> 'a) list -> 'a -> 'a\n       but an expression was expected of type\n         ('a -> 'a) list -> 'a -> ('a -> 'a) list\n       The type variable 'a occurs inside ('a -> 'a) list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = match a with\n[] -> []\n| h::t -> h::[] in\nlet base = [] in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = match a with | [] -> [] | h::t -> [h] in\n  let base = [] in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = [] in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base = [] in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = [] in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base = [] in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = 0 in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base = 0 in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = a + x in\nlet base = 0 in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = a + x in let base = 0 in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a  in\nlet base = 0 in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base = 0 in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a  in\nlet base = [] in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base = [] in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a  in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun g b -> g b) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x g b = g b in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x -> x) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = (fun x -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x x = x a in let base x = x in List.fold_left f base fs;;\n", "out": "Characters 87-88:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type 'a -> 'b -> ('a -> 'c) -> 'c\n       but an expression was expected of type 'a -> 'b -> 'a\n       The type variable 'a occurs inside ('a -> 'c) -> 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x (a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ \" \" x in\nlet base = [] in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ (\" \" x)) in\n      let base = [] in let l = t in List.fold_left f base l;;\n", "out": "Characters 88-91:\n  let f a x = a ^ sep ^ \" \" x in\n                        ^^^\nError: This expression has type string\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ \" \" ^ x in\nlet base = [] in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ (\" \" ^ x)) in\n      let base = [] in let l = t in List.fold_left f base l;;\n", "out": "Characters 146-150:\n  List.fold_left f base l;;\n                   ^^^^\nError: This expression has type 'a list\n       but an expression was expected of type string\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ \" \" ^ x in\nlet base = \"\" in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ (\" \" ^ x)) in\n      let base = \"\" in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ \" \" ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ (\" \" ^ x)) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ \" \" ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ (\" \" ^ x)) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let stringOfList f l = ssepConcat (f l)", "min": "\nlet stringOfList f l = ssepConcat (f l);;\n", "out": "Error: Unbound value ssepConcat\nHint: Did you mean sepConcat?\nError: Unbound value ssepConcat\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 23-33:\n  let stringOfList f l = ssepConcat (f l);;\n                         ^^^^^^^^^^\nError: Unbound value ssepConcat\nHint: Did you mean sepConcat?\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let stringOfList f l = sepConcat (f l)", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = sepConcat (f l);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let stringOfList f l = List.map f l", "min": "\nlet stringOfList f l = List.map f l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let stringOfList f l = List.map f (sepConcat l)", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = List.map f (sepConcat l);;\n", "out": "Characters 34-47:\n  let stringOfList f l = List.map f (sepConcat l);;\n                                    ^^^^^^^^^^^^^\nError: This expression has type string list -> string\n       but an expression was expected of type 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let stringOfList f l = \"[\" ^ sepConcat ^ \";\" ^ List.map f l ^ \"]\"", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = \"[\" ^ (sepConcat ^ (\";\" ^ ((List.map f l) ^ \"]\")));;\n", "out": "Characters 29-38:\n  let stringOfList f l = \"[\" ^ sepConcat ^ \";\" ^ List.map f l ^ \"]\";;\n                               ^^^^^^^^^\nError: This expression has type string -> string list -> string\n       but an expression was expected of type string\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let stringOfList f l = \"[\" ^ (sepConcat \";\" List.map f l) ^ \"]\"", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = \"[\" ^ ((sepConcat \";\" List.map f l) ^ \"]\");;\n", "out": "Characters 30-39:\n  let stringOfList f l = \"[\" ^ (sepConcat \";\" List.map f l) ^ \"]\";;\n                                ^^^^^^^^^\nError: This function has type string -> string list -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let stringOfList f l = \"[\" ^ ( sepConcat \";\" (List.map f l) ) ^ \"]\"", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = \"[\" ^ ((sepConcat \";\" (List.map f l)) ^ \"]\");;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec clone x n = let i = 0 in\nif i < n\nthen x :: (clone x n-1)\nelse []", "min": "\nlet rec clone x n = let i = 0 in if i < n then x :: ((clone x n) - 1) else [];;\n", "out": "Characters 53-62:\n  then x :: (clone x n-1)\n             ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec clone x n = let i = 0 in\nif i < n\nthen (clone x n-1) :: x :: []\nelse []", "min": "\nlet rec clone x n = let i = 0 in if i < n then [(clone x n) - 1; x] else [];;\n", "out": "Characters 48-57:\n  then (clone x n-1) :: x :: []\n        ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec clone x n = let i = 0 in\nif i < n\nthen x :: ( clone x (n-1) )\nelse []", "min": "\nlet rec clone x n = let i = 0 in if i < n then x :: (clone x (n - 1)) else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 > List.length l2\nthen true\nelse false", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) > (List.length l2) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = let length_diff = (List.length l1 - List.length l2) in \nif length_diff < 0\nthen \ntrue\nelse \nfalse", "min": "\nlet padZero l1 l2 =\n  let length_diff = (List.length l1) - (List.length l2) in\n  if length_diff < 0 then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = let length_diff = (List.length l1 - List.length l2) in \nif length_diff < 0\nthen \nclone 0 length_diff\nelse \n[-100]", "min": "\nlet rec clone x n = let i = 0 in if i < n then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  let length_diff = (List.length l1) - (List.length l2) in\n  if length_diff < 0 then clone 0 length_diff else [(-100)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = let length_diff = (List.length l1 - List.length l2) in \nif length_diff < 0\nthen \n(clone 0 length_diff)\nelse \n[-100]", "min": "\nlet rec clone x n = let i = 0 in if i < n then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  let length_diff = (List.length l1) - (List.length l2) in\n  if length_diff < 0 then clone 0 length_diff else [(-100)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = let length_diff = (List.length l1 - List.length l2) in \nif length_diff < 0\nthen \ntrue\nelse \nfalse", "min": "\nlet padZero l1 l2 =\n  let length_diff = (List.length l1) - (List.length l2) in\n  if length_diff < 0 then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec clone x n = let i = 0 in\nif i < n\nthen x :: ( clone x (n-1) )\nelse []", "min": "\nlet rec clone x n = let i = 0 in if i < n then x :: (clone x (n - 1)) else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let padZero l1 l2 = let length_diff = (List.length l1 - List.length l2) in \nif length_diff < 0\nthen \nlength_diff = (List.length l1 - List.length l2)\nelse \nlength_diff", "min": "\nlet padZero l1 l2 =\n  let length_diff = (List.length l1) - (List.length l2) in\n  if length_diff < 0\n  then length_diff = ((List.length l1) - (List.length l2))\n  else length_diff;;\n", "out": "Characters 155-166:\n  length_diff;;\n  ^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         bool\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen true\nelse false", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec clone x n =\nif n > 0\nthen x :: ( clone x (n-1) )\nelse []", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen\nclone 0 (List.length l2 - List.length l1)\nelse\nclone 0 (List.length l1 - List.length l2)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then clone 0 ((List.length l2) - (List.length l1))\n  else clone 0 ((List.length l1) - (List.length l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen\nclone 0 (List.length l2 - List.length l1) :: l1\nelse\nclone 0 (List.length l1 - List.length l2) :: l2", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then (clone 0 ((List.length l2) - (List.length l1))) :: l1\n  else (clone 0 ((List.length l1) - (List.length l2))) :: l2;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen\nclone 0 (List.length l2 - List.length l1) :: l1\nelse\nclone 0 (List.length l1 - List.length l2) :: l2", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then (clone 0 ((List.length l2) - (List.length l1))) :: l1\n  else (clone 0 ((List.length l1) - (List.length l2))) :: l2;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen\n( List.append ( clone 0 (List.length l2 - List.length l1) ) l1, l2)\nelse\n(l1, List.append ( clone 0 (List.length l1 - List.length l2) ) l2)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let padZero l1 l2 = if List.length l1 < List.length l2\nthen\n( List.append ( clone 0 (List.length l2 - List.length l1) ) l1, l2)\nelse\n(l1, List.append ( clone 0 (List.length l1 - List.length l2) ) l2)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec removeZero l =\nmatch l with\n| [] -> []\n| h :: t -> \nif h = 0\nthen h = 0\nelse false", "min": "\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then h = 0 else false;;\n", "out": "Characters 74-79:\n  then h = 0\n       ^^^^^\nError: This expression has type bool but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec removeZero l =\nmatch l with\n| [] -> false\n| h :: t -> \nif h = 0\nthen h = 0\nelse false", "min": "\nlet rec removeZero l =\n  match l with | [] -> false | h::t -> if h = 0 then h = 0 else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec removeZero l =\nmatch l with\n| [] -> []\n| h :: t -> \nif h = 0\nthen []\nelse t", "min": "\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then [] else t;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec removeZero l =\nmatch l with\n| [] -> []\n| h :: t -> \nif h = 0\nthen removeZero t\nelse l", "min": "\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (x (a)) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = fun x a -> x (a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x a -> x a) x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = (fun x  -> fun a  -> x a) x a in\n  let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = ( (fun x a -> x a) x a ) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = (fun x  -> fun a  -> x a) x a in\n  let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x a -> x a) x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x = (fun x  -> fun a  -> x a) x a in\n  let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun y -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x y = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = (fun a x -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": "Characters 91-95:\n  List.fold_left f base fs;;\n                   ^^^^\nError: This expression has type 'a -> 'a\n       but an expression was expected of type 'a -> ('a -> 'b) -> 'b\n       The type variable 'a occurs inside ('a -> 'b) -> 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (fun x a -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x x a = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  (fun x -> x) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  (fun a x -> x) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  x (a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  (x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x =  (x (a) ) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = x in\nlet base = (List.rev l1) in\nlet args = (List.rev l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = x in\n    let base = List.rev l1 in\n    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 128-154:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'b * 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = x in\nlet base = 0 in\nlet args = (List.rev l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = x in\n    let base = 0 in\n    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 116-142:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = a in\nlet base = 0 in\nlet args = (List.rev l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = a in\n    let base = 0 in\n    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 116-142:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec removeZero l =\nmatch l with\n| [] -> []\n| h :: t -> \nif h = 0\nthen removeZero t\nelse l", "min": "\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> (h*i)/10", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> (h * i) / 10;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + List.rev i t )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (List.rev i t);;\n", "out": "Characters 85-93:\n  | h::t -> ( (h*i)/10 + List.rev i t );;\n                         ^^^^^^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + mulByDigit i t )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> 0 | h::t -> ((h * i) / 10) + (mulByDigit i t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> 0\n| h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "out": "Characters 72-123:\n  | h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [((h * i) / 10) + (mulByDigit i t); (h * i) mod 10];;\n", "out": "Characters 86-100:\n  | h::t -> ( (h*i)/10 + mulByDigit i t ) :: (h*i mod 10) :: [];;\n                         ^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i t) :: (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [mulByDigit i t; (h * i) mod 10];;\n", "out": "Characters 73-89:\n  | h::t -> (mulByDigit i t) :: (h*i mod 10) :: [];;\n            ^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> List.append (mulByDigit i t) [h*i mod 10]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> List.append (mulByDigit i t) [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> h*i mod 10 :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: h*i/10 :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10; (h * i) / 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: h*i/10 + h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((h * i) mod 10) :: (((h * i) / 10) + h);;\n", "out": "Characters 89-99:\n  | h::t -> (h*i mod 10) :: h*i/10 + h;;\n                            ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: h*i/10 + h :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [(h * i) mod 10; ((h * i) / 10) + h];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with | [] -> [] | h::t -> [(h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i t) (h*i mod 10) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [(mulByDigit i t) ((h * i) mod 10)];;\n", "out": "Characters 73-89:\n  | h::t -> (mulByDigit i t) (h*i mod 10) :: [];;\n            ^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::t -> List.append (mulByDigit i t) ( (h*i) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> List.append (mulByDigit i t) [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (l) with\n| []   -> []\n| h::t -> List.append (mulByDigit i t) ( (h*i) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match l with | [] -> [] | h::t -> List.append (mulByDigit i t) [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (l) with\n| []   -> []\n| h::t -> List.append ( (h*i) :: [] ) (mulByDigit i t)", "min": "\nlet rec mulByDigit i l =\n  match l with | [] -> [] | h::t -> List.append [h * i] (mulByDigit i t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> []\n| h::t -> List.append ( (h*i) :: [] ) (mulByDigit i t)", "min": "\nlet rec mulByDigit i l =\n  match l with | [] -> [] | h::t -> List.append [h * i] (mulByDigit i t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> []\n| h::m::t -> m", "min": "\nlet rec mulByDigit i l = match l with | [] -> [] | h::m::t -> m;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> []\n| h::t -> h*i", "min": "\nlet rec mulByDigit i l = match l with | [] -> [] | h::t -> h * i;;\n", "out": "Characters 62-65:\n  | h::t -> h*i;;\n            ^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> 0\n| h::t -> h*i", "min": "\nlet rec mulByDigit i l = match l with | [] -> 0 | h::t -> h * i;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> 0\n| h::m::t -> m", "min": "\nlet rec mulByDigit i l = match l with | [] -> 0 | h::m::t -> m;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> []\n| h::m::t -> t", "min": "\nlet rec mulByDigit i l = match l with | [] -> [] | h::m::t -> t;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> []\n| h::m::t -> m::t", "min": "\nlet rec mulByDigit i l = match l with | [] -> [] | h::m::t -> m :: t;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n| []   -> 0\n| h::m::t -> h*i", "min": "\nlet rec mulByDigit i l = match l with | [] -> 0 | h::m::t -> h * i;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (h*i)/10 :: ( (h*i mod 10) + m*i ) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t -> [(h * i) / 10; ((h * i) mod 10) + (m * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (h*i) mod 10 :: ( (h*i)/10 ) + m*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t -> ((h * i) mod 10) :: (((h * i) / 10) + (m * i));;\n", "out": "Characters 92-110:\n  | h::m::t -> (h*i) mod 10 :: ( (h*i)/10 ) + m*i;;\n                               ^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> ( (h*i) mod 10 ) :: ( (h*i)/10 ) + m*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t -> [(h * i) mod 10; ((h * i) / 10) + (m * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> ( (h*i) mod 10 ) :: ( (h*i)/10 ) + (m*i) mod 10 :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t -> [(h * i) mod 10; ((h * i) / 10) + ((m * i) mod 10)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t -> [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (mulByDigit m::t) :: ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      [(mulByDigit m)\n      ::\n      t;\n      ((h * i) / 10) + ((m * i) mod 10);\n      (h * i) mod 10];;\n", "out": "Characters 77-89:\n  | h::m::t -> (mulByDigit m::t) :: ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [];;\n                ^^^^^^^^^^^^\nError: This expression has type 'a list -> 'b list list\n       but an expression was expected of type 'b\n       The type variable 'b occurs inside 'a list -> 'b list list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (mulByDigit m::t) @ ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      ((mulByDigit m) :: t) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": "Characters 91-92:\n  | h::m::t -> (mulByDigit m::t) @ ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [];;\n                              ^\nError: This expression has type 'a list\n       but an expression was expected of type ('a list -> 'b list) list\n       The type variable 'a occurs inside 'a list -> 'b list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (mulByDigit m::t) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      ((mulByDigit m) :: t) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": "Characters 91-92:\n  | h::m::t -> (mulByDigit m::t) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] );;\n                              ^\nError: This expression has type 'a list\n       but an expression was expected of type ('a list -> 'b list) list\n       The type variable 'a occurs inside 'a list -> 'b list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (mulByDigit i m::t) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      ((mulByDigit i m) :: t) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": "Characters 90-91:\n  | h::m::t -> (mulByDigit i m::t) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] );;\n                             ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []   -> []\n| h::m::t -> (mulByDigit i (m::t)) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      (mulByDigit i (m :: t)) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| []::[]   -> []\n| h::m::t -> (mulByDigit i (m::t)) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | []::[] -> []\n  | h::m::t ->\n      (mulByDigit i (m :: t)) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": "Characters 109-110:\n  | h::m::t -> (mulByDigit i (m::t)) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] );;\n                                            ^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch (List.rev l) with\n| _::[]   -> []\n| h::m::t -> (mulByDigit i (m::t)) @ ( ( (h*i)/10 ) + (m*i) mod 10 :: ( (h*i) mod 10 ) :: [] )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | _::[] -> []\n  | h::m::t ->\n      (mulByDigit i (m :: t)) @\n        [((h * i) / 10) + ((m * i) mod 10); (h * i) mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = failwith \"to be implemented\" in\nlet base = failwith \"to be implemented\" in\nlet args = failwith \"to be implemented\" in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = failwith \"to be implemented\" in\n    let base = failwith \"to be implemented\" in\n    let args = failwith \"to be implemented\" in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "List.split (padZero [9;9] [1;0;0;2])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet _ = List.split (padZero [9; 9] [1; 0; 0; 2]);;\n", "out": "Characters 11-36:\n  List.split (padZero [9;9] [1;0;0;2]);;\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list * int list\n       but an expression was expected of type ('a * 'b) list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> (h1 + h2, a)\nin\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> ((h1 + h2), a) in\n    let base = [] in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 171-172:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a -> int * int -> int * 'a\n       but an expression was expected of type 'a -> int * int -> 'a\n       The type variable 'a occurs inside int * 'a\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> h1 + h2\nin\nlet base = [] in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> h1 + h2 in\n    let base = [] in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 168-172:\n  let (_, res) = List.fold_left f base args in\n                                  ^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> h1 + h2\nin\nlet base = 0 in\nlet args = List.combine l1 l2 in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> h1 + h2 in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 150-176:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> h1 + h2\nin\nlet base = 0 in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> h1 + h2 in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 152-178:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> (a, h1 + h2)\nin\nlet base = 0 in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> (a, (h1 + h2)) in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 172-173:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a -> int * int -> 'a * int\n       but an expression was expected of type 'a -> int * int -> 'a\n       The type variable 'a occurs inside 'a * int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> a\nin\nlet base = 0 in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (h1,h2) -> a in\n    let base = 0 in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 146-172:\n  let (_, res) = List.fold_left f base args in\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> match a with (v1,v2) -> (v1+h1+v2+h2)\nin\nlet base = (0,0) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (h1,h2) -> (match a with | (v1,v2) -> ((v1 + h1) + v2) + h2) in\n    let base = (0, 0) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 201-202:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type int * int -> int * int -> int\n       but an expression was expected of type\n         int * int -> int * int -> int * int\n       Type int is not compatible with type int * int \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> match a with (v1,v2) -> (v1+h1, v2+h2)\nin\nlet base = (0,0) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (h1,h2) -> (match a with | (v1,v2) -> ((v1 + h1), (v2 + h2))) in\n    let base = (0, 0) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 236-257:\n  removeZero (add (padZero l1 l2));;\n             ^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(h1,h2)-> match a with (v1,v2) -> [(v1+h1, v2+h2)]\nin\nlet base = (0,0) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (h1,h2) -> (match a with | (v1,v2) -> [((v1 + h1), (v2 + h2))]) in\n    let base = (0, 0) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 204-205:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type int * int -> int * int -> (int * int) list\n       but an expression was expected of type\n         int * int -> int * int -> int * int\n       Type (int * int) list is not compatible with type int * int \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) ->\nmatch x with\n(h1,h2)-> ( (h1+h2)/10 :: list1, (h1+h2) mod 10 :: list2 )\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) ->\n          (match x with\n           | (h1,h2) ->\n               ((((h1 + h2) / 10) :: list1), (((h1 + h2) mod 10) :: list2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) ->\nmatch x with\n(h1,h2)-> \nmatch list1 with\nl1h::l2t -> ( (h1+h2)/10 :: list1, (l1h + (h1+h2) mod 10) :: list2 )\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) ->\n          (match x with\n           | (h1,h2) ->\n               (match list1 with\n                | l1h::l2t ->\n                    ((((h1 + h2) / 10) :: list1), ((l1h + ((h1 + h2) mod 10))\n                      :: list2)))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) ->\nmatch x with\n(h1,h2)-> \nmatch list1 with\nl1h::l2t -> ( (h1+h2)/10 :: list1, (l1h + (h1+h2) mod 10) :: list2 )\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) ->\n          (match x with\n           | (h1,h2) ->\n               (match list1 with\n                | l1h::l2t ->\n                    ((((h1 + h2) / 10) :: list1), ((l1h + ((h1 + h2) mod 10))\n                      :: list2)))) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) -> (list1,list2)\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match a with | (list1,list2) -> (list1, list2) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) -> list1\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match a with | (list1,list2) -> list1 in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 181-182:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a * 'b -> 'c -> 'a\n       but an expression was expected of type 'a * 'b -> 'c -> 'a * 'b\n       The type variable 'a occurs inside 'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) -> (list1, list2)\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match a with | (list1,list2) -> (list1, list2) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) -> match list1 with\n[] -> ([], [])\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with | (list1,list2) -> (match list1 with | [] -> ([], [])) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n(list1, list2) -> match (list1, list2) with\n[] -> ([], [])\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) -> (match (list1, list2) with | [] -> ([], [])) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 109-111:\n  [] -> ([], [])\n  ^^\nError: This pattern matches values of type 'a list\n       but a pattern was expected which matches values of type 'b * 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> ([],[])\n| (list1, list2) -> (list1, list2)\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with | ([],[]) -> ([], []) | (list1,list2) -> (list1, list2) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> ([],[])\n| (list1, list2) -> ([1], [1])\nin\nlet base = ([0],[0]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with | ([],[]) -> ([], []) | (list1,list2) -> ([1], [1]) in\n    let base = ([0], [0]) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> ([],[])\n| (list1, list2) -> ([1], [1])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with | ([],[]) -> ([], []) | (list1,list2) -> ([1], [1]) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n(h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n| (list1, list2) -> (list1, list2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with\n           | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])\n           | (list1,list2) -> (list1, list2)) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 164-169:\n  | (list1, list2) -> (list1, list2)\n                       ^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n(h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n| (list1, list2) -> ([1], [1])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with\n           | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])\n           | (list1,list2) -> ([1], [1])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n| [] -> a\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n| (list1, list2) -> ([1], [1])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with\n           | [] -> a\n           | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])\n           | (list1,list2) -> ([1], [1])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 103-110:\n  | (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n    ^^^^^^^\nError: This pattern matches values of type 'a * 'b\n       but a pattern was expected which matches values of type 'c list\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n| [] -> ([], [])\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n| (list1, list2) -> ([1], [1])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with\n           | [] -> ([], [])\n           | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])\n           | (list1,list2) -> ([1], [1])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 110-117:\n  | (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n    ^^^^^^^\nError: This pattern matches values of type 'a * 'b\n       but a pattern was expected which matches values of type 'c list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n| ([],[]) -> a\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with\n           | ([],[]) -> a\n           | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 121-123:\n  | (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\n                 ^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (list1, list2) -> ([1], [1])\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) -> ([1], [1])\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (list1, list2) -> a\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) -> a\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (list1, list2) -> (list1, list2)\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (list1,list2) -> (list1, list2)\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (lh1::lt1, lh2::lt2) -> (lh1::lt1, lh2::lt2)\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (lh1::lt1,lh2::lt2) -> ((lh1 :: lt1), (lh2 :: lt2))\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (lh1::lt1, lh2::lt2) -> (lt1, lt2)\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (lh1::lt1,lh2::lt2) -> (lt1, lt2)\n      | ([],[]) ->\n          (match x with | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10])) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (lh1::lt1, lh2::lt2) -> match x with\n| (h1,h2) -> ((h1+h2+lh1)/10 :: lt1, (h1+h2+lh1) mod 10 :: lt2)\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (lh1::lt1,lh2::lt2) ->\n          (match x with\n           | (h1,h2) ->\n               (((((h1 + h2) + lh1) / 10) :: lt1),\n                 ((((h1 + h2) + lh1) mod 10) :: lt2))\n           | ([],[]) ->\n               (match x with\n                | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10]))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 119-121:\n  | (h1,h2) -> ((h1+h2+lh1)/10 :: lt1, (h1+h2+lh1) mod 10 :: lt2)\n                 ^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (lh1::lt1, lh2::lt2) -> match x with\n| (h1,h2) -> match h1 with\nx::y -> match h2 with \na::b -> ((x+a+lh1)/10 :: lt1, (x+a+lh1) mod 10 :: lt2)\n| ([],[]) -> match x with\n| (h1,h2) -> ((h1+h2)/10 :: [], (h1+h2) mod 10 :: [])\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (lh1::lt1,lh2::lt2) ->\n          (match x with\n           | (h1,h2) ->\n               (match h1 with\n                | x::y ->\n                    (match h2 with\n                     | a::b ->\n                         (((((x + a) + lh1) / 10) :: lt1),\n                           ((((x + a) + lh1) mod 10) :: lt2))\n                     | ([],[]) ->\n                         (match x with\n                          | (h1,h2) -> ([(h1 + h2) / 10], [(h1 + h2) mod 10]))))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 211-218:\n  | ([],[]) -> match x with\n    ^^^^^^^\nError: This pattern matches values of type 'a * 'b\n       but a pattern was expected which matches values of type 'c list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match a with\n| (lh1::lt1, lh2::lt2) -> match x with\n| (h1,h2) -> match h1 with\nx::y -> match h2 with \na::b -> ((x+a+lh1)/10 :: lt1, (x+a+lh1) mod 10 :: lt2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match a with\n      | (lh1::lt1,lh2::lt2) ->\n          (match x with\n           | (h1,h2) ->\n               (match h1 with\n                | x::y ->\n                    (match h2 with\n                     | a::b ->\n                         (((((x + a) + lh1) / 10) :: lt1),\n                           ((((x + a) + lh1) mod 10) :: lt2))))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 338-353:\n  removeZero (add (padZero l1 l2));;\n                  ^^^^^^^^^^^^^^^\nError: This expression has type int list * int list\n       but an expression was expected of type int list list * int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> (v1::a, v2::a)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (v1,v2) -> ((v1 :: a), (v2 :: a)) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 181-182:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a list -> 'a * 'a -> 'a list * 'a list\n       but an expression was expected of type 'a list -> 'a * 'a -> 'a list\n       Type 'a list * 'a list is not compatible with type 'a list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> ( ( v1::a), (v2::a) )\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x = match x with | (v1,v2) -> ((v1 :: a), (v2 :: a)) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 188-189:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a list -> 'a * 'a -> 'a list * 'a list\n       but an expression was expected of type 'a list -> 'a * 'a -> 'a list\n       Type 'a list * 'a list is not compatible with type 'a list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(h1::t1, h2::t2) -> (v1 :: h1::t1, v2::h2::t2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (h1::t1,h2::t2) -> ((v1 :: h1 :: t1), (v2 :: h2 :: t2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n([], []) -> (v1 :: a, v2::a)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) -> (match a with | ([],[]) -> ((v1 :: a), (v2 :: a))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 108-109:\n  ([], []) -> (v1 :: a, v2::a)\n                     ^\nError: This expression has type 'a list * 'b list\n       but an expression was expected of type 'c list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> (v1 :: list1, v2::list2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with | (list1,list2) -> ((v1 :: list1), (v2 :: list2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> (List.append list1 v1, List.append list2 v2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               ((List.append list1 v1), (List.append list2 v2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 281-296:\n  removeZero (add (padZero l1 l2));;\n                  ^^^^^^^^^^^^^^^\nError: This expression has type int list * int list\n       but an expression was expected of type 'a list list * 'b list list\n       Type int is not compatible with type 'a list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> ( (List.append list1 v1), (List.append list2 v2) )\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               ((List.append list1 v1), (List.append list2 v2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 287-302:\n  removeZero (add (padZero l1 l2));;\n                  ^^^^^^^^^^^^^^^\nError: This expression has type int list * int list\n       but an expression was expected of type 'a list list * 'b list list\n       Type int is not compatible with type 'a list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> ( list1@v1, list2@v2 )\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with | (list1,list2) -> ((list1 @ v1), (list2 @ v2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 259-274:\n  removeZero (add (padZero l1 l2));;\n                  ^^^^^^^^^^^^^^^\nError: This expression has type int list * int list\n       but an expression was expected of type 'a list list * 'b list list\n       Type int is not compatible with type 'a list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> ( v1::list1, v2::list2)\nin\nlet base = ([],[]) in\nlet args = (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with | (list1,list2) -> ((v1 :: list1), (v2 :: list2))) in\n    let base = ([], []) in\n    let args = List.combine l1 l2 in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> (list1, v2 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.rev (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) -> (match a with | (list1,list2) -> (list1, (v2 :: list2))) in\n    let base = ([], []) in\n    let args = List.rev (List.combine l1 l2) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> (list1, (v1+v2) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.rev (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) -> (list1, (((v1 + v2) mod 10) :: list2))) in\n    let base = ([], []) in\n    let args = List.rev (List.combine l1 l2) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.rev (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.rev (List.combine l1 l2) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.rev (List.combine l1 l2) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.rev (List.combine l1 l2) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.rev (List.combine l1 l2) :: (0,0) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = (List.rev (List.combine l1 l2)) :: (0, 0) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 307-312:\n  let args = List.rev (List.combine l1 l2) :: (0,0) in\n                                              ^^^^^\nError: This expression has type 'a * 'b\n       but an expression was expected of type ('c * 'd) list list\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.append (List.rev (List.combine l1 l2)  (0,0) ) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2) (0, 0)) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 287-295:\n  let args = List.append (List.rev (List.combine l1 l2)  (0,0) ) in\n                          ^^^^^^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.append (List.rev (List.combine l1 l2))  (0,0) in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) (0, 0) in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": "Characters 319-324:\n  let args = List.append (List.rev (List.combine l1 l2))  (0,0) in\n                                                          ^^^^^\nError: This expression has type 'a * 'b\n       but an expression was expected of type ('c * 'd) list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigAdd l1 l2 = \nlet add (l1, l2) = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1+v2)/10::list1, (v1+v2) mod 10::list2 )\n| (h::t) -> ((v1+v2+h)/10::list1, (v1+v2+h) mod 10 :: list2)\nin\nlet base = ([],[]) in\nlet args = List.append (List.rev (List.combine l1 l2))  [(0,0)] in\nlet (_, res) = List.fold_left f base args in\nres\nin \nremoveZero (add (padZero l1 l2))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1*v2)/10::list1, (v1*v2) mod 10::list2 )\n| (h::t) -> (((v1*v2)+h)/10::list1, ((v1*v2)+h) mod 10 :: list2) in\nlet base = ([], []) in\nlet args = List.append (List.rev (List.combine l1 l2))  [(0,0)] in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (v1,v2) ->\n        (match a with\n         | (list1,list2) ->\n             (match list1 with\n              | [] ->\n                  ((((v1 * v2) / 10) :: list1), (((v1 * v2) mod 10) ::\n                    list2))\n              | h::t ->\n                  (((((v1 * v2) + h) / 10) :: list1),\n                    ((((v1 * v2) + h) mod 10) :: list2)))) in\n  let base = ([], []) in\n  let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(v1,v2) -> match a with\n(list1, list2) -> match list1 with\n| [] -> ( (v1*v2)/10::list1, (v1*v2) mod 10::list2 )\n| (h::t) -> (((v1*v2)+h)/10::list1, ((v1*v2)+h) mod 10 :: list2) in\nlet base = ([], []) in\nlet args = List.append (List.rev (List.combine l1 l2))  [(0,0)] in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (v1,v2) ->\n        (match a with\n         | (list1,list2) ->\n             (match list1 with\n              | [] ->\n                  ((((v1 * v2) / 10) :: list1), (((v1 * v2) mod 10) ::\n                    list2))\n              | h::t ->\n                  (((((v1 * v2) + h) / 10) :: list1),\n                    ((((v1 * v2) + h) mod 10) :: list2)))) in\n  let base = ([], []) in\n  let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> h", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> 0 | h::t -> h;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> h*i", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> 0 | h::t -> h * i;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> h*i :: []", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> [] | h::t -> [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> mulByDigit i (List.rev l) ::  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [mulByDigit i (List.rev l); h * i];;\n", "out": "Characters 72-97:\n  | h::t -> mulByDigit i (List.rev l) ::  h*i :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> mulByDigit i (List.rev l) @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> (mulByDigit i (List.rev l)) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> mulByDigit i (List.rev t) @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> (mulByDigit i (List.rev t)) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) ) :: 0 @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) :: 0) @ [h * i];;\n", "out": "Characters 104-105:\n  | h::t -> (mulByDigit i (List.rev t) ) :: 0 @  h*i :: [];;\n                                            ^\nError: This expression has type int but an expression was expected of type\n         'a list list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) ) :: 0 @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) :: 0) @ [h * i];;\n", "out": "Characters 104-105:\n  | h::t -> (mulByDigit i (List.rev t) ) :: 0 @  h*i :: [];;\n                                            ^\nError: This expression has type int but an expression was expected of type\n         'a list list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) :: 0 ) @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) :: 0) @ [h * i];;\n", "out": "Characters 102-103:\n  | h::t -> (mulByDigit i (List.rev t) :: 0 ) @  h*i :: [];;\n                                          ^\nError: This expression has type int but an expression was expected of type\n         'a list list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) @ 0)  @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) @ 0) @ [h * i];;\n", "out": "Characters 101-102:\n  | h::t -> (mulByDigit i (List.rev t) @ 0)  @  h*i :: [];;\n                                         ^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) @ [0])  @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) @ [0]) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) *10)  @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) @ [h * i];;\n", "out": "Characters 73-98:\n  | h::t -> (mulByDigit i (List.rev t) *10)  @  h*i :: [];;\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> mulByDigit i (List.rev t)  @  h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> (mulByDigit i (List.rev t)) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev t) * 10 )  h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> (((mulByDigit i (List.rev t)) * 10) h) * i;;\n", "out": "Characters 73-98:\n  | h::t -> (mulByDigit i (List.rev t) * 10 )  h*i;;\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> (mulByDigit i (List.rev t) * 10 )  h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> (((mulByDigit i (List.rev t)) * 10) h) * i;;\n", "out": "Characters 71-104:\n  | h::t -> (mulByDigit i (List.rev t) * 10 )  h*i;;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> (mulByDigit i (List.rev t) * 10 ) + h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev (List.map (fun x -> x*10 :: []) t) ) ) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (mulByDigit i (List.rev (List.map (fun x  -> [x * 10]) t))) @ [h * i];;\n", "out": "Characters 86-132:\n  | h::t -> (mulByDigit i (List.rev (List.map (fun x -> x*10 :: []) t) ) ) @ h*i :: [];;\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list list\n       but an expression was expected of type int list\n       Type int list is not compatible with type int \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> (mulByDigit i (List.rev t) * 10 ) + h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper lst = match lst with\n| [] -> []\n| h1::t1 -> helper t1 :: h1 mod 10 :: []\nin helper [h]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper lst =\n             match lst with | [] -> [] | h1::t1 -> [helper t1; h1 mod 10] in\n           helper [h]);;\n", "out": "Characters 233-242:\n  | h1::t1 -> helper t1 :: h1 mod 10 :: []\n              ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper lst = match lst with\n| [] -> []\n| h1::t1 -> helper t1 @ h1 mod 10 :: []\nin helper [h]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper lst =\n             match lst with | [] -> [] | h1::t1 -> (helper t1) @ [h1 mod 10] in\n           helper [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper v = (helper v/10) @ h1 mod 10 :: []\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper v = ((helper v) / 10) @ [h1 mod 10] in helper h);;\n", "out": "Characters 193-206:\n  | h::t -> let rec helper v = (helper v/10) @ h1 mod 10 :: []\n                               ^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper v = (helper v/10) :: h1 mod 10 :: []\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> let rec helper v = [(helper v) / 10; h1 mod 10] in helper h);;\n", "out": "Characters 194-202:\n  | h::t -> let rec helper v = (helper v/10) :: h1 mod 10 :: []\n                                ^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper v = helper (v/10) :: h1 mod 10 :: []\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> let rec helper v = [helper (v / 10); h1 mod 10] in helper h);;\n", "out": "Characters 193-206:\n  | h::t -> let rec helper v = helper (v/10) :: h1 mod 10 :: []\n                               ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper v = helper (v/10) @ h1 mod 10 :: []\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper v = (helper (v / 10)) @ [h1 mod 10] in helper h);;\n", "out": "Characters 209-211:\n  | h::t -> let rec helper v = helper (v/10) @ h1 mod 10 :: []\n                                               ^^\nError: Unbound value h1\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper v = helper (v/10) @ v mod 10 :: []\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper v = (helper (v / 10)) @ [v mod 10] in helper h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper acc v = if v = 0 then acc else helper (v mod 10 :: acc) (v/10)\nin helper h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper h);;\n", "out": "Characters 262-263:\n  in helper h;;\n            ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> let rec helper acc v = if v = 0 then acc else helper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> h);;\n", "out": "Characters 174-175:\n  | h::t -> h;;\n            ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> 0\n| h::t -> h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> 0\n       | h::t -> h);;\n", "out": "Characters 161-162:\n  | [] -> 0\n          ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h::t -> [h]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if v = 0 then acc else helper (v mod 10 :: acc) (v/10)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = v mod 10 :: acc\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 -> let rec helper acc v = (v mod 10) :: acc in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = \nif v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = v = 0\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 -> let rec helper acc v = v = 0 in helper [] h1);;\n", "out": "Characters 209-221:\n  in helper [] h1;;\n     ^^^^^^^^^^^^\nError: This expression has type bool but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if v = 0 then [1] else [0] \n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v = 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = [v]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 -> let rec helper acc v = [v] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if v = 0 then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v = 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if v != 0 then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v != 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if v > 0 then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v > 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if (v < 0) then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v < 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if (v = 0) then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v = 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = if (v > 0) then [1] else [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 ->\n           let rec helper acc v = if v > 0 then [1] else [0] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = [v]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 -> let rec helper acc v = [v] in helper [] h1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> false\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n| [] -> []\n| h1::t1 -> let rec helper acc v = [v] = [0]\n(* if v = 0 \nthen \nacc \nelse \nhelper ( (v mod 10) :: acc) (v/10) *)\nin helper [] h1", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> false\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h1::t1 -> let rec helper acc v = [v] = [0] in helper [] h1);;\n", "out": "Characters 81-137:\n  | h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t) ) ) @ h*i :: [] with \n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type bool but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin (mulByDigit i (List.rev t) * 10 ) + h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n      ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin helper (mulByDigit i (List.rev t) * 10 ) + h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n      (helper ((mulByDigit i (List.rev t)) * 10)) + (h * i);;\n", "out": "Characters 170-203:\n  in helper (mulByDigit i (List.rev t) * 10 ) + h*i;;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> match (mulByDigit i (List.rev t) * 10 ) + h*i with\n| n -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin helper [] n", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t ->\n      (match ((mulByDigit i (List.rev t)) * 10) + (h * i) with\n       | n ->\n           let rec helper acc v =\n             if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] n);;\n", "out": "Characters 221-232:\n  in helper [] n;;\n     ^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match (mulByDigit i (List.rev t) * 10 ) + h*i with\n| n -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin helper [] n", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match ((mulByDigit i (List.rev t)) * 10) + (h * i) with\n       | n ->\n           let rec helper acc v =\n             if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] n);;\n", "out": "Characters 79-104:\n  | h::t -> match (mulByDigit i (List.rev t) * 10 ) + h*i with\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match [(mulByDigit i (List.rev t) * 10 ) + h*i] with\n| x::y -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin helper [] x", "min": "\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match [((mulByDigit i (List.rev t)) * 10) + (h * i)] with\n       | x::y ->\n           let rec helper acc v =\n             if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] x);;\n", "out": "Characters 80-105:\n  | h::t -> match [(mulByDigit i (List.rev t) * 10 ) + h*i] with\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match ((mulByDigit i (List.rev t) * 10 ) + h*i) :: [] with\n| x::y -> let rec helper acc v = \nif v = 0 \nthen \n0 :: acc\nelse \nhelper ((v mod 10) :: acc) (v/10)\nin helper [] x", "min": "\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match [((mulByDigit i (List.rev t)) * 10) + (h * i)] with\n       | x::y ->\n           let rec helper acc v =\n             if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] x);;\n", "out": "Characters 80-105:\n  | h::t -> match ((mulByDigit i (List.rev t) * 10 ) + h*i) :: [] with\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i ) :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [((mulByDigit i (List.rev t)) * 10) + (h * i)];;\n", "out": "Characters 75-100:\n  | h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i ) :: [];;\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": "Characters 75-100:\n  | h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i );;\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": "Characters 75-100:\n  | h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i );;\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper (v mod 10)::acc (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else (helper (v mod 10)) :: (acc (v / 10)) in\n      helper [] h;;\n", "out": "Characters 112-122:\n  helper (v mod 10)::acc (v/10)\n         ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper [] h;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin helper [] (h*i)", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper [] (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin helper [] (h*i) :: []", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin mulByDigit i t @ (helper [] (h*i) :: [])", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i t) @ [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin match ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n[] -> []\n| h::t -> h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | h::t -> h);;\n", "out": "Characters 256-257:\n  | h::t -> h;;\n            ^\nError: This expression has type int list\n       but an expression was expected of type int list list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin match ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n[] -> []\n| h::t -> [h]", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | h::t -> [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin let rec adder x = match x with\n[] -> []\n| h::t -> bigAdd h (adder t)\nin \nadder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (adder (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))) @\n        [helper [] (h * i)];;\n", "out": "Characters 282-297:\n  adder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []);;\n                                                                   ^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10)\nin let rec adder x = match x with\n[] -> []\n| h::t -> bigAdd h (adder t)\nin \nadder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (adder (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))) @\n        ((helper [] (h * i)) @ []);;\n", "out": "Characters 217-303:\n  adder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ []);;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ [])", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        ((helper [] (h * i)) @ []);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match l with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> []\n| h::t -> bigAdd h (adder t)\nin \nadder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (adder (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))) @\n        [helper [] (h * i)];;\n", "out": "Characters 293-308:\n  adder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []);;\n                                                                   ^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> []\n| h::t -> bigAdd h (adder t)\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 228-319:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> int list []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> int list []\n| h::t -> bigAdd h (adder t)\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> int list []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x =\n        match x with | [] -> int list [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 55-58:\n  [] -> int list []\n        ^^^\nError: Unbound value int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> []\n| h::t -> bigAdd h (adder t)\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 228-319:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> []\n| h::t -> h\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> h in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 213-304:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n[] -> []\n| h::t -> [h]\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> [h] in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> [bigAdd h (adder t)]\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x =\n        match x with | [] -> [] | h::t -> [bigAdd h (adder t)] in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 210-228:\n  | h::t -> [bigAdd h (adder t)]\n             ^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 236-327:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> [( bigAdd h (adder t) )]\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x =\n        match x with | [] -> [] | h::t -> [bigAdd h (adder t)] in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 210-232:\n  | h::t -> [( bigAdd h (adder t) )]\n             ^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 236-327:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n[adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      [adder\n         ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n            [helper [] (h * i)])];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nmatch [adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )] with\nh::t -> h", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (match [adder\n                ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n                   [helper [] (h * i)])]\n       with\n       | h::t -> h);;\n", "out": "Characters 349-350:\n  h::t -> h;;\n          ^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n[adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      [adder\n         ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n            [helper [] (h * i)])];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> [0]\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> [0]\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> [0]\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [0] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 305-320:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n                                                                     ^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> [0]\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> [0]\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> [0]\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [0] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           ((helper [] (h * i)) @ []));;\n", "out": "Characters 244-328:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ []) );;\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 236-327:\n  adder ( ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) @ [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        ((helper [] (h * i)) @ []);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) ) :: []", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nadder (( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) ) :: [])", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      adder\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n           [helper [] (h * i)]);;\n", "out": "Characters 236-326:\n  adder (( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) ) :: []);;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \nadder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (adder (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))) @\n        (helper [] (h * i));;\n", "out": "Characters 236-318:\n  adder ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) );;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "\nif h = 0\nthen removeZero t", "min": "\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet _ = if h = 0 then removeZero t;;\n", "out": "Characters 4-5:\n  if h = 0\n     ^\nError: Unbound value h\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nlet rec adder x = match x with\n| [] -> []\n| h::t -> ( bigAdd h (adder t) )\nin \n( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) )", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x(a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = f(x(a)) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet f a b a = a * b;;\n\nlet pipe fs =\n  let f a x = f (x a) in let base x = x in List.fold_left f base fs;;\n", "out": "Characters 82-86:\n  List.fold_left f base fs;;\n                   ^^^^\nError: This expression has type int -> int\n       but an expression was expected of type int -> int -> int\n       Type int is not compatible with type int -> int \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = fun a x -> (x(a)) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs =\n  let f a x a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": "Characters 92-96:\n  List.fold_left f base fs;;\n                   ^^^^\nError: This expression has type 'a -> 'a\n       but an expression was expected of type 'a -> ('a -> 'b) -> 'b\n       The type variable 'a occurs inside ('a -> 'b) -> 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = (x(a)) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let pipe fs = \nlet f a x = x a in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x = x a in let base x = x in List.fold_left f base fs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let pipe fs = \nlet f a x = (fun x -> x a) in\nlet base = (fun x -> x) in\nList.fold_left f base fs", "min": "\nlet pipe fs = let f a x x = x a in let base x = x in List.fold_left f base fs;;\n", "out": "Characters 87-88:\n  List.fold_left f base fs;;\n                 ^\nError: This expression has type 'a -> 'b -> ('a -> 'c) -> 'c\n       but an expression was expected of type 'a -> 'b -> 'a\n       The type variable 'a occurs inside ('a -> 'c) -> 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) in\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n[] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (h::t)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           adder (h :: t));;\n", "out": "Characters 355-356:\n  adder (h::t);;\n         ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: [])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [helper [] (h * i)];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> x", "min": "\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y -> x);;\n", "out": "Characters 272-273:\n  | x::y -> x;;\n            ^\nError: This expression has type int list\n       but an expression was expected of type int list list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (h::t)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           adder (h :: t));;\n", "out": "Characters 358-359:\n  adder (h::t);;\n         ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (x::y)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           adder (x :: y));;\n", "out": "Characters 351-363:\n  adder (x::y);;\n  ^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \n[adder (x::y)]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           [adder (x :: y)]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) + h*i", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> (List.rev (List.map (fun x  -> x * 10) t)) + (h * i);;\n", "out": "Characters 71-113:\n  | h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) + h*i;;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) @ h*i  :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> (List.rev (List.map (fun x  -> x * 10) t)) @ [h * i];;\n", "out": "Characters 71-126:\n  | h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) @ h*i  :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) @ (h*i  :: [])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> (List.rev (List.map (fun x  -> x * 10) t)) @ [h * i];;\n", "out": "Characters 71-128:\n  | h::t -> ((List.rev (List.map (fun x->x*10) t ) ) ) @ (h*i  :: []);;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) :: h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> [mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)); h * i];;\n", "out": "Characters 71-139:\n  | h::t -> ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) :: h*i :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) :: h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t -> [mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)); h * i];;\n", "out": "Characters 72-127:\n  | h::t -> ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) :: h*i :: [];;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> sqsum (( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ h*i :: [])", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      sqsum\n        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i]);;\n", "out": "Characters 72-147:\n  | h::t -> sqsum (( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ h*i :: []);;\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> [sqsum (( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ h*i :: [])]", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      [sqsum\n         ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i])];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> 0\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i )", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> 0\n  | h::t -> ((mulByDigit i (List.rev t)) * 10) + (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| []   -> []\n| h::t -> match ( (mulByDigit i (List.rev t) * 10 ) + h*i ) with\n| n -> [n]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match ((mulByDigit i (List.rev t)) * 10) + (h * i) with | n -> [n]);;\n", "out": "Characters 81-106:\n  | h::t -> match ( (mulByDigit i (List.rev t) * 10 ) + h*i ) with\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "sqsum [81000;8100;810;81]", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n\nlet _ = sqsum [81000; 8100; 810; 81];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sepConcat sep sl = match sl with \n| [] -> \"\"\n| h :: t -> \nlet f a x = a ^ sep ^ x in\nlet base = h in\nlet l = t in\nList.fold_left f base l", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i)) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (x::y)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               (helper [] (h * i))\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           adder (x :: y));;\n", "out": "Characters 352-353:\n  adder (x::y);;\n         ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \nhelper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \n[1]\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else [1] in helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \nhelper ( (v mod 10) :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> h);;\n", "out": "Characters 153-154:\n  | h::t -> h;;\n            ^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> h :: []", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \nv mod 10\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else v mod 10 in\n           helper [] h);;\n", "out": "Characters 221-223:\n  in helper [] h;;\n            ^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \nv mod 10 :: []\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else [v mod 10] in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \nv mod 10 :: [0]\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else [v mod 10; 0] in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \n[1]\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else [1] in helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \n(v mod 10) :: acc\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else (v mod 10) :: acc in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "List.map (fun x -> x*10 ) [1;2;3]\n\n(* match (List.rev l) with\n| []   -> 0\n| h::t -> ( (mulByDigit i (List.rev t) * 10 ) + h*i ) *)\n\n(* let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (x::y)\n*)\n\n8100 mod 10", "min": "\nlet _ = (List.map (fun x  -> x * 10) [1; 2; 3] 8100) mod 10;;\n", "out": "Characters 0-8:\n  List.map (fun x -> x*10 ) [1;2;3]\n  ^^^^^^^^\nError: This function has type ('a -> 'b) -> 'a list -> 'b list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \n(v mod 10) :: acc\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else (v mod 10) :: acc in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \nacc\nelse \n(0) :: acc\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then acc else 0 :: acc in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> match mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []\nwith \n[] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen \n[1]\nelse \n(0) :: acc\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v = if v = 0 then [1] else 0 :: acc in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let rec mulByDigit i l = \nmatch l with\n[] -> []\n| h::t -> \nlet rec helper acc v = \nmatch v with\n[] -> []\n| h::t -> if h = 0\nthen \nacc\nelse \n(0) :: acc\nin helper [] mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        match v with | [] -> [] | h::t -> if h = 0 then acc else 0 :: acc in\n      (helper [] mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n        [h * i];;\n", "out": "Characters 154-160:\n  in helper [] mulByDigit i (List.rev (List.map (fun x->x*10) t )) @ h*i :: [];;\n     ^^^^^^\nError: This function has type int list -> int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse \nhelper ( (v mod 10) :: acc ) (v/10) \nin\nmatch ( mulByDigit i (List.rev (List.map (fun x->x*10) t )) ) @ (helper [] (h*i) :: []) with\n| [] -> []\n| x::y -> let rec adder w = match w with\n| [] -> []\n| a::b -> ( bigAdd a (adder b) )\nin \nadder (x::y)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet x a = a;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [helper [] (h * i)]\n       with\n       | [] -> []\n       | x::y ->\n           let rec adder w =\n             match w with | [] -> [] | a::b -> bigAdd a (adder b) in\n           adder (x :: y));;\n", "out": "Characters 351-363:\n  adder (x::y);;\n  ^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int list list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch l with\n| [] -> []", "min": "\nlet rec mulByDigit i l = match l with | [] -> [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch l with\n| [] -> []\n| h::t -> [h]", "min": "\nlet rec mulByDigit i l = match l with | [] -> [] | h::t -> [h];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> h::t", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> [] | h::t -> h :: t;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> h*i :: []", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> [] | h::t -> [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @ [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> h :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> if v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec helper acc v = if v = 0 then acc else helper [v mod 10] (v / 10);;\n\nlet _ =\n  let rec mulByDigit i l =\n    match List.rev l with\n    | [] -> []\n    | h::t ->\n        (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n                 [h * i]\n         with\n         | [] -> []\n         | h::t -> if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10)) in\n  helper [] h;;\n", "out": "Characters 172-173:\n  | h::t -> if v = 0\n               ^\nError: Unbound value v\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t ->  h :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t ->  let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper []);;\n", "out": "Characters 252-261:\n  in helper [];;\n     ^^^^^^^^^\nError: This expression has type int -> int list\n       but an expression was expected of type int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t ->  let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin (helper [] h)", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> (helper [] h)", "min": "\nlet rec helper acc v = if v = 0 then acc else helper [v mod 10] (v / 10);;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> (helper [] 9000)", "min": "\nlet rec helper acc v = if v = 0 then acc else helper [v mod 10] (v / 10);;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> helper [] 9000);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> (helper [] 9000)", "min": "\nlet rec helper acc v =\n  if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10);;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t -> helper [] 9000);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] 9000", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] 9000);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] h);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nList.fold_left f base lst", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in let base = 0 in List.fold_left f base lst);;\n", "out": "Characters 229-232:\n  List.fold_left f base lst;;\n                        ^^^\nError: Unbound value lst\nHint: Did you mean fst, lsl or lsr?\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nList.fold_left f base (h::t)", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in List.fold_left f base (h :: t));;\n", "out": "Characters 207-235:\n  List.fold_left f base (h::t);;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\n[List.fold_left f base (h::t)]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in [List.fold_left f base (h :: t)]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> a :: []", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b -> [a]));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n(v mod 10 :: acc)\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0 then acc else (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v mod 10) mod 10 ) :: (v mod 10 :: acc)\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v mod 10) mod 10) :: (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10 ) :: (v mod 10 :: acc)\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10 ) :: (v mod 10 :: acc) :: acc\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: ((v mod 10) :: acc) :: acc in\n                helper [] a));;\n", "out": "Characters 338-355:\n  ( (v/10) mod 10 ) :: (v mod 10 :: acc) :: acc\n                       ^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10 ) :: (v mod 10) :: acc\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10 ) :: (v mod 10) :: acc\nin helper [] 11106", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: (v mod 10) :: acc in\n                helper [] 11106));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10 ) :: (v mod 10) :: acc\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nlet rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10) :: acc (v/10)\nin helper [] ([List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let f a x = a + x in\n      let base = 0 in\n      let rec helper acc v =\n        if v = 0 then acc else (helper (v mod 10)) :: (acc (v / 10)) in\n      helper []\n        [List.fold_left f base\n           ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n              [h * i])];;\n", "out": "Characters 162-172:\n  helper (v mod 10) :: acc (v/10)\n         ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nlet rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] ([List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let f a x = a + x in\n      let base = 0 in\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper []\n        [List.fold_left f base\n           ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n              [h * i])];;\n", "out": "Characters 200-294:\n  in helper [] ([List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])]);;\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nlet rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] (List.hd [List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])])", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let f a x = a + x in\n      let base = 0 in\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper []\n        (List.hd\n           [List.fold_left f base\n              ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n                 [h * i])]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> [a]", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b -> [a]));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n(v mod 10) :: acc\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0 then acc else (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n( (v/10) mod 10) :: (v mod 10) :: acc\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0\n                  then acc\n                  else ((v / 10) mod 10) :: (v mod 10) :: acc in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| a::b -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n(v mod 10) :: ( (v/10) mod 10) :: []\nin helper [] a", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | a::b ->\n                let rec helper acc v =\n                  if v = 0 then acc else [v mod 10; (v / 10) mod 10] in\n                helper [] a));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| c::d -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\n(c mod 10) :: ( (c/10) mod 10) :: []\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | c::d ->\n                let rec helper acc v =\n                  if v = 0 then acc else [c mod 10; (c / 10) mod 10] in\n                helper [] c));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| c::d -> let rec helper acc v = \nc :: []\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | c::d -> let rec helper acc v = [c] in helper [] c));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| c::d -> let rec helper acc v = \nv:: []\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | c::d -> let rec helper acc v = [v] in helper [] c));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| c::d -> let rec helper acc v = \nv mod 10 :: []\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | c::d -> let rec helper acc v = [v mod 10] in helper [] c));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> match (mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [] with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 in\nmatch [List.fold_left f base (h::t)] with\n| [] -> []\n| c::d -> let rec helper acc v = \n(v/10) :: v mod 10 :: v :: []\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n               [h * i]\n       with\n       | [] -> []\n       | h::t ->\n           let f a x = a + x in\n           let base = 0 in\n           (match [List.fold_left f base (h :: t)] with\n            | [] -> []\n            | c::d ->\n                let rec helper acc v = [v / 10; v mod 10; v] in helper [] c));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> \nmatch [List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])] with\n[] -> [] \n| c::d -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] c", "min": "\nlet f a b a = a * b;;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      (match [List.fold_left f base\n                ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n                   [h * i])]\n       with\n       | [] -> []\n       | c::d ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] c);;\n", "out": "Characters 95-99:\n  match [List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])] with\n                          ^^^^\nError: Unbound value base\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l =\nmatch (List.rev l) with\n| [] -> []\n| h::t -> \nlet f a x = a + x in\nlet base = 0 \nin match [List.fold_left f base ((mulByDigit i (List.rev (List.map (fun x -> x*10) t))) @ h*i :: [])] with\n[] -> [] \n| c::d -> let rec helper acc v = \nif v = 0\nthen\nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] c", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let f a x = a + x in\n      let base = 0 in\n      (match [List.fold_left f base\n                ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @\n                   [h * i])]\n       with\n       | [] -> []\n       | c::d ->\n           let rec helper acc v =\n             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n           helper [] c);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] h", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper [] h;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] (h*i)", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper [] (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) helper [] (h*i)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) helper\n        [] (h * i);;\n", "out": "Characters 154-160:\n  in bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) helper [] (h*i);;\n     ^^^^^^\nError: This function has type int list -> int list -> int list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) ))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)));;\n", "out": "Characters 154-217:\n  in bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) ));;\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list -> int list\n       but an expression was expected of type int list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (c, bigAdd d (mulByDigit k v)) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> (c, (bigAdd d (mulByDigit k v)))) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (c, bigAdd d (mulByDigit k v)) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> (c, (bigAdd d (mulByDigit k v)))) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = x in\nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = x in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 261-265:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type ('b list * int list) list\n       Type int is not compatible with type 'b list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = (a, x) in\nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = (a, x) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 259-260:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a -> 'b -> 'a * 'b\n       but an expression was expected of type 'a -> 'b -> 'a\n       The type variable 'a occurs inside 'a * 'b\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = (a::[], x::[]) in\nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = ([a], [x]) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 267-268:\n  let (_, res) = List.fold_left f base args in\n                                ^\nError: This expression has type 'a -> 'b -> 'a list * 'b list\n       but an expression was expected of type 'a -> 'b -> 'a\n       The type variable 'a occurs inside 'a list * 'b list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (c, bigAdd d (mulByDigit k v)) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> (c, (bigAdd d (mulByDigit k v)))) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> (k,v) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = match x with | (k,v) -> (k, v) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 288-292:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type ('b list * int list) list\n       Type int is not compatible with type 'b list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "bigAdd [0] [9;9;9;9;9]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet _ = bigAdd [0] [9; 9; 9; 9; 9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "bigAdd (bigAdd [0] [9;9;9;9;9]) [1]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet _ = bigAdd (bigAdd [0] [9; 9; 9; 9; 9]) [1];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = ([0], [x]) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = ([0], [x]) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 271-275:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type int list\n       Type int * 'a is not compatible with type int \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = x in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = x in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 262-266:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type ('b list * int list) list\n       Type int is not compatible with type 'b list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> ([k],v) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = match x with | (k,v) -> ([k], v) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> (v,[k]) in \nlet base = ([], [0]) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x = match x with | (k,v) -> (v, [k]) in\n  let base = ([], [0]) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, k :: d) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, k :: d) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (s, res) = List.fold_left f base args in\n(s,res)", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (s,res) = List.fold_left f base args in (s, res);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, k :: d) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, (bigMul k v) :: d) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((v :: c), ((bigMul k v) :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 331-335:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type (int list * 'b) list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, (bigMul k v)) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((v :: c), (bigMul k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 326-330:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type (int list * 'b) list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, k :: d) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, (bigMul k v) ) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> ((v :: c), (k :: d))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((v :: c), (bigMul k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": "Characters 327-331:\n  let (_, res) = List.fold_left f base args in\n                                       ^^^^\nError: This expression has type (int * 'a) list\n       but an expression was expected of type (int list * 'b) list\n       Type int is not compatible with type int list \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, (mulByDigit k v) ) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((v :: c), (mulByDigit k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (v :: c, (mulByDigit k v) ) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (r, res) = List.fold_left f base args in\n(r, res)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((v :: c), (mulByDigit k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (r,res) = List.fold_left f base args in (r, res);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (d, (mulByDigit k v) ) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (r, res) = List.fold_left f base args in\n(r, res)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with | (k,v) -> (match a with | (c,d) -> (d, (mulByDigit k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (r,res) = List.fold_left f base args in (r, res);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match x with\n(k,v) -> match a with\n(c,d) -> (d :: c, (mulByDigit k v) ) in \nlet base = ([], []) in\nlet args = let rec helper acc l1 l2 = \nmatch l1 with \n| [] -> acc\n| h::t -> helper ((h, l2) :: acc) (List.map (fun x->x*10) t) l2\nin helper [] (List.rev l1) l2\nin\nlet (r, res) = List.fold_left f base args in\n(r, res)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match x with\n    | (k,v) -> (match a with | (c,d) -> ((d :: c), (mulByDigit k v))) in\n  let base = ([], []) in\n  let args =\n    let rec helper acc l1 l2 =\n      match l1 with\n      | [] -> acc\n      | h::t -> helper ((h, l2) :: acc) (List.map (fun x  -> x * 10) t) l2 in\n    helper [] (List.rev l1) l2 in\n  let (r,res) = List.fold_left f base args in (r, res);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "mulByDigit 90000 [9;9;9;9;9;]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet _ = mulByDigit 90000 [9; 9; 9; 9; 9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\nh::t -> h", "min": "\nlet rec mulByDigit i l = match List.rev l with | h::t -> h;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> h*i :: []", "min": "\nlet rec mulByDigit i l = match List.rev l with | [] -> [] | h::t -> [h * i];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin helper [] (h*i)", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      helper [] (h * i);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::m::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (helper [] (m*i)) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] (m * i)) (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::m::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (helper [] ((m*10)*i)) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let somef i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet somef i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let somef i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (somef i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet somef i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet somef i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (somef i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::m::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (helper [] ((m*10)*i)) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::m::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (helper [] ((m*10)*i)) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let mulBuDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet mulBuDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "mulByDigit 90000 [9]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet _ = mulByDigit 90000 [9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let mulBuDigit i l = match (List.rev l) with\n| [] -> [0]\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet mulBuDigit i l =\n  match List.rev l with\n  | [] -> [0]\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "bigAdd [] [100]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet _ = bigAdd [] [100];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let mulBuDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet mulBuDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let mulBuDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet mulBuDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let mulBuDigit i l = match (List.rev l) with\n| [] -> []\n| h::t ->\nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet mulBuDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "mulByDigit 90000 [9;9;9;9;9]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet _ = mulByDigit 90000 [9; 9; 9; 9; 9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "mulByDigit 90000 [9;9;9;9]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet _ = mulByDigit 90000 [9; 9; 9; 9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "mulByDigit 90000 [9;9;9]", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n\nlet _ = mulByDigit 90000 [9; 9; 9];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::m::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (helper [] ((m*10)*i)) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::m::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (helper [] ((m * 10) * i)) (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd [0] (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd [0] (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = match (List.rev l) with\n[] -> []\n| h::t -> \nlet rec helper acc v =  \nif v = 0\nthen \nacc\nelse\nhelper (v mod 10 :: acc) (v/10)\nin bigAdd (mulByDigit i (List.rev (List.map (fun x -> x*10) t ) )) (helper [] (h*i))", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "[1,0] @ clone 0 1", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet _ = [(1, 0)] @ (clone 0 1);;\n", "out": "Characters 8-17:\n  [1,0] @ clone 0 1;;\n          ^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type (int * int) list\n       Type int is not compatible with type int * int \n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "[1,0] @ (clone 0 1)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet _ = [(1, 0)] @ (clone 0 1);;\n", "out": "Characters 8-19:\n  [1,0] @ (clone 0 1);;\n          ^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type (int * int) list\n       Type int is not compatible with type int * int \n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "[1;0] @ (clone 0 1)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet _ = [1; 0] @ (clone 0 1);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "[1;0] @ (clone 0 3)", "min": "\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet _ = [1; 0] @ (clone 0 3);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let bigMul l1 l2 = \nlet f a x = match a with\n(numZeroes, prevRes) -> (numZeroes+1, bigAdd ( (mulByDigit x l1) @ (clone 0 numZeroes) prevRes)) in\nlet base = (1, []) in\nlet args = l2 in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1),\n          (bigAdd ((mulByDigit x l1) @ ((clone 0 numZeroes) prevRes)))) in\n  let base = (1, []) in\n  let args = l2 in let (_,res) = List.fold_left f base args in res;;\n", "out": "Error: This expression has type int list\n       This is not a function; it cannot be applied.\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 112-131:\n  (numZeroes, prevRes) -> (numZeroes+1, bigAdd ( (mulByDigit x l1) @ (clone 0 numZeroes) prevRes)) in\n                                                                     ^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let bigMul l1 l2 = \nlet f a x = match a with\n(numZeroes, prevRes) -> (numZeroes+1, bigAdd ( ( (mulByDigit x l1) @ (clone 0 numZeroes) ) prevRes)) in\nlet base = (1, []) in\nlet args = l2 in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1),\n          (bigAdd (((mulByDigit x l1) @ (clone 0 numZeroes)) prevRes))) in\n  let base = (1, []) in\n  let args = l2 in let (_,res) = List.fold_left f base args in res;;\n", "out": "Error: This expression has type int list\n       This is not a function; it cannot be applied.\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 92-135:\n  (numZeroes, prevRes) -> (numZeroes+1, bigAdd ( ( (mulByDigit x l1) @ (clone 0 numZeroes) ) prevRes)) in\n                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let bigMul l1 l2 = \nlet f a x = match a with\n(numZeroes, prevRes) -> (numZeroes+1, bigAdd ( ( (mulByDigit x l1) @ (clone 0 numZeroes) ) (prevRes) )) in\nlet base = (1, []) in\nlet args = l2 in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1),\n          (bigAdd (((mulByDigit x l1) @ (clone 0 numZeroes)) prevRes))) in\n  let base = (1, []) in\n  let args = l2 in let (_,res) = List.fold_left f base args in res;;\n", "out": "Error: This expression has type int list\n       This is not a function; it cannot be applied.\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 92-135:\n  (numZeroes, prevRes) -> (numZeroes+1, bigAdd ( ( (mulByDigit x l1) @ (clone 0 numZeroes) ) (prevRes) )) in\n                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type int list\n       This is not a function; it cannot be applied.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ((mulByDigit x l1) @ (clone 0 numZeroes)) (prevRes) )  in\nlet base = (1, []) in\nlet args = l2 in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1),\n          (bigAdd ((mulByDigit x l1) @ (clone 0 numZeroes)) prevRes)) in\n  let base = (1, []) in\n  let args = l2 in let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let bigMul l1 l2 = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ((mulByDigit x l1) @ (clone 0 numZeroes)) (prevRes) )  in\nlet base = (0, []) in\nlet args = l2 in\nlet (_, res) = List.fold_left f base args in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  match List.rev l with\n  | [] -> []\n  | h::t ->\n      let rec helper acc v =\n        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in\n      bigAdd (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t)))\n        (helper [] (h * i));;\n\nlet bigMul l1 l2 =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1),\n          (bigAdd ((mulByDigit x l1) @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in\n  let args = l2 in let (_,res) = List.fold_left f base args in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let stringOfList f l = \"[\" ^ ( sepConcat \";\" (List.map f l) ) ^ \"]\"", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = \"[\" ^ ((sepConcat \";\" (List.map f l)) ^ \"]\");;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let stringOfList f l = \"[\" ^ ( sepConcat \"; \" (List.map f l) ) ^ \"]\"", "min": "\nlet rec sepConcat sep sl =\n  match sl with\n  | [] -> \"\"\n  | h::t ->\n      let f a x = a ^ (sep ^ x) in\n      let base = h in let l = t in List.fold_left f base l;;\n\nlet stringOfList f l = \"[\" ^ ((sepConcat \"; \" (List.map f l)) ^ \"]\");;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd (i*x @ (clone 0 numZeroes)) (prevRes) ) in\nlet base = (0, []) in\nlet (_,res) = List.fold f base (List.rev l) in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1), (bigAdd ((i * x) @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in let (_,res) = List.fold f base (List.rev l) in res;;\n", "out": "Error: This expression has type int but an expression was expected of type\n         'a list\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 98-101:\n  (numZeroes, prevRes) -> ( numZeroes+1, bigAdd (i*x @ (clone 0 numZeroes)) (prevRes) ) in\n                                                 ^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( (i*x) @ (clone 0 numZeroes)) (prevRes) ) in\nlet base = (0, []) in\nlet (_,res) = List.fold f base (List.rev l) in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1), (bigAdd ((i * x) @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in let (_,res) = List.fold f base (List.rev l) in res;;\n", "out": "Error: This expression has type int but an expression was expected of type\n         'a list\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 99-104:\n  (numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( (i*x) @ (clone 0 numZeroes)) (prevRes) ) in\n                                                  ^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( [i*h] @ (clone 0 numZeroes) ) (prevRes) ) in\nlet base = (0, []) in\nlet (_,res) = List.fold f base (List.rev l) in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1), (bigAdd ([i * h] @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in let (_,res) = List.fold f base (List.rev l) in res;;\n", "out": "Error: Unbound value h\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 102-103:\n  (numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( [i*h] @ (clone 0 numZeroes) ) (prevRes) ) in\n                                                     ^\nError: Unbound value h\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec mulByDigit i l = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( [i*x] @ (clone 0 numZeroes) ) (prevRes) ) in\nlet base = (0, []) in\nlet (_,res) = List.fold f base (List.rev l) in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1), (bigAdd ([i * x] @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in let (_,res) = List.fold f base (List.rev l) in res;;\n", "out": "Error: Unbound value List.fold\nError: Unbound value clone\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 180-189:\n  let (_,res) = List.fold f base (List.rev l) in\n                ^^^^^^^^^\nError: Unbound value List.fold\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec mulByDigit i l = \nlet f a x = match a with\n(numZeroes, prevRes) -> ( numZeroes+1, bigAdd ( [i*x] @ (clone 0 numZeroes) ) (prevRes) ) in\nlet base = (0, []) in\nlet (_,res) = List.fold_left f base (List.rev l) in\nres", "min": "\nlet padZero l1 l2 =\n  if (List.length l1) < (List.length l2)\n  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)\n  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;\n\nlet rec removeZero l =\n  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;\n\nlet bigAdd l1 l2 =\n  let add (l1,l2) =\n    let f a x =\n      match x with\n      | (v1,v2) ->\n          (match a with\n           | (list1,list2) ->\n               (match list1 with\n                | [] ->\n                    ((((v1 + v2) / 10) :: list1), (((v1 + v2) mod 10) ::\n                      list2))\n                | h::t ->\n                    (((((v1 + v2) + h) / 10) :: list1),\n                      ((((v1 + v2) + h) mod 10) :: list2)))) in\n    let base = ([], []) in\n    let args = List.append (List.rev (List.combine l1 l2)) [(0, 0)] in\n    let (_,res) = List.fold_left f base args in res in\n  removeZero (add (padZero l1 l2));;\n\nlet rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;\n\nlet rec mulByDigit i l =\n  let f a x =\n    match a with\n    | (numZeroes,prevRes) ->\n        ((numZeroes + 1), (bigAdd ([i * x] @ (clone 0 numZeroes)) prevRes)) in\n  let base = (0, []) in\n  let (_,res) = List.fold_left f base (List.rev l) in res;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let sqsum xs = \nlet f a x = a + (x*x) in\nlet base = 0 in\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = a + (x * x) in let base = 0 in List.fold_left f base xs;;\n", "out": ""}]}
