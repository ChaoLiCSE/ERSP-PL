{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec sumList xs =\nmatch xs with\n[] -> []\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> [] | head::tail -> head + (sumList tail);;\n", "out": "Characters 67-81:\n  | head::tail -> head + (sumList tail);;\n                         ^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head  (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head  (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then [0]\nelse (digitsOfInt (n/10)) @ [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [0] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n <= 0 then []\nelse (digitsOfInt (n/10)) @ [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList (digitsOfInt n))", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec digitalRoot n = \nif n < 10 then n\nelse digitalRoot (sumList (digitalOfInt n))", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n\nlet rec digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitalOfInt n));;\n", "out": "Error: Unbound value digitalOfInt\nHint: Did you mean digitsOfInt?\nError: Unbound value digitalOfInt\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 69-81:\n  else digitalRoot (sumList (digitalOfInt n));;\n                             ^^^^^^^^^^^^\nError: Unbound value digitalOfInt\nHint: Did you mean digitsOfInt?\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nif n < 10 then n\nelse digitalRoot (sumList (digitsOfInt n))", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n\nlet rec digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt n));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \nif n < 10 then 0\nelse 1 + additivePersistence (sumList (digitsOfInt n))", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n\nlet rec additivePersistence n =\n  if n < 10 then 0 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = \nmatch l with \n[] -> []\n| head::tail -> listReverse tail @ head", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | head::tail -> (listReverse tail) @ head;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = \nmatch l with \n[] -> []\n| head::tail -> listReverse tail @ [head]", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | head::tail -> (listReverse tail) @ [head];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let palindrome w = \nif ((explode w) = (explode (listReverse w))) then true\nelse false", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | head::tail -> (listReverse tail) @ [head];;\n\nlet palindrome w =\n  if (explode w) = (explode (listReverse w)) then true else false;;\n", "out": "Characters 60-61:\n  if ((explode w) = (explode (listReverse w))) then true\n                                          ^\nError: This expression has type string but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \nif ((explode w) = (listReverse (explode w))) then true\nelse false", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | head::tail -> (listReverse tail) @ [head];;\n\nlet palindrome w =\n  if (explode w) = (listReverse (explode w)) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n <= 0 then []\nelse (digitsOfInt (n/10)) @ [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n = 0 && n < 10 then [0]\nelse if n <= 0 then []\nelse (digitsOfInt (n/10)) @ [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  if (n = 0) && (n < 10)\n  then [0]\n  else if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n = 0 && n < 10 then [0]\nelse if n <= 0 then []\nelse (digitsOfInt (n/10)) @ [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  if (n = 0) && (n < 10)\n  then [0]\n  else if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif (n > 0 && (n/10 = 0)) then [n] \nelse if n > 0 then (digitsOfInt (n/10)) @ [n mod 10]\nelse []", "min": "\nlet rec digitsOfInt n =\n  if (n > 0) && ((n / 10) = 0)\n  then [n]\n  else if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif (n > 0 && (n/10 = 0)) then [n] \nelse if (n > 0) then (digitsOfInt (n/10)) @ [n mod 10]\nelse []", "min": "\nlet rec digitsOfInt n =\n  if (n > 0) && ((n / 10) = 0)\n  then [n]\n  else if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif (n > 0) then \nif (n/10 = 0) then [n] \nelse (digitsOfInt (n/10)) @ [n mod 10]\nelse []", "min": "\nlet rec digitsOfInt n =\n  if n > 0\n  then (if (n / 10) = 0 then [n] else (digitsOfInt (n / 10)) @ [n mod 10])\n  else [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digits n = digitsOfInt (abs n)", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append_new (digitsOfInt (n / 10)) [n mod 10];;\n\nlet digits n = digitsOfInt (abs n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0\n| head::tail -> head + (sumList tail)", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | head::tail -> head + (sumList tail);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = \nmatch l with \n[] -> []\n| head::tail -> append_new (listReverse tail) [head]", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec listReverse l =\n  match l with\n  | [] -> []\n  | head::tail -> append_new (listReverse tail) [head];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nlet rec digs acc n=\nif n < 10 then n::acc\nelse digs ((n mod 10)::acc) (n/10) in digs [] n", "min": "\nlet rec digitsOfInt n =\n  let rec digs acc n =\n    if n < 10 then n :: acc else digs ((n mod 10) :: acc) (n / 10) in\n  digs [] n;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse append_new (digitsOfInt (n/10)) [n mod 10]", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append_new (digitsOfInt (n / 10)) [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif n < 10 then [n]\nelse append_new (digitsOfInt (n/10)) [n mod 10]", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec digitsOfInt n =\n  if n < 10 then [n] else append_new (digitsOfInt (n / 10)) [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nif n < 10 then [n]\nelse append_new (digitsOfInt (n/10)) [n mod 10]", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec digitsOfInt n =\n  if n < 10 then [n] else append_new (digitsOfInt (n / 10)) [n mod 10];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digits n = digitsOfInt (abs n)", "min": "\nlet rec append_new xs1 xs2 =\n  match xs1 with | [] -> xs2 | head::tail -> head :: (append_new tail xs2);;\n\nlet rec digitsOfInt n =\n  if n < 10 then [n] else append_new (digitsOfInt (n / 10)) [n mod 10];;\n\nlet digits n = digitsOfInt (abs n);;\n", "out": ""}]}
