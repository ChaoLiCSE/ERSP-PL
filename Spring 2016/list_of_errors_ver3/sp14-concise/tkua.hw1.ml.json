{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = failwith \"TBD:sumList\""}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 57-64:\n  [] -> 0 | h::t -> h + sumList;;\n                        ^^^^^^^\nError: This expression has type int list -> int\n       but an expression was expected of type int\n", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + sumList;;\n", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0 | h::t -> h + sumList"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 57-64:\n  [] -> 0 | h::t -> h + sumList;;\n                        ^^^^^^^\nError: This expression has type int list -> int\n       but an expression was expected of type int\n", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + sumList;;\n", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0 | h::t -> h + sumList"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0 | h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 70-71:\n  0 -> [] | n -> digitsOfInt n/10 n%10 :: [];;\n                                   ^\nError: Unbound value %\n", "min": "\nlet rec digitsOfInt n =\n  match n with | 0 -> [] | n -> [((digitsOfInt n) / (10 n)) % 10];;\n", "in": "let rec digitsOfInt n =\nmatch n with\n0 -> [] | n -> digitsOfInt n/10 n%10 :: []"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 52-65:\n  0 -> [] | n -> digitsOfInt n/10 :: [];;\n                 ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n = match n with | 0 -> [] | n -> [(digitsOfInt n) / 10];;\n", "in": "let rec digitsOfInt n =\nmatch n with\n0 -> [] | n -> digitsOfInt n/10 :: []"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 52-65:\n  0 -> [] | n -> digitsOfInt n :: [];;\n                 ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n = match n with | 0 -> [] | n -> [digitsOfInt n];;\n", "in": "let rec digitsOfInt n =\nmatch n with\n0 -> [] | n -> digitsOfInt n :: []"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 53-66:\n  0 -> [] | n -> [digitsOfInt n/10];;\n                  ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n = match n with | 0 -> [] | n -> [(digitsOfInt n) / 10];;\n", "in": "let rec digitsOfInt n =\nmatch n with\n0 -> [] | n -> [digitsOfInt n/10]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[] -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 79-80:\n  | _  -> digitsOfInt (n/10) @  [n%10];;\n                                  ^\nError: Unbound value %\n", "min": "\nlet rec digitsOfInt n =\n  match n with | 0 -> [] | _ -> (digitsOfInt (n / 10)) @ [n % 10];;\n", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> digitsOfInt (n/10) @  [n%10]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> digitsOfInt (n/10) @  [n mod 10]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n_  -> digitsOfInt (n/10) @  [n mod 10]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> digitsOfInt (n/10) @  [n mod 10]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> n mod 10::digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> n mod (10 * (n/10))::digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> n mod 10::digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 47-59:\n  else hDigitsofInt n = \n       ^^^^^^^^^^^^\nError: Unbound value hDigitsofInt\nHint: Did you mean digitsOfInt?\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec digitsOfInt n =\n  if n = 0\n  then [0]\n  else\n    (hDigitsofInt n) =\n      ((match n with | 0 -> [] | _ -> cat (digitsOfInt (n / 10)) (n mod 10)));;\n", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse hDigitsofInt n = \nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 47-59:\n  else hDigitsofInt n;;\n       ^^^^^^^^^^^^\nError: Unbound value hDigitsofInt\nHint: Did you mean digitsOfInt?\n", "min": "\nlet rec digitsOfInt n = if n = 0 then [0] else hDigitsofInt n;;\n", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse hDigitsofInt n"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n_  -> cat (digitsOfInt (n/10)) (n mod 10)\n| 0  -> []"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse\nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse\nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [0] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nmatch n with\n0  -> [] \n| _  -> cat (digitsOfInt (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-121:\n  .....fun help n  ->\n  match n with\n  0  -> [] \n  | _  -> cat (help (n/10)) (n mod 10)..\nError: This expression should not be a function, the expected type is\nint list\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec digitsOfInt n =\n  if n = 0\n  then [0]\n  else\n    (fun help  ->\n       fun n  -> match n with | 0 -> [] | _ -> cat (help (n / 10)) (n mod 10));;\n", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse fun help n  ->\nmatch n with\n0  -> [] \n| _  -> cat (help (n/10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse help n"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digits n = digitsOfInt (abs n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n/10 = 0 then n\nelse\nadditivePersistence (sumList (digits n) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "digitalRoot"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n/10 = 0 then n mod 10\nelse\nadditivePersistence (sumList (digits n) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n/10 = 0 then n\nelse\n0 + additivePersistence (sumList (digits n) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n/10 = 0 then n\nelse\n0 + additivePersistence (sumList (digits n) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n/10 = 0 then n\nelse\n0 + digitalRoot (sumList (digits n) )"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 70-71:\n  | h::t -> (cat l h)::t;;\n                       ^\nError: This expression has type 'a list\n       but an expression was expected of type 'a list list\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec listReverse l = match l with | [] -> [] | h::t -> (cat l h) :: t;;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> (cat l h)::t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 70-71:\n  | h::t -> (cat t h)::l;;\n                       ^\nError: This expression has type 'a list\n       but an expression was expected of type 'a list list\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec listReverse l = match l with | [] -> [] | h::t -> (cat t h) :: l;;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> (cat t h)::l"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 72-81:\n  | h::t -> listReverse ((cat l h)::t);;\n                         ^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> listReverse ((cat l h) :: t);;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> listReverse ((cat l h)::t)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 72-73:\n  | h::t -> listReverse (t::(cat l h));;\n                         ^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec cat x y = match x with | [] -> [y] | h::t -> h :: (cat t y);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> listReverse (t :: (cat l h));;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> listReverse (t::(cat l h))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> listReverse ((cat l h))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> listReverse (cat l h)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat ( listReverse l) t"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 8-19:\n  let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n          ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat h (listReverse (t))"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 59-62:\n  | h::t -> cat h (listReverse (t));;\n            ^^^\nError: Unbound value cat\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> cat h (listReverse t);;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat l (listReverse (t) h)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 59-62:\n  | h::t -> cat l (listReverse (t) h);;\n            ^^^\nError: Unbound value cat\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> cat l (listReverse t h);;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat listReverse (t) h"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 59-62:\n  | h::t -> cat listReverse (t) h;;\n            ^^^\nError: Unbound value cat\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> cat listReverse t h;;\n", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat (listReverse(t)) h"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let palindrome w = \nlet reverse = listReverse w"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 14-25:\n  let reverse = listReverse l;;\n                ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet reverse = listReverse l;;\n", "in": "let palindrome w = \nlet l = explode w"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 14-25:\n  let reverse = listReverse l;;\n                ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet reverse = listReverse l;;\n", "in": "let palindrome w = \nlet l = explode w"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let palindrome w = \nexplode w = listReverse (explode w)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let palindrome w = \nexplode w = listReverse (explode w)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n = 0 then [0]\nelse help n"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n[]   -> []\n| h::t -> cat (listReverse(t)) h"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs =\nmatch xs with\n[]   -> 0 \n| h::t -> h + sumList t"}]}
