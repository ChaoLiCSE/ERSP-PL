{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n", "out": ""}]}
