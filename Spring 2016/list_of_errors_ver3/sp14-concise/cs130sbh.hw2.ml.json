{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (di,ki) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 113-131:\n  if List.mem (h, seen)\n     ^^^^^^^^^^^^^^^^^^\nError: This expression has type ('a * 'b) list -> bool\n       but an expression was expected of type bool\n", "min": "\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem (h, seen) then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n| [] -> seen\n| h::t -> \nlet seen' = \nif List.mem (h, seen)\nthen seen\nelse h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 113-123:\n  if List.mem h\n     ^^^^^^^^^^\nError: This expression has type 'a list -> bool\n       but an expression was expected of type bool\n", "min": "\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n| [] -> seen\n| h::t -> \nlet seen' = \nif List.mem h\nthen seen\nelse h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n| [] -> seen\n| h::t -> \nlet seen' = \nif List.mem h seen\nthen seen\nelse h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n| [] -> seen\n| h::t -> \nlet seen' = \nif List.mem h seen\nthen seen\nelse h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec wwhile (f,b) = failwith \"to be written\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n| [] -> seen\n| h::t -> \nlet seen' = \nif List.mem h seen\nthen seen\nelse h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec wwhile (f,b) = match f b with\n| (k, tf) -> \nif tf = false\nthen k\nelse wwhile (f,k)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile (\nlet g a =\na, true\nin \ng, b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile (\nlet g a = \nf a, f a = a\nin \ng, b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile (\nlet g a = \nf a, f a != a\nin \ng, b)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Error: Unbound value f\nError: Unbound value wwhile\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 11-12:\n   fixpoint (f,b) = wwhile (\n             ^\nError: Unbound value f\n", "min": "\nlet fixpoint (f,b) = wwhile (let g a = ((f a), ((f a) != a)) in (g, b));;\n\nlet rec wwhile (f,b) =\n  match f b with | (k,tf) -> if tf = false then k else wwhile (f, k);;\n\nlet _ =\n  (fixpoint (f, b)) = (wwhile (let g a = ((f a), ((f a) != a)) in (g, b)));;\n", "in": " fixpoint (f,b) = wwhile (\nlet g a = \nf a, f a != a\nin \ng, b)"}, {"type": "", "out": "", "min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 28-56:\n  ............................(\n  fun a ->\n  f a, f a != a, b)..\nError: This expression should not be a function, the expected type is\n('a -> 'a * bool) * 'a\n", "min": "\nlet rec wwhile (f,b) =\n  match f b with | (k,tf) -> if tf = false then k else wwhile (f, k);;\n\nlet fixpoint (f,b) = wwhile (fun a  -> ((f a), ((f a) != a), b));;\n", "in": "let fixpoint (f,b) = wwhile (\nfun a ->\nf a, f a != a, b)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 28-57:\n  ............................(\n  fun a ->\n  f a, f a != a\n  , b)..\nError: This expression should not be a function, the expected type is\n('a -> 'a * bool) * 'a\n", "min": "\nlet rec wwhile (f,b) =\n  match f b with | (k,tf) -> if tf = false then k else wwhile (f, k);;\n\nlet fixpoint (f,b) = wwhile (fun a  -> ((f a), ((f a) != a), b));;\n", "in": "let fixpoint (f,b) = wwhile (\nfun a ->\nf a, f a != a\n, b)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 28-57:\n  ............................(\n  fun a ->\n  f a, f a != a\n  , b)..\nError: This expression should not be a function, the expected type is\n('a -> 'a * bool) * 'a\n", "min": "\nlet rec wwhile (f,b) =\n  match f b with | (k,tf) -> if tf = false then k else wwhile (f, k);;\n\nlet fixpoint (f,b) = wwhile (fun a  -> ((f a), ((f a) != a), b));;\n", "in": "let fixpoint (f,b) = wwhile (\nfun a ->\nf a, f a != a\n, b)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 28-55:\n  let fixpoint (f,b) = wwhile (fun a -> f a, f a != a, b);;\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression should not be a function, the expected type is\n('a -> 'a * bool) * 'a\n", "min": "\nlet rec wwhile (f,b) =\n  match f b with | (k,tf) -> if tf = false then k else wwhile (f, k);;\n\nlet fixpoint (f,b) = wwhile (fun a  -> ((f a), ((f a) != a), b));;\n", "in": "let fixpoint (f,b) = wwhile (fun a -> f a, f a != a, b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile ((fun a -> f a, f a != a), b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 78-84:\n  | Sine s -> \"pi* \" exprToString s;;\n              ^^^^^^\nError: This expression has type string\n       This is not a function; it cannot be applied.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> \"pi* \" exprToString s;;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"pi* \" exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 78-84:\n  | Sine s -> \"pi* \" + exprToString s;;\n              ^^^^^^\nError: This expression has type string but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> \"pi* \" + (exprToString s);;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"pi* \" + exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 92-116:\n  | Sine s -> String.concat [\"pi* \"; exprToString s];;\n                            ^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type string\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> String.concat [\"pi* \"; exprToString s];;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> String.concat [\"pi* \"; exprToString s]"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 92-95:\n  | Sine s -> String.concat sep [\"pi* \"; exprToString s];;\n                            ^^^\nError: Unbound value sep\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> String.concat sep [\"pi* \"; exprToString s];;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> String.concat sep [\"pi* \"; exprToString s]"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 78-98:\n  | Sine s -> String.concat \"pi* \" ^ exprToString s;;\n              ^^^^^^^^^^^^^^^^^^^^\nError: This expression has type string list -> string\n       but an expression was expected of type string\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> (String.concat \"pi* \") ^ (exprToString s);;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> String.concat \"pi* \" ^ exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"pi* \" ^ exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"pi*\" ^ exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"sin(pi*\" ^ exprToString s"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 90-102:\n  | Sine s -> \"sin(pi*\" ^ exprToString s \")\";;\n                          ^^^^^^^^^^^^\nError: This function has type expr -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine s -> \"sin(pi*\" ^ (exprToString s \")\");;\n", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"sin(pi*\" ^ exprToString s \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine s -> \"sin(pi*\" ^ exprToString s ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine e' -> \"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \"cos(pi*)\" ^ exprToString e' ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine e' -> \"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \"cos(pi*\" ^ exprToString e' ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine e' -> \"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \"(\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \"/2)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine e' -> \"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine e' -> \"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> exprToString e1 ^ \"*\" ^ exprToString e2"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 308-317:\n  | Threshold (e1, e2, e3, e4) -> \n    ^^^^^^^^^\nError: This variant pattern is expected to have type expr\n       The constructor Threshold does not belong to type expr\nHint: Did you mean Thresh?\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e' -> \"sin(pi*\" ^ ((exprToString e') ^ \")\")\n  | Cosine e' -> \"cos(pi*\" ^ ((exprToString e') ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Threshold (e1,e2,e3,e4) ->\n      (exprToString e1) ^\n        (\"<\" ^\n           ((exprToString e2 \"?\") ^\n              ((exprToString e3) ^ (\"?\" exprToString e4))));;\n", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Threshold (e1, e2, e3, e4) -> \nexprToString e1 ^ \"<\" ^ exprToString e2 \"?\" ^ \nexprToString e3 ^ \"?\" exprToString e4"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 360-372:\n  exprToString e1 ^ \"<\" ^ exprToString e2 \"?\" ^ \n                          ^^^^^^^^^^^^\nError: This function has type expr -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e' -> \"sin(pi*\" ^ ((exprToString e') ^ \")\")\n  | Cosine e' -> \"cos(pi*\" ^ ((exprToString e') ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      (exprToString e1) ^\n        (\"<\" ^\n           ((exprToString e2 \"?\") ^\n              ((exprToString e3) ^ (\"?\" exprToString e4))));;\n", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \nexprToString e1 ^ \"<\" ^ exprToString e2 \"?\" ^ \nexprToString e3 ^ \"?\" exprToString e4"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 360-372:\n  exprToString e1 ^ \"<\" ^ exprToString e2 \"?\" ^ exprToString e3 ^ \"?\" exprToString e4;;\n                          ^^^^^^^^^^^^\nError: This function has type expr -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e' -> \"sin(pi*\" ^ ((exprToString e') ^ \")\")\n  | Cosine e' -> \"cos(pi*\" ^ ((exprToString e') ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      (exprToString e1) ^\n        (\"<\" ^\n           ((exprToString e2 \"?\") ^\n              ((exprToString e3) ^ (\"?\" exprToString e4))));;\n", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \nexprToString e1 ^ \"<\" ^ exprToString e2 \"?\" ^ exprToString e3 ^ \"?\" exprToString e4"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 403-406:\n  exprToString e3 ^ \"?\" exprToString e4;;\n                    ^^^\nError: This expression has type string\n       This is not a function; it cannot be applied.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e' -> \"sin(pi*\" ^ ((exprToString e') ^ \")\")\n  | Cosine e' -> \"cos(pi*\" ^ ((exprToString e') ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      (exprToString e1) ^\n        (\"<\" ^\n           ((exprToString e2) ^\n              (\"?\" ^ ((exprToString e3) ^ (\"?\" exprToString e4)))));;\n", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \nexprToString e1 ^ \"<\" ^ exprToString e2 ^ \"?\" ^ \nexprToString e3 ^ \"?\" exprToString e4"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \nexprToString e1 ^ \"<\" ^ exprToString e2 ^ \"?\" ^ \nexprToString e3 ^ \"?\" ^ exprToString e4"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \n\"(\" ^ exprToString e1 ^ \"<\" ^ exprToString e2 ^ \"?\" ^ \nexprToString e3 ^ \"?\" ^ exprToString e4 ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX -> \n\"x\"\n| VarY -> \n\"y\"\n| Sine e' -> \n\"sin(pi*\" ^ exprToString e' ^ \")\"\n| Cosine e' -> \n\"cos(pi*\" ^ exprToString e' ^ \")\"\n| Average (e1, e2) -> \n\"((\" ^ exprToString e1 ^ \"+\" ^ exprToString e2 ^ \")/2)\"\n| Times (e1, e2) -> \nexprToString e1 ^ \"*\" ^ exprToString e2\n| Thresh (e1, e2, e3, e4) -> \n\"(\" ^ exprToString e1 ^ \"<\" ^ exprToString e2 ^ \"?\" ^ \nexprToString e3 ^ \":\" ^ exprToString e4 ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let buildX()                       = VarX"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 87-88:\n  | Sine e -> sin(pi *. eval e);;\n                             ^\nError: This expression has type expr but an expression was expected of type\n         expr * 'a * 'a\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with | VarX  -> x | VarY  -> y | Sine e -> sin (pi *. (eval e));;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e -> sin(pi *. eval e)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 76-78:\n  | Sine e -> sin(pi * eval e);;\n                  ^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with | VarX  -> x | VarY  -> y | Sine e -> sin (pi * (eval e));;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e -> sin(pi * eval e)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 87-88:\n  | Sine e -> sin(pi *. eval e);;\n                             ^\nError: This expression has type expr but an expression was expected of type\n         expr * 'a * 'a\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with | VarX  -> x | VarY  -> y | Sine e -> sin (pi *. (eval e));;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e -> sin(pi *. eval e)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 82-94:\n  | Sine e -> sin(pi *. eval (e,0,0));;\n                        ^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e -> sin (pi *. (eval (e, 0, 0)));;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e -> sin(pi *. eval (e,0,0))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e -> sin(pi *. eval (e,0.0,0.0))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 161-174:\n  | Average (e1,e2) -> ((eval (e1,x,y) * eval (e2,x,y)) / 2);;\n                         ^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) * (eval (e2, x, y))) / 2;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> ((eval (e1,x,y) * eval (e2,x,y)) / 2)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 160-192:\n  | Average (e1,e2) -> ((eval (e1,x,y) *. eval (e2,x,y)) / 2);;\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) *. (eval (e2, x, y))) / 2;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> ((eval (e1,x,y) *. eval (e2,x,y)) / 2)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 196-197:\n  | Average (e1,e2) -> ((eval (e1,x,y) *. eval (e2,x,y)) /. 2);;\n                                                            ^\nError: This expression has type int but an expression was expected of type\n         float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) *. (eval (e2, x, y))) /. 2;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> ((eval (e1,x,y) *. eval (e2,x,y)) /. 2)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> ((eval (e1,x,y) *. eval (e2,x,y)) /. 2.0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> (eval (e1,x,y) *. eval (e2,x,y)) /. 2.0"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 160-173:\n  | Average (e1,e2) -> (eval (e1,x,y) + eval (e2,x,y)) /. 2.0;;\n                        ^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) + (eval (e2, x, y))) /. 2.0;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> (eval (e1,x,y) + eval (e2,x,y)) /. 2.0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> (eval (e1,x,y) +. eval (e2,x,y)) /. 2.0"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 223-225:\n  | Times (e1,e2) -> eval e1 *. eval e2;;\n                          ^^\nError: This expression has type expr but an expression was expected of type\n         expr * float * float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval e1) *. (eval e2);;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> (eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> eval e1 *. eval e2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine e1 -> sin(pi *. eval (e1,x,y))\n| Cosine e1 -> cos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> (eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> eval (e1,x,y) *. eval (e2,x,y)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nbuildX()\n| d -> \nbuildSine(build (rand, (depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,5) with\n| 0 -> \nbuildSine (build (rand, depth-1))\n| 1 -> \nbuildCosine (build (rand, depth-1))\n| 2 -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| 3 -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| 4 ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<5) -> \nbuildSine (build (rand, depth-1))\n| i when (i<10) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<20) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<80) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<20) -> \nbuildSine (build (rand, depth-1))\n| i when (i<40) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<50) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<90) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AlternateSign of expr"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| Negate   of expr"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,1) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<20) -> \nbuildSine (build (rand, depth-1))\n| i when (i<45) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<65) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<75) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<80) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildNegate (build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<20) -> \nbuildSine (build (rand, depth-1))\n| i when (i<45) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<65) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<75) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<80) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildNegate (build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| Log      of expr"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 416-417:\n  else 0;;\n       ^\nError: This expression has type int but an expression was expected of type\n         float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Log of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Log e1 -> let b = eval (e1, x, y) in if b > 1.0 then log b else 0;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0.0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| Log      of expr\n| SumOfSquares of expr * expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 449-470:\n  (eval(e1,x,y) ** 2.0) + (eval(e2,x,y) ** 2.0) + (eval(e3,x,y) ** 2.0);;\n  ^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Log of expr\n  | SumOfSquares of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Log e1 -> let b = eval (e1, x, y) in if b > 1.0 then log b else 0.0\n  | SumOfSquares (e1,e2,e3) ->\n      (((eval (e1, x, y)) ** 2.0) + ((eval (e2, x, y)) ** 2.0)) +\n        ((eval (e3, x, y)) ** 2.0);;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0.0\n| SumOfSquares (e1,e2,e3) ->\n(eval(e1,x,y) ** 2.0) + (eval(e2,x,y) ** 2.0) + (eval(e3,x,y) ** 2.0)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 463-466:\n  (eval(e1,x,y) **. 2.0) + (eval(e2,x,y) **. 2.0) + (eval(e3,x,y) **. 2.0);;\n                ^^^\nError: Unbound value **.\nHint: Did you mean *. or **?\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Log of expr\n  | SumOfSquares of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Log e1 -> let b = eval (e1, x, y) in if b > 1.0 then log b else 0.0\n  | SumOfSquares (e1,e2,e3) ->\n      (((eval (e1, x, y)) **. 2.0) + ((eval (e2, x, y)) **. 2.0)) +\n        ((eval (e3, x, y)) **. 2.0);;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0.0\n| SumOfSquares (e1,e2,e3) ->\n(eval(e1,x,y) **. 2.0) + (eval(e2,x,y) **. 2.0) + (eval(e3,x,y) **. 2.0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0.0\n| SumOfSquares (e1,e2,e3) ->\n(eval(e1,x,y) ** 2.0) +. (eval(e2,x,y) ** 2.0) +. (eval(e3,x,y) ** 2.0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<15) -> \nbuildSine (build (rand, depth-1))\n| i when (i<30) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<40) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<50) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<60) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<80) ->\nbuildLog (build (rand, depth-1))\n| i when (i<100) -> \nbuildSumOfSquares (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| Log e1 ->\nlet b = eval (e1,x,y)\nin\nif (b > 1.0)\nthen log(b)\nelse 0.0\n| SumOfSquares (e1,e2,e3) ->\n((eval(e1,x,y) ** 2.0) \n+. (eval(e2,x,y) ** 2.0)\n+. (eval(e3,x,y) ** 2.0)) /. 3.0"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 351-355:\n  | ModF e1 ->\n    ^^^^\nError: This variant pattern is expected to have type expr\n       The constructor ModF does not belong to type expr\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Log of expr\n  | SumOfSquares of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | ModF e1 -> (match modf ((eval (e1, x, y)) *. 10) with | (f,i) -> f)\n  | SumOfSquares (e1,e2,e3) ->\n      ((((eval (e1, x, y)) ** 2.0) +. ((eval (e2, x, y)) ** 2.0)) +.\n         ((eval (e3, x, y)) ** 2.0))\n        /. 3.0;;\n", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| ModF e1 ->\n(match modf (eval (e1,x,y) *. 10) with\n| (f, i) -> f\n)\n| SumOfSquares (e1,e2,e3) ->\n((eval(e1,x,y) ** 2.0) \n+. (eval(e2,x,y) ** 2.0)\n+. (eval(e3,x,y) ** 2.0)) /. 3.0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| ModF      of expr\n| SumOfSquares of expr * expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| ModF e1 ->\n(match modf (eval (e1,x,y) *. 10.0) with\n| (f, i) -> f\n)\n| SumOfSquares (e1,e2,e3) ->\n((eval(e1,x,y) ** 2.0) \n+. (eval(e2,x,y) ** 2.0)\n+. (eval(e3,x,y) ** 2.0)) /. 3.0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<20) -> \nbuildSine (build (rand, depth-1))\n| i when (i<40) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<50) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<60) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<70) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<85) ->\nbuildModF (build (rand, depth-1))\n| i when (i<100) -> \nbuildSumOfSquares (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with\n| VarX -> \nx\n| VarY -> \ny\n| Sine e1 -> \nsin(pi *. eval (e1,x,y))\n| Cosine e1 -> \ncos(pi *. eval (e1,x,y))\n| Average (e1,e2) -> \n(eval (e1,x,y) +. eval (e2,x,y)) /. 2.0\n| Times (e1,e2) -> \neval (e1,x,y) *. eval (e2,x,y)\n| Thresh (e1,e2,e3,e4) -> \nif (eval(e1,x,y)<eval(e2,x,y))\nthen eval(e3,x,y)\nelse eval(e4,x,y)\n| ModF e1 ->\n(match modf (eval (e1,x,y) *. 4.0) with\n| (f, i) -> f\n)\n| SumOfSquares (e1,e2,e3) ->\n((eval(e1,x,y) ** 2.0) \n+. (eval(e2,x,y) ** 2.0)\n+. (eval(e3,x,y) ** 2.0)) /. 3.0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<30) -> \nbuildSine (build (rand, depth-1))\n| i when (i<40) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<60) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<80) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<85) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<90) ->\nbuildModF (build (rand, depth-1))\n| i when (i<100) -> \nbuildSumOfSquares (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<23) -> \nbuildSine (build (rand, depth-1))\n| i when (i<46) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<56) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<64) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<96) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))\n| i when (i<98) ->\nbuildModF (build (rand, depth-1))\n| i when (i<100) -> \nbuildSumOfSquares (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<18) -> \nbuildSine (build (rand, depth-1))\n| i when (i<36) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<56) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<75) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) =\nif \n(depth = 0)\nthen\nmatch rand(0,2) with\n| 0 -> buildX()\n| 1 -> buildY()\nelse \nmatch rand (0,100) with\n| i when (i<30) -> \nbuildSine (build (rand, depth-1))\n| i when (i<60) -> \nbuildCosine (build (rand, depth-1))\n| i when (i<80) -> \nbuildAverage (build (rand, depth-1), build (rand, depth-1))\n| i when (i<90) -> \nbuildTimes (build (rand, depth-1), build (rand, depth-1))\n| i when (i<100) ->\nbuildThresh (build (rand, depth-1), build (rand, depth-1), \nbuild (rand, depth-1), build (rand, depth-1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> match h with\n| (ki,di) ->\nif ki = k\nthen di\nelse assoc (d,k,t)"}]}
