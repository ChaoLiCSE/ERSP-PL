{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = failwith \"TBD:sumList\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n = failwith \"TBD:digitsOfInt\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n = if n <= 0 then [] else [1]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t @ h"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t @ [h]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t @ [h]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse [n mod 10] @ digitsOfInt n/10"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 60-73:\n  else [n mod 10] @ digitsOfInt n/10;;\n                    ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10] @ ((digitsOfInt n) / 10);;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse n mod 10 @ [digitsOfInt n/10]"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-55:\n  else n mod 10 @ [digitsOfInt n/10];;\n       ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (n mod 10) @ [(digitsOfInt n) / 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-55:\n  else n mod 10 @ [digitsOfInt n/10];;\n       ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (n mod 10) @ [(digitsOfInt n) / 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 25-33:\n  n mod 10 @ [digitsOfInt n/10];;\n  ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n = (n mod 10) @ [(digitsOfInt n) / 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 60-73:\n  else n mod 10 :: [digitsOfInt n/10];;\n                    ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10; (digitsOfInt n) / 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 61-74:\n  else [n mod 10] @ [digitsOfInt n/10];;\n                     ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10] @ [(digitsOfInt n) / 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 61-79:\n  else [n mod 10] @ [digitsOfInt (n/10)];;\n                     ^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10] @ [digitsOfInt (n / 10)];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-55:\n  else n mod 10 @ [digitsOfInt (n/10)];;\n       ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (n mod 10) @ [digitsOfInt (n / 10)];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 61-79:\n  else [n mod 10] @ [digitsOfInt (n/10)];;\n                     ^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10] @ [digitsOfInt (n / 10)];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse [n mod 10] @ listReverse digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse listReverse ([n mod 10] @ digitsOfInt (n/10))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse n mod 10 @ [digitsOfInt (n/10)]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse [n mod 10] @ digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse [n mod 10] @ [digitsOfInt (n/10)]"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 61-79:\n  else [n mod 10] @ [digitsOfInt (n/10)];;\n                     ^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [n mod 10] @ [digitsOfInt (n / 10)];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-60:\n  else digitsOfInt n/10 :: [n mod 10];;\n       ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [(digitsOfInt n) / 10; n mod 10];;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse digitsOfInt (n/10) :: [n mod 10]"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-65:\n  else digitsOfInt (n/10) :: [n mod 10];;\n       ^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else [digitsOfInt (n / 10); n mod 10];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse listReverse [n mod 10] @ digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 65-80:\n  digitsOfInt n10 :: [n mod 10];;\n  ^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (let n10 = n / 10 in [digitsOfInt n10; n mod 10]);;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let n10 = n/10 in\n[n mod 10] @ digitsOfInt n10"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 69-82:\n  else let n2 = [n mod 10] @ digitsOfInt n/10 in\n                             ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else (let n2 = [n mod 10] @ ((digitsOfInt n) / 10) in listReverse n2);;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let n2 = [n mod 10] @ digitsOfInt (n/10) in\nlistReverse n2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let n2 = [n mod 10] @ digitsOfInt (n/10) in\nlistReverse n2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-57:\n  else (n mod 10) @ [digitsOfInt (n/10)];;\n       ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (n mod 10) @ [digitsOfInt (n / 10)];;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let digit = digitsOfInt (n/10) in\ndigit @ [(n mod 10)]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let _ = digitsOfInt (n/10) in\n_ @ [(n mod 10)]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let digit = digitsOfInt (n/10) in\ndigit @ [(n mod 10)]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digits n = digitsOfInt (abs n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digits n = digitsOfInt (abs n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse (n mod 10) :: digitsOfInt n/10"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 61-74:\n  else (n mod 10) :: digitsOfInt n/10;;\n                     ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (n mod 10) :: ((digitsOfInt n) / 10);;\n", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse (n mod 10) :: digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse digitsOfInt (n/10) :: (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 47-65:\n  else digitsOfInt (n/10) :: (n mod 10);;\n       ^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n <= 0 then [] else (digitsOfInt (n / 10)) :: (n mod 10);;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 77-87:\n  else let l = digitsOfInt (n/10) :: (n mod 10) in\n                                     ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list list\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else (let l = (digitsOfInt (n / 10)) :: (n mod 10) in listReverse l);;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 83-93:\n  else let leading = digitsOfInt (n/10) :: (n mod 10) in\n                                           ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list list\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else\n    (let leading = (digitsOfInt (n / 10)) :: (n mod 10) in\n     listReverse leading);;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 58-71:\n  | h::t -> listReverse t :: [h];;\n            ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> [listReverse t; h];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 58-71:\n  | h::t -> listReverse t :: h;;\n            ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) :: h;;\n", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> h :: listReverse l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> t :: listReverse h"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 75-76:\n  | h::t -> t :: listReverse h;;\n                             ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> t :: (listReverse h);;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nif n <= 0 then []\nelse let digits = digitsOfInt (n/10) in\ndigits @ [(n mod 10)]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 58-71:\n  | h::t -> listReverse t :: [h];;\n            ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> [listReverse t; h];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 58-73:\n  | h::t -> (listReverse t) :: [h];;\n            ^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> [listReverse t; h];;\n", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t :: [h]"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 45-46:\n  | [] -> [i]\n           ^\nError: Unbound value i\n", "min": "\nlet rec myAppend l n = match l with | [] -> [i] | h::t -> h :: (myAppend t i);;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> myAppend (listReverse l) [h]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 58-61:\n  | h::t -> rev = listReverse t in\n            ^^^\nError: Unbound value rev\nHint: Did you mean ref?\n", "min": "\nlet _ =\n  let rec listReverse l =\n    match l with | [] -> [] | h::t -> rev = (listReverse t) in\n  [rev; h];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 85-88:\n  rev :: [h];;\n  ^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> let rev = listReverse t in [rev; h];;\n", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> helperAppend (listReverse t) [h]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digits n = digitsOfInt (abs n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec additivePersistence n =\nif n <= 0 then []\nelse sumList (digitsOfInt n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec additivePersistence n =\nif n < 10 then 0\nelse 1 + (additivePersistence (sumList (digitsOfInt n)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 45-46:\n  listReverse (explode w) = w;;\n                            ^\nError: This expression has type string but an expression was expected of type\n         char list\n", "min": "\nlet rec helperAppend l n =\n  match l with | [] -> n | h::t -> h :: (helperAppend t n);;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> helperAppend (listReverse t) [h];;\n\nlet palindrome w = (listReverse (explode w)) = w;;\n", "in": "let palindrome w =\nlistReverse (explode w) = explode w"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| [] -> 0\n| h::t -> h + sumList t"}]}
