{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = (*failwith \"TBD:sumList\"*)\nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = (*failwith \"TBD:sumList\"*)\nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = (*failwith \"TBD\"*)\nlet str = explode w in\nif str = listReverse (str) then true\nelse false", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet palindrome w =\n  let str = explode w in if str = (listReverse str) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = function\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = match l with\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = match l with | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": "Characters 74-80:\n  | h::t -> rev (h::x) t in\n                ^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'b -> 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = match l with\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = match l with | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": "Characters 74-80:\n  | h::t -> rev (h::x) t in\n                ^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'b -> 'c\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = match x with\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = match x with | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": "Characters 70-73:\n  | h::t -> rev (h::x) t in\n            ^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x l = match x with\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x l = match x with | [] -> x | h::t -> rev (h :: x) t in\n  rev [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x l = match x with\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x l = match x with | [] -> x | h::t -> rev (h :: x) t in\n  rev [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x l = function\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x l = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": "Characters 68-80:\n  | h::t -> rev (h::x) t in\n            ^^^^^^^^^^^^\nError: This expression has type 'a list -> 'a list\n       but an expression was expected of type 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = function\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digitalRoot n = (*failwith \"TBD\"*)\nif n < 10 then n\nelse digitalRoot( sumList (digitsOfInt ( abs n) ) )", "min": "\nlet digitalRoot n =\n  let rec loop x = if x < 10 then x else loop (sumList (digitsOfInt (abs x))) in\n  match n with | 0 -> 0 | _ -> loop n;;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else\n    (let rec loop n dig_list =\n       if n = 0 then dig_list else loop (n / 10) ((n mod 10) :: dig_list) in\n     match n with | _ -> loop n []);;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt (abs n)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digitalRoot n = (*failwith \"TBD\"*)\nif n < 10 then n\nelse digitalRoot( sumList (digitsOfInt ( abs n) ) )", "min": "\nlet digitalRoot n =\n  let rec loop x = if x < 10 then x else loop (sumList (digitsOfInt (abs x))) in\n  match n with | 0 -> 0 | _ -> loop n;;\n\nlet digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt (abs n)));;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else\n    (let rec loop n dig_list =\n       if n = 0 then dig_list else loop (n / 10) ((n mod 10) :: dig_list) in\n     match n with | _ -> loop n []);;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt (abs n)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> h::x\n| _ -> listReverse x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| h::[] ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| [] ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | [] -> h :: x;;\n", "out": "Characters 83-84:\n  | [] ->  h::x;;\n           ^\nError: Unbound value h\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| _ ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | _ -> h :: x;;\n", "out": "Characters 82-83:\n  | _ ->  h::x;;\n          ^\nError: Unbound value h\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| (h) ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h -> h :: x;;\n", "out": "Characters 84-85:\n  | (h) ->  h::x;;\n            ^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| [h] ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| [h] ->  t::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> t :: x;;\n", "out": "Characters 84-85:\n  | [h] ->  t::x;;\n            ^\nError: Unbound value t\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet x = [] in\nmatch l with\n| (h::t) -> listReverse t\n| [h] ->  h::x", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> h :: x | _ -> listReverse x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n\nlet listReverse l =\n  let x = [] in match l with | h::t -> listReverse t | h::[] -> h :: x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = (*failwith \"TBD\"*)\nlet rec rev x = function\n| [] -> x\n| h::t -> rev (h::x) t in\nrev[] l", "min": "\nlet listReverse l =\n  let rec rev x = function | [] -> x | h::t -> rev (h :: x) t in rev [] l;;\n", "out": ""}]}
