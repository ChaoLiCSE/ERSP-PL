{"event": "eval", "ocaml": [{"type": "scope", "in": "listReverse [1;2;3;4]", "min": "\nlet _ = listReverse [1; 2; 3; 4];;\n", "out": "Characters 0-11:\n  listReverse [1;2;3;4];;\n  ^^^^^^^^^^^\nError: Unbound value listReverse\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let aux_palindrome xs xs' =\nxs", "min": "\nlet aux_palindrome xs xs' = xs;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "palindrome \"racecar\"", "min": "\nlet _ = palindrome \"racecar\";;\n", "out": "Characters 0-10:\n  palindrome \"racecar\";;\n  ^^^^^^^^^^\nError: Unbound value palindrome\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let listReverse xs = match xs with\n| []      -> []\n| [_]     -> []\n| x::xs'  -> append (listReverse xs') x", "min": "\nlet listReverse xs =\n  match xs with\n  | [] -> []\n  | _::[] -> []\n  | x::xs' -> append (listReverse xs') x;;\n", "out": "Characters 80-86:\n  | x::xs'  -> append (listReverse xs') x;;\n               ^^^^^^\nError: Unbound value append\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\n| []    -> 0\n| x::xs' -> x + sumList xs'", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digits n = digitsOfInt (abs n)", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \nif n / 10 = 0\nthen 0\nelse additivePersistence (sumList(digitsOfInt n)) + 1", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n\nlet rec additivePersistence n =\n  if (n / 10) = 0\n  then 0\n  else (additivePersistence (sumList (digitsOfInt n))) + 1;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n\nlet rec digitalRoot n =\n  if (n / 10) = 0 then n else digitalRoot (sumList (digitsOfInt n));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs' -> append (listReverse xs') x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]     -> true\n| [],_      -> false\n| _, []     -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2", "min": "\nlet rec aux_palindrome xs xs' =\n  match (xs, xs') with\n  | ([],[]) -> true\n  | ([],_) -> false\n  | (_,[]) -> false\n  | (h1::t1,h2::t2) -> (h1 = h2) && (aux_palindrome t1 t2);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \naux_palindrome (explode w) (listReverse (explode w))", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec aux_palindrome xs xs' =\n  match (xs, xs') with\n  | ([],[]) -> true\n  | ([],_) -> false\n  | (_,[]) -> false\n  | (h1::t1,h2::t2) -> (h1 = h2) && (aux_palindrome t1 t2);;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs' -> append (listReverse xs') x;;\n\nlet palindrome w = aux_palindrome (explode w) (listReverse (explode w));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec digitsOfInt n =\n  if n <= 0 then [] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n\nlet rec digitalRoot n =\n  if (n / 10) = 0 then n else digitalRoot (sumList (digitsOfInt n));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x", "min": "\nlet rec append head tail =\n  match head with | [] -> [tail] | h::t -> h :: (append t tail);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs' -> append (listReverse xs') x;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]            -> true\n| [],_             -> false\n| _, []            -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2", "min": "\nlet rec aux_palindrome xs xs' =\n  match (xs, xs') with\n  | ([],[]) -> true\n  | ([],_) -> false\n  | (_,[]) -> false\n  | (h1::t1,h2::t2) -> (h1 = h2) && (aux_palindrome t1 t2);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;\n", "out": ""}]}
