{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 66-72:\n  | x::xs'  -> append (listReverse xs') x;;\n               ^^^^^^\nError: Unbound value append\n", "min": "\nlet listReverse xs =\n  match xs with | a::[] -> [a] | x::xs' -> append (listReverse xs') x;;\n", "in": "let listReverse xs = match xs with\n| [a]      -> [a]\n| x::xs'  -> append (listReverse xs') x"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-11:\n  listReverse [1;2;3;4];;\n  ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet _ = listReverse [1; 2; 3; 4];;\n", "in": "listReverse [1;2;3;4]"}, {"type": "scope", "out": "Characters 0-11:\n  listReverse [];;\n  ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet _ = listReverse [];;\n", "in": "listReverse []"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let aux_palindrome xs xs' =\nxs"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-10:\n  palindrome \"racecar\";;\n  ^^^^^^^^^^\nError: Unbound value palindrome\n", "min": "\nlet _ = palindrome \"racecar\";;\n", "in": "palindrome \"racecar\""}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-11:\n  listReverse ['r'; 'a'; 'c'; 'e';'c';'a';'r'];;\n  ^^^^^^^^^^^\nError: Unbound value listReverse\n", "min": "\nlet _ = listReverse ['r'; 'a'; 'c'; 'e'; 'c'; 'a'; 'r'];;\n", "in": "listReverse ['r'; 'a'; 'c'; 'e';'c';'a';'r']"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []    -> 0\n| x::xs' -> x + sumList xs'"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []    -> 0\n| x::xs' -> x + sumList xs'"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digits n = digitsOfInt (abs n)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec additivePersistence n = \nif n / 10 = 0\nthen 0\nelse additivePersistence (sumList(digitsOfInt n)) + 1"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]     -> true\n| [],_      -> false\n| _, []     -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let palindrome w = \naux_palindrome (explode w) (listReverse (explode w))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n = \nif n <= 0\nthen []\nelse append (digitsOfInt (n / 10)) (n mod 10)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitalRoot n = \nif n / 10 = 0\nthen n\nelse digitalRoot (sumList(digitsOfInt n))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = match l with\n| []      -> []\n| x::xs'  -> append (listReverse xs') x"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec aux_palindrome xs xs' = match xs, xs' with\n| [],[]            -> true\n| [],_             -> false\n| _, []            -> false\n| h1::t1, h2::t2   -> h1 = h2 && aux_palindrome t1 t2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0\n| x::xs' -> x + sumList xs'"}]}
