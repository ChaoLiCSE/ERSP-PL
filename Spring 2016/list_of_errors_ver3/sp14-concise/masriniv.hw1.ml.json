{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumfist\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumfist\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = failwith \"TBD:sumList\"", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n < 0 with\n| true -> 0\n| false -> 1", "min": "\nlet rec digitsOfInt n = match n < 0 with | true  -> 0 | false  -> 1;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n < 0 with\n| true -> 0\n| false -> 1", "min": "\nlet rec digitsOfInt n = match n < 0 with | true  -> 0 | false  -> 1;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> 1", "min": "\nlet rec digitsOfInt n = match n <= 0 with | true  -> [] | false  -> 1;;\n", "out": "Characters 66-67:\n  | false -> 1;;\n             ^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> []", "min": "\nlet rec digitsOfInt n = match n <= 0 with | true  -> [] | false  -> [];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> digitsOfInt n/10 @ [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> ((digitsOfInt n) / 10) @ [n % 10];;\n", "out": "Characters 66-79:\n  | false -> digitsOfInt n/10 @ [n%10];;\n             ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (digitsOfInt n/10) @ [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> ((digitsOfInt n) / 10) @ [n % 10];;\n", "out": "Characters 67-80:\n  | false -> (digitsOfInt n/10) @ [n%10];;\n              ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| false -> (digitsOfInt n/10) @ [n%10]\n| true -> []", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | false  -> ((digitsOfInt n) / 10) @ [n % 10]\n  | true  -> [];;\n", "out": "Characters 53-71:\n  | false -> (digitsOfInt n/10) @ [n%10]\n             ^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (digitsOfInt n/10) :: [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with | true  -> [] | false  -> [(digitsOfInt n) / 10; n % 10];;\n", "out": "Characters 67-80:\n  | false -> (digitsOfInt n/10) :: [n%10];;\n              ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (digitsOfInt n/10) @ [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> ((digitsOfInt n) / 10) @ [n % 10];;\n", "out": "Characters 67-80:\n  | false -> (digitsOfInt n/10) @ [n%10];;\n              ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> [digitsOfInt n/10] @ [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> [(digitsOfInt n) / 10] @ [n % 10];;\n", "out": "Characters 67-80:\n  | false -> [digitsOfInt n/10] @ [n%10];;\n              ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> digitsOfInt n/10 @ [n%10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> ((digitsOfInt n) / 10) @ [n % 10];;\n", "out": "Characters 66-79:\n  | false -> digitsOfInt n/10 @ [n%10];;\n             ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> [n%10] @ digitsOfInt n/10", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> [n % 10] @ ((digitsOfInt n) / 10);;\n", "out": "Characters 68-69:\n  | false -> [n%10] @ digitsOfInt n/10;;\n               ^\nError: Unbound value %\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> digitsOfInt n div 10 :: [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> [digitsOfInt n div 10; n mod 10];;\n", "out": "Characters 66-77:\n  | false -> digitsOfInt n div 10 :: [n mod 10];;\n             ^^^^^^^^^^^\nError: This function has type int -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> digitsOfInt n/10 :: [n mod 10]", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> [(digitsOfInt n) / 10; n mod 10];;\n", "out": "Characters 66-79:\n  | false -> digitsOfInt n/10 :: [n mod 10];;\n             ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> n mod 10 :: digitsOfInt n/10", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: ((digitsOfInt n) / 10);;\n", "out": "Characters 78-91:\n  | false -> n mod 10 :: digitsOfInt n/10;;\n                         ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> n mod 10 :: (digitsOfInt n/10)", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: ((digitsOfInt n) / 10);;\n", "out": "Characters 79-92:\n  | false -> n mod 10 :: (digitsOfInt n/10);;\n                          ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (n mod 10) :: (digitsOfInt n/10)", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: ((digitsOfInt n) / 10);;\n", "out": "Characters 81-94:\n  | false -> (n mod 10) :: (digitsOfInt n/10);;\n                            ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (n mod 10) :: (digitsOfInt n - 10)", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: ((digitsOfInt n) - 10);;\n", "out": "Characters 81-94:\n  | false -> (n mod 10) :: (digitsOfInt n - 10);;\n                            ^^^^^^^^^^^^^\nError: This expression has type int list\n       but an expression was expected of type int\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> (n mod 10) :: (digitsOfInt (n/10))", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: (digitsOfInt (n / 10));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> n mod 10 :: digitsOfInt (n/10)", "min": "\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> (n mod 10) :: (digitsOfInt (n / 10));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| [] -> []\n| (h :: t) -> h :: listReverse t", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> h :: (listReverse t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| [] -> []\n| (h :: t) -> h :: listReverse t", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> h :: (listReverse t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec listReverse l =\nmatch l with\n| (h :: []) -> h\n| (h :: t)  -> listReverse t :: [h]", "min": "\nlet rec listReverse l =\n  match l with | h::[] -> h | h::t -> [listReverse t; h];;\n", "out": "Characters 69-82:\n  | (h :: t)  -> listReverse t :: [h];;\n                 ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (h :: t)  -> h :: listReverse t", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> h :: (listReverse t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (t :: h :: [])  -> h :: listReverse t::[]", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | t::h::[] -> [h; listReverse t];;\n", "out": "Characters 90-91:\n  | (t :: h :: [])  -> h :: listReverse t::[];;\n                                        ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "type", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (t :: h :: [])  -> h :: listReverse t", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | t::h::[] -> h :: (listReverse t);;\n", "out": "Characters 90-91:\n  | (t :: h :: [])  -> h :: listReverse t;;\n                                        ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (_ :: h :: [])  -> h :: listReverse []", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | _::h::[] -> h :: (listReverse []);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (t :: h :: [])  -> h :: listReverse []", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | t::h::[] -> h :: (listReverse []);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (h :: t)  -> t :: listReverse t", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> t :: (listReverse t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (h :: t)  -> listReverse t @ [h]", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> listReverse (n mod 10 :: digitsOfInt (n/10))", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> listReverse ((n mod 10) :: (digitsOfInt (n / 10)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec listReverse l =\nmatch l with\n| []\t    -> []\n| (h :: t)  -> appendLists(listReverse t, [h])", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> appendLists(digitsOfInt (n/10), [n mod 10])", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> appendLists ((digitsOfInt (n / 10)), [n mod 10]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> appendLists(digitsOfInt (n/10), [n mod 10])", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> appendLists ((digitsOfInt (n / 10)), [n mod 10]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec additivePersistence n = \nmatch arrayLen (digits n) = 1 with\n| true -> 0\n| false -> 1 + additivePersistence (digitSum (digits n))", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> appendLists ((digitsOfInt (n / 10)), [n mod 10]);;\n\nlet rec arrayLen l = match l with | [] -> 0 | h::t -> 1 + (arrayLen t);;\n\nlet rec digitSum dl = match dl with | [] -> 0 | h::t -> h + (digitSum t);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec additivePersistence n =\n  match (arrayLen (digits n)) = 1 with\n  | true  -> 0\n  | false  -> 1 + (additivePersistence (digitSum (digits n)));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nmatch arrayLen (digits n) = 1 with\n| true -> n\n| false -> digitalRoot (digitSum (digits n))", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> appendLists ((digitsOfInt (n / 10)), [n mod 10]);;\n\nlet rec arrayLen l = match l with | [] -> 0 | h::t -> 1 + (arrayLen t);;\n\nlet rec digitSum dl = match dl with | [] -> 0 | h::t -> h + (digitSum t);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec digitalRoot n =\n  match (arrayLen (digits n)) = 1 with\n  | true  -> n\n  | false  -> digitalRoot (digitSum (digits n));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitsOfInt n =\nmatch n <= 0 with\n| true -> []\n| false -> appendLists(digitsOfInt (n/10), [n mod 10])", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet rec digitsOfInt n =\n  match n <= 0 with\n  | true  -> []\n  | false  -> appendLists ((digitsOfInt (n / 10)), [n mod 10]);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let palindrome w = \nif (explode(w)) = (listReverse explode(w))\nthen true\nelse false", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n\nlet palindrome w =\n  if (explode w) = (listReverse explode w) then true else false;;\n", "out": "Characters 39-50:\n  if (explode(w)) = (listReverse explode(w))\n                     ^^^^^^^^^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "other", "in": "let palindrome w = \nif (explode(w)) = (listReverse explode(w))\nthen true\nelse false", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n\nlet palindrome w =\n  if (explode w) = (listReverse explode w) then true else false;;\n", "out": "Characters 39-50:\n  if (explode(w)) = (listReverse explode(w))\n                     ^^^^^^^^^^^\nError: This function has type 'a list -> 'a list\n       It is applied to too many arguments; maybe you forgot a `;'.\n"}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \nif (explode(w)) = (listReverse (explode(w)))\nthen true\nelse false", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n\nlet palindrome w =\n  if (explode w) = (listReverse (explode w)) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \nif explode(w) = listReverse (explode(w))\nthen true\nelse false", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n\nlet palindrome w =\n  if (explode w) = (listReverse (explode w)) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \nif explode(w) = listReverse (explode w)\nthen true\nelse false", "min": "\nlet rec appendLists (l1,l2) =\n  match l1 with | [] -> l2 | h::t -> h :: (appendLists (t, l2));;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> appendLists ((listReverse t), [h]);;\n\nlet palindrome w =\n  if (explode w) = (listReverse (explode w)) then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| (h::t) -> h + sumList t", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
