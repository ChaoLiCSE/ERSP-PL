{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| h::t -> h + (sumList t)", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| h::t -> h + (sumList t)", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = \n(*let finalList = [] in*)\nlet rec addPers_helper finalList l = \nmatch l with\n| [] -> finalList\n| h::t -> let finalList = h::finalList in\naddPers_helper finalList t\nin addPers_helper [] l", "min": "\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let listReverse l = \n(*let finalList = [] in*)\nlet rec addPers_helper finalList l = \nmatch l with\n| [] -> finalList\n| h::t -> let finalList = h::finalList in\naddPers_helper finalList t\nin addPers_helper [] l", "min": "\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digitsOfInt n = listReverse (backwardDigits n)", "min": "\nlet rec backwardDigits n =\n  if n <= 0\n  then []\n  else\n    (let last = n mod 10 in\n     let rest = n / 10 in last :: (backwardDigits rest));;\n\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n\nlet digitsOfInt n = listReverse (backwardDigits n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let digits n = digitsOfInt (abs n)", "min": "\nlet rec backwardDigits n =\n  if n <= 0\n  then []\n  else\n    (let last = n mod 10 in\n     let rest = n / 10 in last :: (backwardDigits rest));;\n\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n\nlet digitsOfInt n = listReverse (backwardDigits n);;\n\nlet digits n = digitsOfInt (abs n);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec digitalRoot n = \nif n < 10 && n >= 0 then n \nelse\nlet dig = digits n in\nlet sum = sumList dig in \ndigitalRoot sum", "min": "\nlet rec backwardDigits n =\n  if n <= 0\n  then []\n  else\n    (let last = n mod 10 in\n     let rest = n / 10 in last :: (backwardDigits rest));;\n\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n\nlet digitsOfInt n = listReverse (backwardDigits n);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec digitalRoot n =\n  if (n < 10) && (n >= 0)\n  then n\n  else (let dig = digits n in let sum = sumList dig in digitalRoot sum);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let palindrome w = \nlet paliChars = explode w in\nlet backChars = listReverse paliChars in\nif paliChars = backChars then true\nelse false", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet listReverse l =\n  let rec addPers_helper finalList l =\n    match l with\n    | [] -> finalList\n    | h::t -> let finalList = h :: finalList in addPers_helper finalList t in\n  addPers_helper [] l;;\n\nlet palindrome w =\n  let paliChars = explode w in\n  let backChars = listReverse paliChars in\n  if paliChars = backChars then true else false;;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| h::t -> h + (sumList t)", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| h::t -> h + (sumList t)", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "out": ""}]}
