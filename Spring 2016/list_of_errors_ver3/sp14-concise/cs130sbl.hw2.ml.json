{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 160-165:\n  helper (seen', rest') \n                 ^^^^^\nError: This expression has type bool but an expression was expected of type\n         'a list\n", "min": "\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = h in let rest' = List.mem h l in helper (seen', rest') in\n  List.rev (helper ([], l));;\n", "in": "let removeDuplicates l = \nlet rec helper (seen, rest) = match rest with \n| [] -> seen\n| h :: t -> \nlet seen' = h in\nlet rest' = List.mem h l in \nhelper (seen', rest') \nin\nList.rev (helper ([], l))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 162-167:\n  helper (seen', rest') \n                 ^^^^^\nError: This expression has type bool but an expression was expected of type\n         'a list\n", "min": "\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = [h] in let rest' = List.mem h l in helper (seen', rest') in\n  List.rev (helper ([], l));;\n", "in": "let removeDuplicates l = \nlet rec helper (seen, rest) = match rest with \n| [] -> seen\n| h :: t -> \nlet seen' = [h] in\nlet rest' = List.mem h l in \nhelper (seen', rest') \nin\nList.rev (helper ([], l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let buildCosine(e)                 = Cosine(e)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = failwith \"TBD\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> buildX \n| 1 -> buildSine(build (rand, depth-(depth -1)))\n| 2 -> buildTimes(build (rand, depth-(depth -2)), build(rand, depth-(depth -2)))"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 54-60:\n  | 0 -> buildX \n         ^^^^^^\nError: Unbound value buildX\nHint: Did you mean build?\n", "min": "\nlet rec build (rand,depth) =\n  match depth with\n  | 0 -> buildX\n  | 1 -> buildSine (build (rand, (depth - (depth - 1))))\n  | 2 ->\n      buildTimes\n        ((build (rand, (depth - (depth - 2)))),\n          (build (rand, (depth - (depth - 2)))));;\n", "in": "let rec build (rand, depth) = match depth with\n| 0 -> buildX \n| 1 -> (build (rand, depth-(depth -1)))\n| 2 -> buildTimes(build (rand, depth-(depth -2)), build(rand, depth-(depth -2)))"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 54-60:\n  | 0 -> buildX \n         ^^^^^^\nError: Unbound value buildX\nHint: Did you mean build?\n", "min": "\nlet rec build (rand,depth) =\n  match depth with\n  | 0 -> buildX\n  | 1 -> build (rand, (depth - (depth - 1)))\n  | 2 ->\n      buildTimes\n        ((build (rand, (depth - (depth - 2)))),\n          (build (rand, (depth - (depth - 2)))));;\n", "in": "let rec build (rand, depth) = match depth with\n| 0 -> buildX \n| 1 -> (build (rand, depth-(depth -1)))\n| 2 -> buildTimes(build (rand, depth-(depth -2)), build(rand, depth-(depth -2)))"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 54-60:\n  | 0 -> buildX \n         ^^^^^^\nError: Unbound value buildX\nHint: Did you mean build?\n", "min": "\nlet rec build (rand,depth) =\n  match depth with\n  | 0 -> buildX\n  | 1 -> build (rand, (depth - (depth - 1)))\n  | 2 ->\n      buildTimes\n        ((build (rand, (depth - (depth - 2)))),\n          (build (rand, (depth - (depth - 2)))));;\n", "in": "let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))"}, {"type": "scope", "out": "Characters 18-29:\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()));;\n  ^^^^^^^^^^^\nError: Unbound value buildThresh\n", "min": "\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n", "in": "let rec build (rand, depth) = failwith \"TBD\""}, {"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-4:\n  eval (sampleExpr1,0.5,0.2);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = eval (sampleExpr1, 0.5, 0.2);;\n", "in": "let rec eval (e,x,y) = match e with \n| buildX              -> x\n| buildY              -> y\n| buildSine(e)          -> sin(pi *. eval(e,x,y))\n| buildCosine(e)        -> cos(pi *. eval(e,x,y))\n| buildAverage(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| buildTimes(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)\n(* | PowerUp(e1,e2)   -> (abs(eval(e1,x,y))) ** (abs(eval(e2,x,y))) *)\n| buildSquare2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. +. (eval(e3,x,y))**2.)/. 2.     (* New Operator *)\n| buildThresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 39-45:\n  | BuildX()              -> x\n    ^^^^^^\nError: Unbound constructor BuildX\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | BuildX () -> x\n  | VarY  -> y\n  | Sine e -> sin (pi *. (eval (e, x, y)))\n  | Cosine e -> cos (pi *. (eval (e, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Square2 (e1,e2,e3) ->\n      (sqrt\n         ((((eval (e1, x, y)) ** 2.) +. ((eval (e2, x, y)) ** 2.)) +.\n            ((eval (e3, x, y)) ** 2.)))\n        /. 2.\n  | Thresh (a,b,a_less,b_less) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (a_less, x, y)\n      else eval (b_less, x, y);;\n", "in": "eval (Times(VarX,VarY), 0.5, -0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Times(VarX,VarY), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = eval ((Times (VarX, VarY)), 0.5, (-0.5));;\n", "in": "eval (Cosine(Times(VarX,VarY)), 0.5,-0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Cosine(Times(VarX,VarY)), 0.5,-0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = eval ((Cosine (Times (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.5, -0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.3 ,0.3)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.3 ,0.3);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n", "in": "eval (sampleExpr1,0.5,0.2)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-4:\n  eval (sampleExpr1,0.5,0.2);;\n  ^^^^\nError: Unbound value eval\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | PowerUp of expr* expr\n  | Square2 of expr* expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = eval (sampleExpr1, 0.5, 0.2);;\n", "in": "let rec eval (e,x,y) = match e with \n| VarX              -> x\n| VarY              -> y\n| Sine(e)          -> sin(pi *. eval(e,x,y))\n| Cosine(e)        -> cos(pi *. eval(e,x,y))\n| Average(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| Times(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)\n(* | PowerUp(e1,e2)   -> (abs(eval(e1,x,y))) ** (abs(eval(e2,x,y))) *)\n| Square2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. +. (eval(e3,x,y))**2.)/. 2.     (* New Operator *)\n| Thresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}, {"type": "", "out": "", "min": "", "in": "eval (Times(VarX,VarY), 0.5, -0.5)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "eval (sampleExprSquare2, -1.,0.5)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> buildX() \n| 1 -> buildSine(build (rand, depth-(depth -1)))\n| 2 -> buildTimes(build (rand, depth-(depth -2)), build(rand, depth-(depth -2)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(0,1) = 1\nthen buildTangent(build(rand, depth - 1)), (build(rand, depth - 1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(0,1) = 1\nthen buildTangent((build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildAverage((build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(0,1) = 1\nthen buildCosine((build(rand, depth - 1)))\nelse buildAverage((build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(0,1) = 1\nthen buildCosine((build(rand, depth - 1)))\nelse buildSine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(1,2) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(1,2) = 1\nthen buildCosine((build(rand, depth - 1)))\nelse buildSine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(1,2) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(2,3) = 2\nthen buildCosine((build(rand, depth - 1)))\nelse buildSine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(0,1) = 1\nthen buildCosine((build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,5) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,10) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,20) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((build(rand, depth - 1)), (build(rand, depth - 1)))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d, k, l) = match l with\n| [] -> -1\n| (s, v) :: tl ->\nif s = k \nthen v\nelse assoc (d, k, tl)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,9) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,8) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildAverage((buildCosine(buildX())), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,8) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nif rand(4,7) = 4\nthen buildCosine((build(rand, depth - 1)))\nelse if rand(4,7) = 7\nthen buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\nelse if rand(4,7) = 5\nthen buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\nelse buildSquare2((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) \nmatch r with  \n| 4 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| 4 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> match rand(3, 100) with\n| rand(3,100) < 10 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> match let r = rand(3, 100) with\n| r < 10 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| _ when r < 20 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| _ when r < 20 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ when r < 30 && r > 20 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| _ when r < 20 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| _ when r < 30 && r > 20 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 20 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r < 30 && r > 20 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 20 -> buildAverage((build(rand, depth - 1)), (buildSine(build(rand, depth - 1))))\n| r when r < 30 && r > 20 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 20 -> buildAverage((build(rand, depth - 1)), (buildSine(build(rand, depth - 1))))\n| r when r < 30 && r > 20 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine((build(rand, depth - 1)))), (buildCosine((build(rand, depth - 1)))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 10 -> buildAverage((build(rand, depth - 1)), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildTimes((buildCosine((build(rand, depth - 1)))), (buildCosine((build(rand, depth - 1)))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((buildCosine(rand, depth - 1)), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((build(rand, depth - 1)), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r < 20 && r > 10 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r < 10 && r > 5 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1))),(build(rand, depth - 1))\n| r when r < 10 && r > 5 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 100) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((buildCosine(build(rand, depth - 1))), (buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 200) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(3, 200) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 200) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 300) in\nmatch r with  \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| r when r > 35 && r < 40 -> buildCosine(buildSine(buildX()))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildSine(buildX())\n| r when r > 35 && r < 40 -> buildCosine(buildSine(buildY()))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes(buildCosine(buildSine(build(rand, depth - 1))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes((buildCosine(buildSine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1)))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 5 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildCosine(buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildCosine((build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (build(rand, depth - 1)))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildSquare2((build(rand, depth - 1)),(buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| _ -> buildSine(build(rand, depth - 1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 40 && r < 50 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 40 && r < 70 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 40 && r < 90 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage((buildSine(build(rand, depth - 1))), (buildY()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage((buildSine(build(rand, depth - 1))), (buildX()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage((buildSine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage((buildY(), (buildX())))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage(buildTimes((build(rand, depth - 1)),buildY()), buildCosine(buildX()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 150) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage(buildTimes((build(rand, depth - 1)),buildY()), buildCosine(buildX()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildCosine(build(rand, depth - 1))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 200) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage(buildTimes((build(rand, depth - 1)),buildY()), buildCosine(buildX()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand, depth) = match depth with\n| 0 -> \nif rand(0,1) = 1\nthen buildX()\nelse buildY()\n| _ -> \nlet r = rand(0, 75) in\nmatch r with \n| r when r < 2 -> buildAverage((build(rand, depth - 1)),(build(rand, depth - 1)))\n| r when r = 3 -> buildSine(buildX())\n| r when r >= 4 && r <= 5 -> buildTimes((build(rand, depth - 1)),buildY())\n| r when r < 10 && r > 5 -> buildThresh((build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| r when r < 25 && r > 20 -> buildSine(build(rand, depth - 1))\n| r when r > 25 && r < 35 -> buildCosine((build(rand, depth - 1)))\n| r when r > 35 && r < 40 -> buildCosine(buildSine(build(rand, depth - 1)))\n| r when r > 55 && r < 65 -> buildAverage(buildTimes((build(rand, depth - 1)),buildY()), buildCosine(buildX()))\n| r when r > 40 && r < 55 -> buildSquare2((buildX()), (build(rand, depth - 1)), (build(rand, depth - 1)))\n| _ -> buildTimes((buildCosine(build(rand, depth - 1))), (buildSine(build(rand, depth - 1))))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with \n| VarX             -> x\n| VarY             -> y\n| Sine(e)          -> sin(pi *. eval(e,x,y))\n| Cosine(e)        -> cos(pi *. eval(e,x,y))\n| Average(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| Times(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)                         (* New Operator *)\n| Tangent(e1,e2)   -> \nif eval(e1,x,y) = 0\nthen Nil\nelse eval(e1,x,y) /. eval(e1,x,y) \n| Square2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. \n+. (eval(e3,x,y))**2.)/. 2.  (* New Operator *) \n| Thresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-4:\n  eval (sampleExprTangent, -1.,0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval (sampleExprTangent, (-1.), 0.5);;\n", "in": "let rec eval (e,x,y) = match e with \n| VarX             -> x\n| VarY             -> y\n| Sine(e)          -> sin(pi *. eval(e,x,y))\n| Cosine(e)        -> cos(pi *. eval(e,x,y))\n| Average(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| Times(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)                         (* New Operator *)\n| Tangent(e1,e2)   -> \nif eval(e1,x,y) = 0.\nthen Nil\nelse eval(e1,x,y) /. eval(e1,x,y) \n| Square2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. \n+. (eval(e3,x,y))**2.)/. 2.  (* New Operator *) \n| Thresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}, {"type": "scope", "out": "Characters 39-43:\n  | VarX             -> x\n    ^^^^\nError: Unbound constructor VarX\n", "min": "\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e -> sin (pi *. (eval (e, x, y)))\n  | Cosine e -> cos (pi *. (eval (e, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Tangent (e1,e2) ->\n      if (eval (e1, x, y)) = 0.\n      then Nil\n      else (eval (e1, x, y)) /. (eval (e1, x, y))\n  | Square2 (e1,e2,e3) ->\n      (sqrt\n         ((((eval (e1, x, y)) ** 2.) +. ((eval (e2, x, y)) ** 2.)) +.\n            ((eval (e3, x, y)) ** 2.)))\n        /. 2.\n  | Thresh (a,b,a_less,b_less) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (a_less, x, y)\n      else eval (b_less, x, y);;\n", "in": "eval (Times(VarX,VarY), 0.5, -0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Times(VarX,VarY), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Times (VarX, VarY)), 0.5, (-0.5));;\n", "in": "eval (Cosine(Times(VarX,VarY)), 0.5,-0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Cosine(Times(VarX,VarY)), 0.5,-0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Cosine (Times (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.5, -0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.3 ,0.3)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.3 ,0.3);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n", "in": "eval (sampleExpr1,0.5,0.2)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (sampleExpr1,0.5,0.2);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval (sampleExpr1, 0.5, 0.2);;\n", "in": "eval (sampleExprTangent, -1.,0.5)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-4:\n  eval (sampleExprTangent, -1.,0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval (sampleExprTangent, (-1.), 0.5);;\n", "in": "let rec eval (e,x,y) = match e with \n| VarX             -> x\n| VarY             -> y\n| Sine(e)          -> sin(pi *. eval(e,x,y))\n| Cosine(e)        -> cos(pi *. eval(e,x,y))\n| Average(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| Times(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)                         (* New Operator *)\n| Tangent(e1,e2)   -> \nif eval(e1,x,y) = 0.\nthen _\nelse eval(e1,x,y) /. eval(e1,x,y) \n| Square2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. \n+. (eval(e3,x,y))**2.)/. 2.  (* New Operator *) \n| Thresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Times(VarX,VarY), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Times (VarX, VarY)), 0.5, (-0.5));;\n", "in": "eval (Cosine(Times(VarX,VarY)), 0.5,-0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Cosine(Times(VarX,VarY)), 0.5,-0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Cosine (Times (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.5, -0.5)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.5, -0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n", "in": "eval (Sine(Average(VarX,VarY)), 0.3 ,0.3)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (Sine(Average(VarX,VarY)), 0.3 ,0.3);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n", "in": "eval (sampleExpr1,0.5,0.2)"}, {"type": "scope", "out": "Characters 0-4:\n  eval (sampleExpr1,0.5,0.2);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval (sampleExpr1, 0.5, 0.2);;\n", "in": "eval (sampleExprTangent, -1.,0.5)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-4:\n  eval (sampleExprTangent, -1.,0.5);;\n  ^^^^\nError: Unbound value eval\n", "min": "\nlet _ = eval (sampleExprTangent, (-1.), 0.5);;\n", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Diff2    of expr * expr                       (* New Operator *)\n| Square2  of expr * expr * expr                (* New Operator *)\n| Thresh   of expr * expr * expr * expr"}, {"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX                -> \"x\"\n| VarY                -> \"y\"\n| Sine(e)             -> \"sin(pi*\" ^ exprToString e ^ \")\" \n| Cosine(e)           -> \"cos(pi*\" ^ exprToString e ^ \")\"\n| Average(e1,e2)      -> \"((\"^ exprToString e1 ^\"+\"^ exprToString e2 ^ \")/2)\"\n| Times(e1,e2)        -> exprToString e1 ^\"*\"^ exprToString e2\n| Diff2(e1,e2)        -> \"((\"^ exprToString e1 ^\"-\"^ exprToString e2 ^ \")/2)\" (* New Operator *)    \n| Square2(e1,e2,e3)   -> \"sqrt(\" ^ exprToString e1 ^\"^2\" ^\"+\"^ exprToString e2  \n^\"^2\" ^\"+\"^ exprToString e3  ^\"^2\" ^\")/2\"            (* New Operator *)\n| Thresh(e1,e2,e3,e4) -> \"(\"^ exprToString e1 ^\"<\" ^ exprToString e2 ^\"?\"^ exprToString e3\n^\":\"^ exprToString e4 ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString sampleExprDiff2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString sampleExpr1"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = match e with\n| VarX                -> \"x\"\n| VarY                -> \"y\"\n| Sine(e)             -> \"sin(pi*\" ^ exprToString e ^ \")\" \n| Cosine(e)           -> \"cos(pi*\" ^ exprToString e ^ \")\"\n| Average(e1,e2)      -> \"((\"^ exprToString e1 ^\"+\"^ exprToString e2 ^ \")/2)\"\n| Times(e1,e2)        -> exprToString e1 ^\"*\"^ exprToString e2\n| Diff2(e1,e2)        -> \"((\"^ exprToString e1 ^\"-\"^ exprToString e2 ^ \")/2)\" (* New Operator *)    \n| Square2(e1,e2,e3)   -> \"sqrt(\" ^ exprToString e1 ^\"^2\" ^\"+\"^ exprToString e2  \n^\"^2\" ^\"+\"^ exprToString e3  ^\"^2\" ^\")/2\"            (* New Operator *)\n| Thresh(e1,e2,e3,e4) -> \"(\"^ exprToString e1 ^\"<\" ^ exprToString e2 ^\"?\"^ exprToString e3\n^\":\"^ exprToString e4 ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString sampleExprDiff2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString sampleExprDiff2"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString sampleExprDiff2"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-12:\n  exprToString sampleExprDiff2;;\n  ^^^^^^^^^^^^\nError: Unbound value exprToString\n", "min": "\nlet _ = exprToString sampleExprDiff2;;\n", "in": "exprToString sampleExprDiff2"}, {"type": "scope", "out": "Characters 24-31:\n  let sampleExprSquare2 = Square2(VarX,VarY,Cosine(VarX));;\n                          ^^^^^^^\nError: Unbound constructor Square2\n", "min": "\nlet sampleExprSquare2 = Square2 (VarX, VarY, (Cosine VarX));;\n", "in": "exprToString sampleExprSquare2"}, {"type": "scope", "out": "Characters 0-12:\n  exprToString sampleExprSquare2;;\n  ^^^^^^^^^^^^\nError: Unbound value exprToString\n", "min": "\nlet _ = exprToString sampleExprSquare2;;\n", "in": "let buildX()                       = VarX"}, {"type": "scope", "out": "Characters 37-41:\n  let buildX()                       = VarX;;\n                                       ^^^^\nError: Unbound constructor VarX\n", "min": "\nlet buildX () = VarX;;\n", "in": "let buildY()                       = VarY"}, {"type": "scope", "out": "Characters 37-41:\n  let buildY()                       = VarY;;\n                                       ^^^^\nError: Unbound constructor VarY\n", "min": "\nlet buildY () = VarY;;\n", "in": "let buildSine(e)                   = Sine(e)"}, {"type": "scope", "out": "Characters 37-41:\n  let buildSine(e)                   = Sine(e);;\n                                       ^^^^\nError: Unbound constructor Sine\n", "min": "\nlet buildSine e = Sine e;;\n", "in": "let buildCosine(e)                 = Cosine(e)"}, {"type": "scope", "out": "Characters 37-43:\n  let buildCosine(e)                 = Cosine(e);;\n                                       ^^^^^^\nError: Unbound constructor Cosine\n", "min": "\nlet buildCosine e = Cosine e;;\n", "in": "let buildAverage(e1,e2)            = Average(e1,e2)"}, {"type": "scope", "out": "Characters 37-44:\n  let buildAverage(e1,e2)            = Average(e1,e2);;\n                                       ^^^^^^^\nError: Unbound constructor Average\n", "min": "\nlet buildAverage (e1,e2) = Average (e1, e2);;\n", "in": "let buildTimes(e1,e2)              = Times(e1,e2)"}, {"type": "scope", "out": "Characters 37-42:\n  let buildTimes(e1,e2)              = Times(e1,e2);;\n                                       ^^^^^\nError: Unbound constructor Times\n", "min": "\nlet buildTimes (e1,e2) = Times (e1, e2);;\n", "in": "let buildDiff2(e1,e2)              = Diff2(e1,e2)"}, {"type": "scope", "out": "Characters 37-42:\n  let buildDiff2(e1,e2)              = Diff2(e1,e2);;\n                                       ^^^^^\nError: Unbound constructor Diff2\n", "min": "\nlet buildDiff2 (e1,e2) = Diff2 (e1, e2);;\n", "in": "let buildSquare2(e1,e2,e3)         = Square2(e1,e2,e3)"}, {"type": "scope", "out": "Characters 37-44:\n  let buildSquare2(e1,e2,e3)         = Square2(e1,e2,e3);;\n                                       ^^^^^^^\nError: Unbound constructor Square2\n", "min": "\nlet buildSquare2 (e1,e2,e3) = Square2 (e1, e2, e3);;\n", "in": "let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)"}, {"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = match e with \n| VarX             -> x\n| VarY             -> y\n| Sine(e)          -> sin(pi *. eval(e,x,y))\n| Cosine(e)        -> cos(pi *. eval(e,x,y))\n| Average(e1,e2)   -> (eval(e1,x,y) +. eval(e2,x,y)) /. 2.\n| Times(e1,e2)     -> eval(e1,x,y) *. eval(e2,x,y)                         (* New Operator *)\n| Diff2(e1,e2)     -> (eval(e1,x,y) -. eval(e2,x,y)) /. 2.\n| Square2(e1,e2,e3)-> sqrt((eval(e1,x,y))**2. +. (eval(e2,x,y))**2. \n+. (eval(e3,x,y))**2.)/. 2.  (* New Operator *) \n| Thresh(a,b,a_less,b_less) -> \nif eval(a,x,y) < eval(b,x,y)\nthen eval(a_less, x, y)\nelse eval(b_less, x, y)"}]}
