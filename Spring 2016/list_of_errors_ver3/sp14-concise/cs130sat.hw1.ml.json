{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n[] -> 0\n| xs -> List.hd xs + (sumList List.tl xs)", "out": "Characters 66-73:\n  | xs -> List.hd xs + (sumList List.tl xs);;\n                        ^^^^^^^\nError: This function has type int list -> int\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | xs -> (List.hd xs) + (sumList List.tl xs);;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n[] -> 0\n| xs -> List.hd xs + (sumList (List.tl xs))", "out": "", "min": "\nlet rec sumList xs =\n  match xs with | [] -> 0 | xs -> (List.hd xs) + (sumList (List.tl xs));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n[] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse  digitsOfInt (n/10) @ n mod 10", "out": "Characters 69-77:\n  else  digitsOfInt (n/10) @ n mod 10;;\n                             ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n < 0 then [] else (digitsOfInt (n / 10)) @ (n mod 10);;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse  digitsOfInt (n/10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse  (digitsOfInt (n/10) )@ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse (digitsOfInt (n/10) )@ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse digitsOfInt (n/10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse digitsOfInt (n / 10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then [0]\nelse digitsOfInt (n / 10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [0] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse digitsOfInt (n / 10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse digitsOfInt (n / 10) @ [n mod 10]", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n =\nif n > 9 then additivePersistence (List.fold_left (+) (digitsOfInt n))\nelse n", "out": "Characters 42-61:\n  if n > 9 then additivePersistence (List.fold_left (+) (digitsOfInt n))\n                ^^^^^^^^^^^^^^^^^^^\nError: Unbound value additivePersistence\n", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet additivePersistence n =\n  if n > 9\n  then additivePersistence (List.fold_left (+) (digitsOfInt n))\n  else n;;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let additiveHelper n acc = \nif n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1)\nelse acc", "out": "Characters 42-56:\n  if n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1)\n                ^^^^^^^^^^^^^^\nError: Unbound value additiveHelper\n", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet additiveHelper n acc =\n  if n > 9 then additiveHelper (sumList (digitsOfInt n)) (acc + 1) else acc;;\n", "type": "scope"}, {"in": "let additivePersistence n = additiveHelper n 0", "out": "Characters 28-42:\n  let additivePersistence n = additiveHelper n 0;;\n                              ^^^^^^^^^^^^^^\nError: Unbound value additiveHelper\n", "min": "\nlet additivePersistence n = additiveHelper n 0;;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let additiveHelper n acc = \nif n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1)\nelse acc", "out": "Characters 42-56:\n  if n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1)\n                ^^^^^^^^^^^^^^\nError: Unbound value additiveHelper\n", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet additiveHelper n acc =\n  if n > 9 then additiveHelper (sumList (digitsOfInt n)) (acc + 1) else acc;;\n", "type": "scope"}, {"in": "let additivePersistence n = additiveHelper n 0", "out": "Characters 28-42:\n  let additivePersistence n = additiveHelper n 0;;\n                              ^^^^^^^^^^^^^^\nError: Unbound value additiveHelper\n", "min": "\nlet additivePersistence n = additiveHelper n 0;;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec additiveHelper n acc = \nif n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1)\nelse acc", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet rec additiveHelper n acc =\n  if n > 9 then additiveHelper (sumList (digitsOfInt n)) (acc + 1) else acc;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitalHelper n = \nif n > 9 then digitalHelper (sumList(digitsOfInt n))\nelse n", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet rec digitalHelper n =\n  if n > 9 then digitalHelper (sumList (digitsOfInt n)) else n;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with | [] -> [] | x::xs -> listReverse xs @ [x]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs -> (listReverse xs) @ [x];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with | [] -> [] | x::xs -> listReverse xs @ [x]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs -> (listReverse xs) @ [x];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let palindrome w = if explode w = listReverse (explode w) then true else false", "out": "", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs -> (listReverse xs) @ [x];;\n\nlet palindrome w =\n  if (explode w) = (listReverse (explode w)) then true else false;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let palindrome w =  explode w = listReverse (explode w)", "out": "", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::xs -> (listReverse xs) @ [x];;\n\nlet palindrome w = (explode w) = (listReverse (explode w));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additiveHelper n acc = \nif n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1) else acc", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet rec additiveHelper n acc =\n  if n > 9 then additiveHelper (sumList (digitsOfInt n)) (acc + 1) else acc;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additiveHelper n acc = \nif n > 9 then additiveHelper (sumList(digitsOfInt n)) (acc + 1) else acc", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;\n\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n\nlet rec additiveHelper n acc =\n  if n > 9 then additiveHelper (sumList (digitsOfInt n)) (acc + 1) else acc;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | x::xs -> x + (sumList xs);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append( (digitsOfInt (n / 10))[n mod 10])", "out": "Characters 77-99:\n  else append( (digitsOfInt (n / 10))[n mod 10]);;\n               ^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       This is not a function; it cannot be applied.\n", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append ((digitsOfInt (n / 10)) [n mod 10]);;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append( (digitsOfInt (n / 10)) [n mod 10])", "out": "Characters 77-99:\n  else append( (digitsOfInt (n / 10)) [n mod 10]);;\n               ^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       This is not a function; it cannot be applied.\n", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append ((digitsOfInt (n / 10)) [n mod 10]);;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append( (digitsOfInt (n / 10)) [n mod 10])", "out": "Characters 77-99:\n  else append( (digitsOfInt (n / 10)) [n mod 10]);;\n               ^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       This is not a function; it cannot be applied.\n", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append ((digitsOfInt (n / 10)) [n mod 10]);;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append (digitsOfInt (n / 10)) [n mod 10]", "out": "", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append (digitsOfInt (n / 10)) [n mod 10]", "out": "", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append (digitsOfInt (n / 10)) [n mod 10]", "out": "", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n < 0 then []\nelse if n = 0 then []\nelse append (digitsOfInt (n / 10)) [n mod 10]", "out": "", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let digits n = digitsOfInt (abs n)", "out": "", "min": "\nlet rec append first second =\n  match first with | [] -> second | h::t -> h :: (append t second);;\n\nlet rec digitsOfInt n =\n  if n < 0\n  then []\n  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;\n\nlet digits n = digitsOfInt (abs n);;\n", "type": ""}]}
