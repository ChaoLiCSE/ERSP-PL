{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::tl -> (h*h) + sqsum tl\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = match x with | [] -> a | h::tl -> (h * h) + (sqsum tl) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 72-77:\n  | h::tl -> (h*h) + sqsum tl\n                     ^^^^^\nError: Unbound value sqsum\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::tl -> (h*h) + (sqsum tl)\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = match x with | [] -> a | h::tl -> (h * h) + (sqsum tl) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 73-78:\n  | h::tl -> (h*h) + (sqsum tl)\n                      ^^^^^\nError: Unbound value sqsum\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::tl -> f (a tl) + (h*h)\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = match x with | [] -> a | h::tl -> (f (a tl)) + (h * h) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 64-65:\n  | h::tl -> f (a tl) + (h*h)\n             ^\nError: Unbound value f\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::tl -> f(a tl) + (h*h)\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let f a x = match x with | [] -> a | h::tl -> (f (a tl)) + (h * h) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 64-65:\n  | h::tl -> f(a tl) + (h*h)\n             ^\nError: Unbound value f\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet rec f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::xs' -> (h*h) + (sqsum xs')\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let rec f a x = match x with | [] -> a | h::xs' -> (h * h) + (sqsum xs') in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 78-83:\n  | h::xs' -> (h*h) + (sqsum xs')\n                       ^^^^^\nError: Unbound value sqsum\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet rec f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::xs' -> (h*h) + (sqsum (f a xs'))\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let rec f a x =\n    match x with | [] -> a | h::xs' -> (h * h) + (sqsum (f a xs')) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 78-83:\n  | h::xs' -> (h*h) + (sqsum (f a xs'))\n                       ^^^^^\nError: Unbound value sqsum\n"}]}
{"event": "eval", "ocaml": [{"type": "scope", "in": "let sqsum xs = \nlet rec f a x = (*failwith \"to be implemented\"*) \nmatch x with\n| [] -> a\n| h::tl -> (h*h) + sqsum (f a tl) tl\nin\nlet base = (*failwith \"to be implemented\"*) \n0\nin\nList.fold_left f base xs", "min": "\nlet sqsum xs =\n  let rec f a x =\n    match x with | [] -> a | h::tl -> (h * h) + (sqsum (f a tl) tl) in\n  let base = 0 in List.fold_left f base xs;;\n", "out": "Characters 76-81:\n  | h::tl -> (h*h) + sqsum (f a tl) tl\n                     ^^^^^\nError: Unbound value sqsum\n"}]}
