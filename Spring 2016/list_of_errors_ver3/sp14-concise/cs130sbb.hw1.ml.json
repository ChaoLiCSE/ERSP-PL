{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n[] -> 0\n| h::t -> h + (sumList t)", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = failwith \"TBD:digitsOfInt\"", "out": "", "min": "\nlet rec digitsOfInt n = failwith \"TBD:digitsOfInt\";;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n[] -> t\n| h::t -> [h]::digistOfInt(t)", "out": "Characters 44-45:\n  [] -> t\n        ^\nError: Unbound value t\n", "min": "\nlet rec digitsOfInt n =\n  match n with | [] -> t | h::t -> [h] :: (digistOfInt t);;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n[] -> h\n| h::t -> [h]::digistOfInt(t)", "out": "Characters 44-45:\n  [] -> h\n        ^\nError: Unbound value h\n", "min": "\nlet rec digitsOfInt n =\n  match n with | [] -> h | h::t -> [h] :: (digistOfInt t);;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n[] -> []\n| h::t -> [h]::digistOfInt(t)", "out": "Characters 62-73:\n  | h::t -> [h]::digistOfInt(t);;\n                 ^^^^^^^^^^^\nError: Unbound value digistOfInt\nHint: Did you mean digitsOfInt?\n", "min": "\nlet rec digitsOfInt n =\n  match n with | [] -> [] | h::t -> [h] :: (digistOfInt t);;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n[] -> []\n| h::t -> [h]::digitstOfInt t", "out": "Characters 62-74:\n  | h::t -> [h]::digitstOfInt t;;\n                 ^^^^^^^^^^^^\nError: Unbound value digitstOfInt\nHint: Did you mean digitsOfInt?\n", "min": "\nlet rec digitsOfInt n =\n  match n with | [] -> [] | h::t -> [h] :: (digitstOfInt t);;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n[] -> []\n| h::t -> [h]::digitsOfInt t", "out": "", "min": "\nlet rec digitsOfInt n =\n  match n with | [] -> [] | h::t -> [h] :: (digitsOfInt t);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = match n with \n0 -> []\n| n -> [n % 10]::digitsOfInt (n/10)", "out": "Characters 56-57:\n  | n -> [n % 10]::digitsOfInt (n/10);;\n            ^\nError: Unbound value %\n", "min": "\nlet rec digitsOfInt n =\n  match n with | 0 -> [] | n -> [n % 10] :: (digitsOfInt (n / 10));;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10)::n mod 10\nelse []", "out": "Characters 39-56:\n  if n > 0 then digitsOfInt(n/10)::n mod 10\n                ^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) :: (n mod 10) else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt n/10::n mod 10\nelse []", "out": "Characters 39-52:\n  if n > 0 then digitsOfInt n/10::n mod 10\n                ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then ((digitsOfInt n) / 10) :: (n mod 10) else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then n/10::n mod 10\nelse []", "out": "Characters 44-52:\n  if n >0 then n/10::n mod 10\n                     ^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         int list\n", "min": "\nlet rec digitsOfInt n = if n > 0 then (n / 10) :: (n mod 10) else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then n/10::[n mod 10]\nelse []", "out": "", "min": "\nlet rec digitsOfInt n = if n > 0 then [n / 10; n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then digitsOfInt n/10::[n mod 10]\nelse []", "out": "Characters 38-51:\n  if n >0 then digitsOfInt n/10::[n mod 10]\n               ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then [(digitsOfInt n) / 10; n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then (digitsOfInt n/10)::[n mod 10]\nelse []", "out": "Characters 39-52:\n  if n >0 then (digitsOfInt n/10)::[n mod 10]\n                ^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then [(digitsOfInt n) / 10; n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then (digitsOfInt n/10)@[n mod 10]\nelse []", "out": "Characters 38-56:\n  if n >0 then (digitsOfInt n/10)@[n mod 10]\n               ^^^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then ((digitsOfInt n) / 10) @ [n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then digitsOfInt n/10@[n mod 10]\nelse []", "out": "Characters 38-54:\n  if n >0 then digitsOfInt n/10@[n mod 10]\n               ^^^^^^^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then ((digitsOfInt n) / 10) @ [n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then [digitsOfInt n/10]::[n mod 10]\nelse []", "out": "Characters 39-52:\n  if n >0 then [digitsOfInt n/10]::[n mod 10]\n                ^^^^^^^^^^^^^\nError: This expression has type 'a list list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then [[(digitsOfInt n) / 10]; n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n[] -> 0\n| h::t -> h + (sumList t)", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n >0 then n::[n mod 10]\nelse []", "out": "", "min": "\nlet rec digitsOfInt n = if n > 0 then [n; n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let digits n = digitsOfInt (abs n)", "out": "", "min": "\nlet rec digitsOfInt n = if n > 0 then [n; n mod 10] else [];;\n\nlet digits n = digitsOfInt (abs n);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> t::[listReverse h]", "out": "Characters 74-75:\n  | h::t -> t::[listReverse h];;\n                            ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> [t; listReverse h];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = match n with\n| [] -> []\n| h :: t -> h + additivePersistence t", "out": "Characters 72-93:\n  | h :: t -> h + additivePersistence t;;\n                  ^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec additivePersistence n =\n  match n with | [] -> [] | h::t -> h + (additivePersistence t);;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \n\nif n >0 then n::[n mod 10]", "out": "Characters 40-42:\n  if n >0 then n::[n mod 10];;\n                ^^\nError: This variant expression is expected to have type unit\n       The constructor :: does not belong to type unit\n", "min": "\nlet rec digitsOfInt n = if n > 0 then [n; n mod 10];;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n[] -> 0\n| h::t -> h + (sumList t)", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \n\nif n > 0 then digitsOfInt n :: n mod 10", "out": "Characters 54-56:\n  if n > 0 then digitsOfInt n :: n mod 10;;\n                              ^^\nError: This variant expression is expected to have type unit\n       The constructor :: does not belong to type unit\n", "min": "\nlet rec digitsOfInt n = if n > 0 then (digitsOfInt n) :: (n mod 10);;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \n\nif n > 0 then (n mod 10) :: digitsOfInt (n/10)", "out": "Characters 51-53:\n  if n > 0 then (n mod 10) :: digitsOfInt (n/10);;\n                           ^^\nError: This variant expression is expected to have type unit\n       The constructor :: does not belong to type unit\n", "min": "\nlet rec digitsOfInt n = if n > 0 then (n mod 10) :: (digitsOfInt (n / 10));;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \n\nif n > 0 then (n mod 10) :: (digitsOfInt (listReverse(n/10)))\nelse []", "out": "", "min": "\nlet rec listReverse l = failwith \"TBD\";;\n\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (digitsOfInt (listReverse (n / 10))) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \n\nif n > 0 then listReverse (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec listReverse l = failwith \"TBD\";;\n\nlet rec digitsOfInt n =\n  if n > 0 then (listReverse (n mod 10)) :: (digitsOfInt (n / 10)) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "if n > 0 then (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "Characters 3-4:\n  if n > 0 then (n mod 10) :: (digitsOfInt (n/10))\n     ^\nError: Unbound value n\n", "min": "\nlet rec listReverse l = failwith \"TBD\";;\n\nlet rec digitsOfInt n =\n  if n > 0 then (listReverse (n mod 10)) :: (digitsOfInt (n / 10)) else [];;\n\nlet _ = if n > 0 then (n mod 10) :: (digitsOfInt (n / 10)) else [];;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (digitsOfInt (n / 10)) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (digitsOfInt (n / 10)) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (digitsOfInt (n / 10)) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (n mod 10) :: (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (digitsOfInt (n / 10)) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (n mod 10) :: listReverse (digitsOfInt (n/10))\nelse []", "out": "", "min": "\nlet rec listReverse l = failwith \"TBD\";;\n\nlet rec digitsOfInt n =\n  if n > 0 then (n mod 10) :: (listReverse (digitsOfInt (n / 10))) else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then (digitsOfInt (n/10)) :: [n mod 10]\nelse []", "out": "Characters 39-59:\n  if n > 0 then (digitsOfInt (n/10)) :: [n mod 10]\n                ^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then [digitsOfInt (n / 10); n mod 10] else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsofInt(n/10) :: (n mod 10) \nelse []", "out": "Characters 39-50:\n  if n > 0 then digitsofInt(n/10) :: (n mod 10) \n                ^^^^^^^^^^^\nError: Unbound value digitsofInt\nHint: Did you mean digitsOfInt?\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsofInt (n / 10)) :: (n mod 10) else [];;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) :: (n mod 10) \nelse []", "out": "Characters 39-56:\n  if n > 0 then digitsOfInt(n/10) :: (n mod 10) \n                ^^^^^^^^^^^^^^^^^\nError: This expression has type 'a list\n       but an expression was expected of type 'a\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) :: (n mod 10) else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ (n mod 10) \nelse []", "out": "Characters 59-69:\n  if n > 0 then digitsOfInt(n/10) @ (n mod 10) \n                                    ^^^^^^^^^^\nError: This expression has type int but an expression was expected of type\n         'a list\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ (n mod 10) else [];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > -1 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > (-1) then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitsOfInt n = \nif n > 0 then digitsOfInt(n/10) @ [(n mod 10)] \nelse []", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = match n with\n| [] -> []\n| h :: t -> t + digitsOfInt (additivePersistence h)", "out": "Characters 68-69:\n  | h :: t -> t + digitsOfInt (additivePersistence h);;\n              ^\nError: This expression has type 'a list\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec additivePersistence n =\n  match n with | [] -> [] | h::t -> t + (digitsOfInt (additivePersistence h));;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nif n < 10 then count\nelse (sumList (digitsOfInt n), count + 1)", "out": "Characters 44-49:\n  if n < 10 then count\n                 ^^^^^\nError: Unbound value count\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  if n < 10 then count else ((sumList (digitsOfInt n)), (count + 1));;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse (sumList (digitsOfInt n), count + 1)", "out": "Characters 72-108:\n  else (sumList (digitsOfInt n), count + 1);;\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type 'a * 'b\n       but an expression was expected of type int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in\n  if n < 10 then count else ((sumList (digitsOfInt n)), (count + 1));;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse sumList (digitsOfInt n) count + 1", "out": "Characters 72-79:\n  else sumList (digitsOfInt n) count + 1;;\n       ^^^^^^^\nError: This function has type int list -> int\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in\n  if n < 10 then count else (sumList (digitsOfInt n) count) + 1;;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in if n < 10 then count else sumList (digitsOfInt n);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let palindrome w = \nif listReverse(explode(w))  = explode(w) then true\nelse false", "out": "", "min": "\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l = failwith \"TBD\";;\n\nlet palindrome w =\n  if (listReverse (explode w)) = (explode w) then true else false;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> t::[listReverse h]", "out": "Characters 74-75:\n  | h::t -> t::[listReverse h];;\n                            ^\nError: This expression has type 'a but an expression was expected of type\n         'a list\n       The type variable 'a occurs inside 'a list\n", "min": "\nlet rec listReverse l = match l with | [] -> [] | h::t -> [t; listReverse h];;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t @ [h]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n[] -> 0\n| h::t -> h + (sumList t)", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n| h::t -> listReverse t @ [h]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n(* | h::t -> t::[listReverse h] *)\n| h::t -> listReverse t @ [h]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n(* | h::t -> t::[listReverse h] *)\n| h::t -> listReverse t @ [h]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec listReverse l = match l with\n| [] -> []\n(* | h::t -> t::[listReverse h] *)\n| h::t -> listReverse t @ [h]", "out": "", "min": "\nlet rec listReverse l =\n  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in if n < 10 then count else sumList (digitsOfInt n);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse count + 1 sumList(digitsOfInt n)", "out": "Characters 80-81:\n  else count + 1 sumList(digitsOfInt n);;\n               ^\nError: This expression has type int\n       This is not a function; it cannot be applied.\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in\n  if n < 10 then count else count + (1 sumList (digitsOfInt n));;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then count\nelse count + 1 in sumList(digitsOfInt n)", "out": "Characters 105-106:\n  else count + 1 in sumList(digitsOfInt n);;\n                                        ^\nError: Unbound value n\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet _ =\n  let additivePersistence n =\n    let count = 0 in if n < 10 then count else count + 1 in\n  sumList (digitsOfInt n);;\n", "type": "scope"}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then 1\nelse 1 + sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in if n < 10 then 1 else 1 + (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then 1\nelse 1 + sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in if n < 10 then 1 else 1 + (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \nlet count = 0 in\nif n < 10 then 1\nelse 1 + sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n =\n  let count = 0 in if n < 10 then 1 else 1 + (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \n1 + sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n = 1 + (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \n1 + sumList(digitsOfInt n)", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet additivePersistence n = 1 + (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence sumList(digitsOfInt n)", "out": "Characters 59-78:\n  else 1 + additivePersistence sumList(digitsOfInt n);;\n           ^^^^^^^^^^^^^^^^^^^\nError: This function has type int -> int\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence sumList (digitsOfInt n));;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitalRoot n = \nlet sum = 0 in\nif n < 10 then n + sum\nelse sum = digitalRoot(sumList(digitsOfInt n))", "out": "Characters 68-109:\n  else sum = digitalRoot(sumList(digitsOfInt n));;\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type bool but an expression was expected of type\n         int\n", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec digitalRoot n =\n  let sum = 0 in\n  if n < 10 then n + sum else sum = (digitalRoot (sumList (digitsOfInt n)));;\n", "type": "type"}]}
{"event": "eval", "ocaml": [{"in": "let rec digitalRoot n = \nlet sum = 0 in\nif n < 10 then n\nelse digitalRoot(sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec digitalRoot n =\n  let sum = 0 in if n < 10 then n else digitalRoot (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitalRoot n = \nif n < 10 then n\nelse digitalRoot(sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else additivePersistence (sumList (digitsOfInt n));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 1\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec additivePersistence n = \nif n < 10 then 0\nelse 1 + additivePersistence (sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec additivePersistence n =\n  if n < 10 then 0 else 1 + (additivePersistence (sumList (digitsOfInt n)));;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec digitalRoot n = \nif n < 10 then n\nelse digitalRoot(sumList(digitsOfInt n))", "out": "", "min": "\nlet rec digitsOfInt n =\n  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;\n\nlet rec digitalRoot n =\n  if n < 10 then n else digitalRoot (sumList (digitsOfInt n));;\n", "type": ""}]}
