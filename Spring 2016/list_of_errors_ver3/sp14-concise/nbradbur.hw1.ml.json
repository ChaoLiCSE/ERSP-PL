{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n| [] -> []\n| x::xs -> listReverse xs @ [x]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nlet l = [] in\nlet m = n mod 10 in\nmatch m with\n| n -> n::l\n| _ -> n::digitsOfInt (n/10)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 36-38:\n  if n<0 then [];;\n              ^^\nError: This variant expression is expected to have type unit\n       The constructor [] does not belong to type unit\n", "min": "\nlet rec digitsOfInt n = if n < 0 then [];;\n", "in": "let rec digitsOfInt n =\nif n<0 then []"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 50-51:\n  if n<0 then l;;\n              ^\nError: This expression has type 'a list\n       but an expression was expected of type unit\n", "min": "\nlet rec digitsOfInt n = let l = [] in if n < 0 then l;;\n", "in": "let rec digitsOfInt n =\nlet l = [] in\nif n<0 then l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec digitsOfInt n =\nlet l = [] in\nif n<0 then l else l"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 53-65:\n  if n<0 then l else digitsHelper n l;;\n                     ^^^^^^^^^^^^\nError: Unbound value digitsHelper\n", "min": "\nlet digitsOfInt n = let l = [] in if n < 0 then l else digitsHelper n l;;\n", "in": "let digitsOfInt n =\nlet l = [] in\nif n<0 then l else digitsHelper n l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nlet l = [] in\nif n<0 then l else digitsHelper n l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nlet l = [] in\nif n<0 then l else digitsHelper n l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nlet l = [] in\nif n<0 then l else digitsHelper n l"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nlet l = [] in\nif n<0 then l else digitsHelper n l"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 57-64:\n  let x = sumList l in\n          ^^^^^^^\nError: Unbound value sumList\n", "min": "\nlet rec digitsHelper n l =\n  if n < 10 then n :: l else digitsHelper (n / 10) ((n mod 10) :: l);;\n\nlet digitsOfInt n = let l = [] in if n < 0 then l else digitsHelper n l;;\n\nlet rec digitalRoot n =\n  let l = digitsOfInt n in\n  let x = sumList l in if x = n then x else digitalRoot x;;\n", "in": "let rec digitalRoot n =\nlet l = digitsOfInt n in\nlet x = sumList l in\nif x = n then x else digitalRoot x"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec listReverse l = \nmatch l with\n| [] -> []\n| x::xs -> listReverse xs @ [x]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let palindrome w = \nlet normal = explode w in\nlet reverse = listReverse (explode w) in\npalinHelper normal reverse"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = \nmatch xs with\n| [] -> 0\n| x::xs -> x + sumList xs"}]}
