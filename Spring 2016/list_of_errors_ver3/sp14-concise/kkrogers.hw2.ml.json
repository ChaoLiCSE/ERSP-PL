{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
{"event": "eval", "ocaml": [{"type": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)", "min": "\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | front::back ->\n      (match front with | (x,y) -> if x = k then y else assoc (d, k, back));;\n", "out": ""}]}
