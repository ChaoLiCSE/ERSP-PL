{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) =\nmatch l with\n[] -> d\n|front::back ->\nmatch front with\n(x,y) ->\nif (x=k)\nthen y\nelse assoc (d,k,back)"}]}
