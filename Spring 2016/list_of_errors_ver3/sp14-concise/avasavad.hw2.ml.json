{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 168-169:\n  helper (d,k,l) t\n                 ^\nError: This expression has type ('a * 'b) list\n       but an expression was expected of type 'b * 'a * 'c\n", "min": "\nlet rec assoc (d,k,l) =\n  let temp = l in\n  let rec helper acc (d,k,l) =\n    match temp with\n    | [] -> d\n    | h::t ->\n        (match h with | (s,v) -> if s = k then v else helper (d, k, l) t) in\n  helper (d, k, l) acc;;\n", "in": "let rec assoc (d,k,l) = \nlet temp = l in\nlet rec helper acc (d,k,l) = \nmatch temp with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper (d,k,l) t\nin helper (d,k,l) acc"}, {"type": "scope", "out": "Characters 0-9:\n  uncomment after implementing assoc;;\n  ^^^^^^^^^\nError: Unbound value uncomment\n", "min": "\nlet _ = uncomment after implementing assoc;;\n", "in": "uncomment after implementing assoc"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 178-185:\n  in helper (d,k,l) acc;;\n            ^^^^^^^\nError: This expression has type 'a * 'b * 'c\n       but an expression was expected of type ('d * 'e) list\n", "min": "\nlet rec assoc (d,k,l) =\n  let acc = l in\n  let rec helper acc (d,k,l) =\n    match acc with\n    | [] -> d\n    | h::t ->\n        (match h with | (s,v) -> if s = k then v else helper t (d, k, l)) in\n  helper (d, k, l) acc;;\n", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper (d,k,l) acc"}, {"type": "scope", "out": "Characters 0-9:\n  uncomment after implementing assoc;;\n  ^^^^^^^^^\nError: Unbound value uncomment\n", "min": "\nlet _ = uncomment after implementing assoc;;\n", "in": "uncomment after implementing assoc"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec wwhile (f,b) = \nmatch f b with\n(k,v) -> \nif v\nthen wwhile (f, k)\nelse k"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile ((let g x = let xx = (f x) in (xx, xx!=x) in g),b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let fixpoint (f,b) = wwhile ((let g x = let xx = (f x) in (xx, xx!=x) in g),b)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let buildX()                       = VarX"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,2) with\n1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1,7) with\n1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,2) with\n1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1,7) with\n1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 0-1:\n  l;;\n  ^\nError: Unbound value l\n", "min": "\nlet _ = l;;\n", "in": "et _ = removeDuplicates [1;6;2;4;12;2;13;6;9]"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if (List.mem h seen)\nthen \nseen\nelse \nh :: seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(3,8) with\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 496-499:\n  | Cube a -> \"(\" ^ (exprToString a) ^ \"*\" ^ (exprToString a) ^ \"*\" (exprToString a) ^ \")\";;\n                                                                ^^^\nError: This expression has type string\n       This is not a function; it cannot be applied.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Cube a ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"*\" ^ ((exprToString a) ^ ((\"*\" (exprToString a)) ^ \")\"))));;\n", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Cube a -> \"(\" ^ (exprToString a) ^ \"*\" ^ (exprToString a) ^ \"*\" ^ (exprToString a) ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\n| Cube     of expr\n| Addition of expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 576-592:\n  | Addition (a,b) -> \"(\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) \")\";;\n                                                     ^^^^^^^^^^^^^^^^\nError: This expression has type string\n       This is not a function; it cannot be applied.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Cube a ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"*\" ^ ((exprToString a) ^ (\"*\" ^ ((exprToString a) ^ \")\")))))\n  | Addition (a,b) ->\n      \"(\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) \")\")));;\n", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Cube a -> \"(\" ^ (exprToString a) ^ \"*\" ^ (exprToString a) ^ \"*\" ^ (exprToString a) ^ \")\"\n| Addition (a,b) -> \"(\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 385-401:\n  | Cube a -> (exprToString a) * (exprToString a) *(exprToString a);;\n              ^^^^^^^^^^^^^^^^\nError: This expression has type string but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Cube a ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"*\" ^ ((exprToString a) ^ (\"*\" ^ ((exprToString a) ^ \")\")))))\n  | Addition (a,b) ->\n      \"(\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")\")));;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Cube a -> ((exprToString a) * (exprToString a)) * (exprToString a);;\n", "in": "let rec eval (e,x,y) = \nmatch e with\nVarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Cube a -> (eval a) * (eval  a) *(eval a)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 391-392:\n  | Cube a -> (eval a) * (eval  a) *(eval a);;\n                    ^\nError: This expression has type expr but an expression was expected of type\n         expr * float * float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Cube a -> ((eval a) * (eval a)) * (eval a);;\n", "in": "let rec eval (e,x,y) = \nmatch e with\nVarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Cube a -> (eval (a,x,y) ) * (eval  (a,x,y) ) * (eval (a,x,y) )"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 385-400:\n  | Cube a -> (eval (a,x,y) ) * (eval  (a,x,y) ) * (eval (a,x,y) );;\n              ^^^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Cube a -> ((eval (a, x, y)) * (eval (a, x, y))) * (eval (a, x, y));;\n", "in": "let rec eval (e,x,y) = \nmatch e with\nVarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Cube a -> (eval (a,x,y) ) *. (eval  (a,x,y) ) *. (eval (a,x,y) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = \nmatch e with\nVarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Cube a -> (eval (a,x,y) ) *. (eval  (a,x,y) ) *. (eval (a,x,y) )\n| Addition (a,b) -> eval(a,x,y) +. eval"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 475-479:\n  | Addition (a,b) -> eval(a,x,y) +. eval;;\n                                     ^^^^\nError: This expression has type expr * float * float -> float\n       but an expression was expected of type float\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Cube a -> ((eval (a, x, y)) *. (eval (a, x, y))) *. (eval (a, x, y))\n  | Addition (a,b) -> (eval (a, x, y)) +. eval;;\n", "in": "let rec eval (e,x,y) = \nmatch e with\nVarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Cube a -> (eval (a,x,y) ) *. (eval  (a,x,y) ) *. (eval (a,x,y) )\n| Addition (a,b) -> eval(a,x,y) +. eval(b,x,y)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(3,10) with\n(* | 1 -> buildX()\n| 2 -> buildY() *)\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(4,10) with\n(* | 1 -> buildX()\n| 2 -> buildY() *)\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1,10) with\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )\n| _ -> buildAddition ( build(rand,depth) )"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 76-82:\n  | 1 -> buildX()\n         ^^^^^^\nError: Unbound value buildX\nHint: Did you mean build?\n", "min": "\nlet rec build (rand,depth) =\n  if depth = 0\n  then match rand (1, 3) with | 1 -> buildX () | 2 -> buildY ()\n  else\n    (match rand (1, 10) with\n     | 3 -> buildSine (build (rand, (depth - 1)))\n     | 4 -> buildCosine (build (rand, (depth - 1)))\n     | 5 ->\n         buildAverage\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 6 ->\n         buildTimes\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 7 ->\n         buildThresh\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n             (build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 8 -> buildCube (build (rand, (depth - 1)))\n     | 9 ->\n         buildAddition\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | _ -> buildAddition (build (rand, depth)));;\n", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1,10) with\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )\n| _ -> build(rand,depth)"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 76-82:\n  | 1 -> buildX()\n         ^^^^^^\nError: Unbound value buildX\nHint: Did you mean build?\n", "min": "\nlet rec build (rand,depth) =\n  if depth = 0\n  then match rand (1, 3) with | 1 -> buildX () | 2 -> buildY ()\n  else\n    (match rand (1, 10) with\n     | 3 -> buildSine (build (rand, (depth - 1)))\n     | 4 -> buildCosine (build (rand, (depth - 1)))\n     | 5 ->\n         buildAverage\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 6 ->\n         buildTimes\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 7 ->\n         buildThresh\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n             (build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 8 -> buildCube (build (rand, (depth - 1)))\n     | 9 ->\n         buildAddition\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | _ -> build (rand, depth));;\n", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 10) with\n| 1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAdd ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "scope", "out": "Characters 527-535:\n  | 9 -> buildAdd ( build(rand,depth-1),  build(rand,depth-1) );;\n         ^^^^^^^^\nError: Unbound value buildAdd\nHint: Did you mean build, buildY or buildX?\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Cube of expr\n  | Addition of expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildCube e = Cube e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  if depth = 0\n  then match rand (1, 3) with | 1 -> buildX () | 2 -> buildY ()\n  else\n    (match rand (1, 10) with\n     | 1 -> buildX ()\n     | 2 -> buildY ()\n     | 3 -> buildSine (build (rand, (depth - 1)))\n     | 4 -> buildCosine (build (rand, (depth - 1)))\n     | 5 ->\n         buildAverage\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 6 ->\n         buildTimes\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 7 ->\n         buildThresh\n           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n             (build (rand, (depth - 1))), (build (rand, (depth - 1))))\n     | 8 -> buildCube (build (rand, (depth - 1)))\n     | 9 ->\n         buildAdd ((build (rand, (depth - 1))), (build (rand, (depth - 1)))));;\n", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\n| _ -> build(rand,depth)\nelse \nmatch rand(1, 10) with\n| 1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )\n| _ -> build(rand,depth)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if (List.mem h seen)\nthen \nseen\nelse \nh :: seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 10) with\n| 1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 10) with\n| 1 -> buildX()\n| 2 -> buildY()\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildCosine( build(rand,depth-1) )\n| 5 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 6 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 7 -> buildThresh( build(rand,depth-1), build(rand,depth-1), build(rand,depth-1), build(rand,depth-1) )\n| 8 -> buildCube( build(rand,depth-1) )\n| 9 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(3, 18) with\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildSine( build(rand,depth-1) ) \n| 5 -> buildSine( build(rand,depth-1) ) \n| 6 -> buildSine( build(rand,depth-1) ) \n| 7 -> buildCosine( build(rand,depth-1) )\n| 8 -> buildCosine( build(rand,depth-1) )\n| 9 -> buildCosine( build(rand,depth-1) )\n| 10 -> buildCosine( build(rand,depth-1) )\n| 11 -> buildCosine( build(rand,depth-1) )\n| 12 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 13 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 14 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 15 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 16 -> buildCube( build(rand,depth-1) )\n| 17 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 18) with\n| 1 -> buildSine( build(rand,depth-1) ) \n| 2 -> buildCosine( build(rand,depth-1) )\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildSine( build(rand,depth-1) ) \n| 5 -> buildSine( build(rand,depth-1) ) \n| 6 -> buildSine( build(rand,depth-1) ) \n| 7 -> buildCosine( build(rand,depth-1) )\n| 8 -> buildCosine( build(rand,depth-1) )\n| 9 -> buildCosine( build(rand,depth-1) )\n| 10 -> buildCosine( build(rand,depth-1) )\n| 11 -> buildCosine( build(rand,depth-1) )\n| 12 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 13 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 14 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 15 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 16 -> buildCube( build(rand,depth-1) )\n| 17 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth = 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 18) with\n| 1 -> build(rand,depth-1)\n| 2 -> buildCosine( build(rand,depth-1) )\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildSine( build(rand,depth-1) ) \n| 5 -> buildSine( build(rand,depth-1) ) \n| 6 -> buildSine( build(rand,depth-1) ) \n| 7 -> buildCosine( build(rand,depth-1) )\n| 8 -> buildCosine( build(rand,depth-1) )\n| 9 -> buildCosine( build(rand,depth-1) )\n| 10 -> buildCosine( build(rand,depth-1) )\n| 11 -> buildCosine( build(rand,depth-1) )\n| 12 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 13 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 14 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 15 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 16 -> buildCube( build(rand,depth-1) )\n| 17 -> buildAddition ( build(rand,depth-1),  build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 510-522:\n  | Arc (a,b,c) -> \"sin(pi*\" ^ (exprToString a (b,c) ) ^ \")\";;\n                                ^^^^^^^^^^^^\nError: This function has type expr -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Arc of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Arc (a,b,c) -> \"sin(pi*\" ^ ((exprToString a (b, c)) ^ \")\");;\n", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Arc (a,b,c) -> \"sin(pi*\" ^ (exprToString (a (b,c)) ) ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 524-525:\n  | Arc (a,b,c) -> \"sin(pi*\" ^ (exprToString (a (b,c)) ) ^ \")\";;\n                                              ^\nError: This expression has type expr\n       This is not a function; it cannot be applied.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Arc of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Arc (a,b,c) -> \"sin(pi*\" ^ ((exprToString (a (b, c))) ^ \")\");;\n", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\n| Tan      of expr\n| Sin_Avg  of expr * expr * expr"}, {"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Arc (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")\""}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 482-485:\n  | Arc (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")\";;\n    ^^^\nError: This variant pattern is expected to have type expr\n       The constructor Arc does not belong to type expr\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Arc of expr* expr* expr;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Arc (a,b,c) ->\n      \"sin(pi*(\" ^\n        ((exprToString a) ^\n           (\"+\" ^ ((exprToString b) ^ ((exprToString c) ^ \")\"))));;\n", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")/3)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString Sin_Avg(1,2,3)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 0-12:\n  exprToString Sin_Avg(1,2,3);;\n  ^^^^^^^^^^^^\nError: This function has type expr -> string\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Sin_Avg (a,b,c) ->\n      \"sin(pi*(\" ^\n        ((exprToString a) ^\n           (\"+\" ^ ((exprToString b) ^ ((exprToString c) ^ \")/3)\"))));;\n\nlet _ = exprToString Sin_Avg (1, 2, 3);;\n", "in": "exprToString (Sin_Avg(1,2,3))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 22-23:\n  exprToString (Sin_Avg(1,2,3));;\n                        ^\nError: This expression has type int but an expression was expected of type\n         expr\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Sin_Avg (a,b,c) ->\n      \"sin(pi*(\" ^\n        ((exprToString a) ^\n           (\"+\" ^ ((exprToString b) ^ ((exprToString c) ^ \")/3)\"))));;\n\nlet _ = exprToString (Sin_Avg (1, 2, 3));;\n", "in": "exprToString (Sin_Avg(VarX(),VarY(),VarX()))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 22-28:\n  exprToString (Sin_Avg(VarX(),VarY(),VarX()));;\n                        ^^^^^^\nError: The constructor VarX expects 0 argument(s),\n       but is applied here to 1 argument(s)\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Sin_Avg (a,b,c) ->\n      \"sin(pi*(\" ^\n        ((exprToString a) ^\n           (\"+\" ^ ((exprToString b) ^ ((exprToString c) ^ \")/3)\"))));;\n\nlet _ = exprToString (Sin_Avg ((VarX ()), (VarY ()), (VarX ())));;\n", "in": "exprToString (Sin_Avg (VarX(), VarY(), VarX()))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 23-29:\n  exprToString (Sin_Avg (VarX(), VarY(), VarX()));;\n                         ^^^^^^\nError: The constructor VarX expects 0 argument(s),\n       but is applied here to 1 argument(s)\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine a -> \"sin(pi*\" ^ ((exprToString a) ^ \")\")\n  | Cosine a -> \"cos(pi*\" ^ ((exprToString a) ^ \")\")\n  | Average (a,b) ->\n      \"((\" ^ ((exprToString a) ^ (\"+\" ^ ((exprToString b) ^ \")/2)\")))\n  | Times (a,b) -> (exprToString a) ^ (\"*\" ^ (exprToString b))\n  | Thresh (a,b,c,d) ->\n      \"(\" ^\n        ((exprToString a) ^\n           (\"<\" ^\n              ((exprToString b) ^\n                 (\"?\" ^ ((exprToString c) ^ (\":\" ^ ((exprToString d) ^ \")\")))))))\n  | _ -> \"_\"\n  | Tan a -> \"tan(pi*\" ^ ((exprToString a) ^ \")\")\n  | Sin_Avg (a,b,c) ->\n      \"sin(pi*(\" ^\n        ((exprToString a) ^\n           (\"+\" ^ ((exprToString b) ^ ((exprToString c) ^ \")/3)\"))));;\n\nlet _ = exprToString (Sin_Avg ((VarX ()), (VarY ()), (VarX ())));;\n", "in": "exprToString (Sin_Avg (Average(VarX(),VarY()), VarY(), VarX()))"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 18-24:\n  let x = (Sin_Avg (VarX(), VarY(), VarX()));;\n                    ^^^^^^\nError: The constructor VarX expects 0 argument(s),\n       but is applied here to 1 argument(s)\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet x = Sin_Avg ((VarX ()), (VarY ()), (VarX ()));;\n", "in": "exprToString (Sin_Avg (VarX, VarY, VarX))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString (Tan VarX)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| _ -> \"_\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")/3)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")/3)\"\n| | _ -> \"_\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")/3)\"\n| _ -> \"_\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString (Tan VarX)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ (exprToString c) ^ \")/3)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*((\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ \"+\" ^ (exprToString c) ^ \"))/3)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*(\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ \"+\" ^ (exprToString c) ^ \")/3)\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec exprToString e = \nmatch e with\nVarX -> \"x\"\n| VarY -> \"y\"\n| Sine a -> \"sin(pi*\" ^ (exprToString a) ^ \")\"\n| Cosine a -> \"cos(pi*\" ^ (exprToString a) ^ \")\"\n| Average (a,b) -> \"((\" ^ (exprToString a) ^ \"+\" ^ (exprToString b) ^ \")/2)\"\n| Times (a,b) -> (exprToString a) ^ \"*\" ^ (exprToString b)\n| Thresh (a,b,c,d) -> \"(\" ^ (exprToString a) ^ \"<\" ^ (exprToString b) ^ \"?\" ^ (exprToString c) ^ \":\" ^ (exprToString d) ^ \")\"\n| Tan a -> \"tan(pi*\" ^ (exprToString a) ^ \")\"\n| Sin_Avg (a,b,c) -> \"sin(pi*((\" ^ (exprToString  a) ^ \"+\" ^ (exprToString  b) ^ \"+\" ^ (exprToString c) ^ \")/3))\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "exprToString (Sin_Avg (VarX,VarY,VarX))"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\n| Tan      of expr\n| Sin_Avg  of expr * expr * expr"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 463-465:\n  | Sin_Avg (a,b,c) -> eval( eval (a, sin(pi*x), sin(pi*y)) , eval (b, sin(pi*x), sin(pi*y)), eval (c, sin(pi*x), sin(pi*y)) );;\n                                          ^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sin_Avg of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Tan a -> eval (a, (tan (pi *. x)), (tan (pi *. y)))\n  | Sin_Avg (a,b,c) ->\n      eval\n        ((eval (a, (sin (pi * x)), (sin (pi * y)))),\n          (eval (b, (sin (pi * x)), (sin (pi * y)))),\n          (eval (c, (sin (pi * x)), (sin (pi * y)))));;\n", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let buildSine_Avg(e1,e2)           = Sine_Avg(e1,e2, e3)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let buildSine_Avg(e1,e2, e3)           = Sine_Avg(e1,e2, e3)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = \nmatch e with\n| VarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Tan a -> eval(a, tan(pi*.(x)), tan(pi*.(y)) )\n| Sine_Avg (a,b,c) -> eval( eval (a, sin(pi*,x), sin(pi*,y)) , eval (b, sin(pi*,x), sin(pi*,y)), eval (c, sin(pi,*x), sin(pi*,y)) )/.(3.0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec eval (e,x,y) = \nmatch e with\n| VarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Tan a -> eval(a, tan(pi*.(x)), tan(pi*.(y)) )\n| Sine_Avg (a,b,c) -> eval( eval (a, sin(pi *, (x) ), sin(pi*,y)) , eval (b, sin(pi*,x), sin(pi*,y)), eval (c, sin(pi,*x), sin(pi*,y)) )/.(3.0)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 451-485:\n  | Sine_Avg (a,b,c) -> eval( eval (a, sin(pi*.(x)), sin(pi*.y)) , eval (b, sin(pi*.x), sin(pi*.y)), eval (c, sin(pi*.x), sin(pi*.y)) )/.(3.0);;\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         expr\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sine_Avg of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Tan a -> eval (a, (tan (pi *. x)), (tan (pi *. y)))\n  | Sine_Avg (a,b,c) ->\n      (eval\n         ((eval (a, (sin (pi *. x)), (sin (pi *. y)))),\n           (eval (b, (sin (pi *. x)), (sin (pi *. y)))),\n           (eval (c, (sin (pi *. x)), (sin (pi *. y))))))\n        /. 3.0;;\n", "in": "let rec eval (e,x,y) = \nmatch e with\n| VarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Tan a -> eval(a, tan(pi*.(x)), tan(pi*.(y)) )\n| Sine_Avg (a,b,c) -> ( eval (a, sin(pi*.(x)), sin(pi*.y)) + eval (b, sin(pi*.x), sin(pi*.y)) + eval (c, sin(pi*.x), sin(pi*.y)) )/.(3.0)"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 447-481:\n  | Sine_Avg (a,b,c) -> ( eval (a, sin(pi*.(x)), sin(pi*.y)) + eval (b, sin(pi*.x), sin(pi*.y)) + eval (c, sin(pi*.x), sin(pi*.y)) )/.(3.0);;\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This expression has type float but an expression was expected of type\n         int\n", "min": "\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Tan of expr\n  | Sine_Avg of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine a -> eval (a, (sin (pi *. x)), (sin (pi *. y)))\n  | Cosine a -> eval (a, (cos (pi *. x)), (cos (pi *. y)))\n  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0\n  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))\n  | Thresh (a,b,c,d) ->\n      if (eval (a, x, y)) < (eval (b, x, y))\n      then eval (c, x, y)\n      else eval (d, x, y)\n  | Tan a -> eval (a, (tan (pi *. x)), (tan (pi *. y)))\n  | Sine_Avg (a,b,c) ->\n      (((eval (a, (sin (pi *. x)), (sin (pi *. y)))) +\n          (eval (b, (sin (pi *. x)), (sin (pi *. y)))))\n         + (eval (c, (sin (pi *. x)), (sin (pi *. y)))))\n        /. 3.0;;\n", "in": "let rec eval (e,x,y) = \nmatch e with\n| VarX -> x\n| VarY -> y\n| Sine a -> eval(a, sin(pi*.(x)), sin(pi*.(y)) )\n| Cosine a -> eval(a, cos(pi*.(x)), cos(pi*.(y)) )\n| Average (a,b) -> ( (eval (a,x,y))  +. (eval(b,x,y) ))/.(2.0)\n| Times (a,b) -> ( (eval (a,x,y)) *. (eval (b,x,y)) )\n| Thresh (a, b, c, d)-> if (eval (a,x,y))<(eval (b,x,y))\nthen (eval (c,x,y))\nelse (eval (d,x,y))\n| Tan a -> eval(a, tan(pi*.(x)), tan(pi*.(y)) )\n| Sine_Avg (a,b,c) -> ( eval (a, sin(pi*.(x)), sin(pi*.y)) +. eval (b, sin(pi*.x), sin(pi*.y)) +. eval (c, sin(pi*.x), sin(pi*.y)) )/.(3.0)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec build (rand,depth) =\nif depth <= 0 \nthen\nmatch rand(1,3) with\n| 1 -> buildX()\n| 2 -> buildY()\nelse \nmatch rand(1, 18) with\n| 1 -> build(rand,depth-1)\n| 2 -> buildCosine( build(rand,depth-1) )\n| 3 -> buildSine( build(rand,depth-1) ) \n| 4 -> buildSine( build(rand,depth-1) ) \n| 5 -> buildSine( build(rand,depth-1) ) \n| 6 -> buildSine( build(rand,depth-1) ) \n| 7 -> buildCosine( build(rand,depth-1) )\n| 8 -> buildCosine( build(rand,depth-1) )\n| 9 -> buildCosine( build(rand,depth-1) )\n| 10 -> buildCosine( build(rand,depth-1) )\n| 11 -> buildCosine( build(rand,depth-1) )\n| 12 -> buildAverage( (build(rand,depth-1)), build(rand,depth-1) )\n| 13 -> buildTimes( (build(rand,depth-1)), build(rand,depth-1) )\n| 14 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 15 -> buildThresh(  buildCosine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ), buildSine( build(rand,depth-2) ) , buildCosine( build(rand,depth-2) ) )\n| 16 -> buildTan( build(rand,depth-1) )\n| 17 -> buildSine_Avg ( build(rand,depth-1),  build(rand,depth-1), build(rand,depth-1) )"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let doRandomGray (depth,seed1,seed2) =\n(* Initialize random-number generator g *)\nlet g = makeRand(seed1,seed2) in\n(* Generate a random expression, and turn it into an ML function *)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(* 301 x 301 pixels *)\nlet n = 150 in\n(* Emit the picture *)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec assoc (d,k,l) = \nlet acc = l in\nlet rec helper acc (d,k,l) = \nmatch acc with\n| [] -> d\n| h::t -> match h with\n| (s,v) ->\nif s = k\nthen \nv\nelse\nhelper t (d,k,l)\nin helper acc (d,k,l)"}]}
