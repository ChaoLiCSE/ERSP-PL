{"event": "eval", "ocaml": [{"in": "let stringOfList f l =\nlet newStr = sepConcat \"; \" (List.map f l) in\n\"[\" ^ newStr ^ \"]\"", "out": "Characters 36-45:\n  let newStr = sepConcat \"; \" (List.map f l) in\n               ^^^^^^^^^\nError: Unbound value sepConcat\n", "min": "\nlet stringOfList f l =\n  let newStr = sepConcat \"; \" (List.map f l) in \"[\" ^ (newStr ^ \"]\");;\n", "type": "scope"}, {"in": "let rec clone x n = \nif n <= 0 then [] \nelse x::clone x (n-1)", "out": "", "min": "\nlet rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;\n", "type": ""}]}
