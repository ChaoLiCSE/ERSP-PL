{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = failwith \"TBD:sumList\""}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nif n = 0 \nthen []\nelse \ndigithelper n []"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nif n <= 0 \nthen []\nelse \ndigithelper n []"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let digitsOfInt n =\nif n <= 0 \nthen []\nelse \ndigithelper n []"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 8-19:\n  let _ = digitsOfInt -12;;\n          ^^^^^^^^^^^\nError: This expression has type int -> int list\n       but an expression was expected of type int\n", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet _ = digitsOfInt - 12;;\n", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "type", "out": "Characters 62-65:\n  addPHelper pos;;\n             ^^^\nError: This expression has type int list\n       but an expression was expected of type int\n", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n =\n  let lst = digitsOfInt n in\n  let sum = sumList lst in if sum < 10 then sum else addPHelper sum;;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet additivePersistence n = let pos = digits n in addPHelper pos;;\n", "in": "let rec addPHelper n pos =\nlet sum = sumList pos in \nif sum < 10\nthen sum\nelse addPHelper sum"}, {"type": "type", "out": "Characters 79-93:\n  else addPHelper sum;;\n       ^^^^^^^^^^^^^^\nError: This expression has type int list -> int\n       but an expression was expected of type int\n", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n pos =\n  let sum = sumList pos in if sum < 10 then sum else addPHelper sum;;\n", "in": "let additivePersistence n = \nlet pos = digits n in\naddPHelper n pos"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n pos =\nlet sum = sumList pos in \nif sum < 10\nthen sum\nelse addPHelper sum pos"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet count = count + 1 in\nif sum < 10\nthen count\nelse addPHelper sum and count = count + 1"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet count = count + 1 in\nif sum < 10\nthen count\nelse addPHelper sum"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n c=\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet c = c + 1 in\nif sum > 10\nthen c\nelse addPHelper sum c"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n c=\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nc + 1 \nif sum > 10\nthen c\nelse addPHelper sum c"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+1)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let additivePersistence n = \naddPHelper n 0"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+2)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+1)"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
{"event": "eval", "ocaml": [{"type": "", "out": "", "min": "", "in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl"}]}
