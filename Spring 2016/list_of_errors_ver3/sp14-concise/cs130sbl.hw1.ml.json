{"event": "eval", "ocaml": [{"in": "let rec sumList xs = failwith \"TBD:sumList\"", "out": "", "min": "\nlet rec sumList xs = failwith \"TBD:sumList\";;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let digitsOfInt n =\nif n = 0 \nthen []\nelse \ndigithelper n []", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x <= 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n = 0 then [] else digithelper n [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let digitsOfInt n =\nif n <= 0 \nthen []\nelse \ndigithelper n []", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x <= 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let digitsOfInt n =\nif n <= 0 \nthen []\nelse \ndigithelper n []", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n pos =\nlet sum = sumList pos in \nif sum < 10\nthen sum\nelse addPHelper sum", "out": "Characters 79-93:\n  else addPHelper sum;;\n       ^^^^^^^^^^^^^^\nError: This expression has type int list -> int\n       but an expression was expected of type int\n", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n pos =\n  let sum = sumList pos in if sum < 10 then sum else addPHelper sum;;\n", "type": "type"}, {"in": "let additivePersistence n = \nlet pos = digits n in\naddPHelper n pos", "out": "Characters 51-61:\n  addPHelper n pos;;\n  ^^^^^^^^^^\nError: This function has type int -> int\n       It is applied to too many arguments; maybe you forgot a `;'.\n", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n =\n  let lst = digitsOfInt n in\n  let sum = sumList lst in if sum < 10 then sum else addPHelper sum;;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet additivePersistence n = let pos = digits n in addPHelper n pos;;\n", "type": "other"}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n pos =\nlet sum = sumList pos in \nif sum < 10\nthen sum\nelse addPHelper sum pos", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n pos =\n  let sum = sumList pos in if sum < 10 then sum else addPHelper sum pos;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet count = count + 1 in\nif sum < 10\nthen count\nelse addPHelper sum and count = count + 1", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n =\n  let n_pos = digits n in\n  let sum = sumList n_pos in\n  let count = count + 1 in if sum < 10 then count else addPHelper sum\nand count = count + 1;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet count = count + 1 in\nif sum < 10\nthen count\nelse addPHelper sum", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet rec addPHelper n =\n  let n_pos = digits n in\n  let sum = sumList n_pos in\n  let count = count + 1 in if sum < 10 then count else addPHelper sum\nand count = count + 1;;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n =\n  let n_pos = digits n in\n  let sum = sumList n_pos in\n  let count = count + 1 in if sum < 10 then count else addPHelper sum;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n c=\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nlet c = c + 1 in\nif sum > 10\nthen c\nelse addPHelper sum c", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in\n  let c = c + 1 in if sum > 10 then c else addPHelper sum c;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n c = \naddPHelper n 0", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in\n  let c = c + 1 in if sum > 10 then c else addPHelper sum c;;\n\nlet additivePersistence n c = addPHelper n 0;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+1)", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in if sum < 10 then c else addPHelper sum (c + 1);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let additivePersistence n = \naddPHelper n 0", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in if sum < 10 then c else addPHelper sum (c + 1);;\n\nlet additivePersistence n = addPHelper n 0;;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+2)", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in if sum < 10 then c else addPHelper sum (c + 2);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec addPHelper n c =\nlet n_pos = digits n in\nlet sum = sumList n_pos in \nif sum < 10\nthen c\nelse addPHelper sum (c+1)", "out": "", "min": "\nlet rec digithelper n l =\n  let x = n / 10 in\n  let y = n mod 10 in if x = 0 then y :: l else digithelper x (y :: l);;\n\nlet digitsOfInt n = if n <= 0 then [] else digithelper n [];;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n\nlet rec addPHelper n c =\n  let n_pos = digits n in\n  let sum = sumList n_pos in if sum < 10 then c else addPHelper sum (c + 1);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
{"event": "eval", "ocaml": [{"in": "let rec sumList xs = match xs with\n| []     -> 0 \n| hd::tl -> hd + sumList tl", "out": "", "min": "\nlet rec sumList xs = match xs with | [] -> 0 | hd::tl -> hd + (sumList tl);;\n", "type": ""}]}
