{"fixed": "let rec digitsOfInt n = (failwith \"\") 10 digitsOfInt n / 10;;", "span-size": 13, "in": "let rec digitsOfInt n = match n with\n| n < 0 -> []\n| _     -> n%10 digitsOfInt  n/10", "span-fraction": 0.5416666666666666}
{"fixed": "let rec digitsOfInt n = (failwith \"\") 10 digitsOfInt n / 10;;", "span-size": 13, "in": "let rec digitsOfInt n = match n with\n| n < 0 -> []\n| _     -> n%10 digitsOfInt  n/10", "span-fraction": 0.5416666666666666}
{"fixed": "let rec digitsOfInt n = (failwith \"\") ( n mod 10 ) + digitsOfInt ( n / 10 );;", "span-size": 3, "in": "let rec digitsOfInt n = match n with\n| (n mod 10) + digitsOfInt  (n/10)", "span-fraction": 0.14285714285714285}
{"fixed": "let rec digitsOfInt n = (failwith \"\") ( n mod 10 ) + digitsOfInt ( n / 10 );;", "span-size": 13, "in": "let rec digitsOfInt n = match n with\n| (n>0) -> 0\n| _ -> (n mod 10) + digitsOfInt  (n/10)", "span-fraction": 0.41935483870967744}
{"fixed": "let rec digitsOfInt n = (failwith \"\") ( n mod 10 ) + digitsOfInt ( n / 10 );;", "span-size": 11, "in": "let rec digitsOfInt n = match true with\n| n<0 -> 0\n| _ -> (n mod 10) + digitsOfInt  (n/10)", "span-fraction": 0.3793103448275862}
{"fixed": "let rec digitalRoot n =(failwith \"\");;", "span-size": 11, "in": "let rec digitalRoot n = \nlet temp = sum n\nif temp > 10\nthen digitalRoot temp", "span-fraction": 0.6470588235294118}
{"fixed": "let _ =(failwith \"\");;", "span-size": 27, "in": "let _= additivePersistence 987623444;\n\n\n\n\nlet rec sum n = \nif n <= 0 \nthen 0\nelse (n mod 10) + sum (n/10)", "span-fraction": 0.8709677419354839}
{"fixed": "let rec last l = match l with | [] -> [] | _ :: tl -> last(failwith \"\");;", "span-size": 2, "in": "let rec last l = match l with \n| [] -> []\n| _::tl -> last tl :: _", "span-fraction": 0.09523809523809523}
{"fixed": "let rec listReverse l = match l with | [] -> [] | _ ->(failwith \"\");;", "span-size": 4, "in": "let rec listReverse l = match l with\n| [] -> []\n| _ -> let x = last tl", "span-fraction": 0.2}
{"fixed": "let rec listReverse l = match l with | [] -> [] | hd :: tl -> (failwith \"\") tl;;", "span-size": 3, "in": "let rec listReverse l = match l with\n| [] -> []\n| hd::tl -> let x = last tl", "span-fraction": 0.13636363636363635}
